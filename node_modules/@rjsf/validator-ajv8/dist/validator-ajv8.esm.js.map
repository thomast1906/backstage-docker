{"version":3,"file":"validator-ajv8.esm.js","sources":["../src/createAjvInstance.ts","../src/validator.ts","../src/customizeValidator.ts","../src/index.ts"],"sourcesContent":["import Ajv, { Options } from \"ajv\";\nimport addFormats, { FormatsPluginOptions } from \"ajv-formats\";\nimport isObject from \"lodash/isObject\";\n\nimport { CustomValidatorOptionsType } from \"./types\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"@rjsf/utils\";\n\nexport const AJV_CONFIG: Options = {\n  allErrors: true,\n  multipleOfPrecision: 8,\n  strict: false,\n  verbose: true,\n} as const;\nexport const COLOR_FORMAT_REGEX =\n  /^(#?([0-9A-Fa-f]{3}){1,2}\\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\\(\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*,\\s*\\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\b\\s*\\))|(rgb\\(\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*,\\s*(\\d?\\d%|100%)+\\s*\\)))$/;\nexport const DATA_URL_FORMAT_REGEX =\n  /^data:([a-z]+\\/[a-z0-9-+.]+)?;(?:name=(.*);)?base64,(.*)$/;\n\n/** Creates an Ajv version 8 implementation object with standard support for the 'color` and `data-url` custom formats.\n * If `additionalMetaSchemas` are provided then the Ajv instance is modified to add each of the meta schemas in the\n * list. If `customFormats` are provided then those additional formats are added to the list of supported formats. If\n * `ajvOptionsOverrides` are provided then they are spread on top of the default `AJV_CONFIG` options when constructing\n * the `Ajv` instance. With Ajv v8, the JSON Schema formats are not provided by default, but can be plugged in. By\n * default, all formats from the `ajv-formats` library are added. To disable this capability, set the `ajvFormatOptions`\n * parameter to `false`. Additionally, you can configure the `ajv-formats` by providing a custom set of\n * [format options](https://github.com/ajv-validator/ajv-formats) to the `ajvFormatOptions` parameter.\n *\n * @param [additionalMetaSchemas] - The list of additional meta schemas that the validator can access\n * @param [customFormats] - The set of additional custom formats that the validator will support\n * @param [ajvOptionsOverrides={}] - The set of validator config override options\n * @param [ajvFormatOptions] - The `ajv-format` options to use when adding formats to `ajv`; pass `false` to disable it\n * @param [AjvClass] - The `Ajv` class to use when creating the validator instance\n */\nexport default function createAjvInstance(\n  additionalMetaSchemas?: CustomValidatorOptionsType[\"additionalMetaSchemas\"],\n  customFormats?: CustomValidatorOptionsType[\"customFormats\"],\n  ajvOptionsOverrides: CustomValidatorOptionsType[\"ajvOptionsOverrides\"] = {},\n  ajvFormatOptions?: FormatsPluginOptions | false,\n  AjvClass: typeof Ajv = Ajv\n) {\n  const ajv = new AjvClass({ ...AJV_CONFIG, ...ajvOptionsOverrides });\n  if (ajvFormatOptions) {\n    addFormats(ajv, ajvFormatOptions);\n  } else if (ajvFormatOptions !== false) {\n    addFormats(ajv);\n  }\n\n  // add custom formats\n  ajv.addFormat(\"data-url\", DATA_URL_FORMAT_REGEX);\n  ajv.addFormat(\"color\", COLOR_FORMAT_REGEX);\n\n  // Add RJSF-specific additional properties keywords so Ajv doesn't report errors if strict is enabled.\n  ajv.addKeyword(ADDITIONAL_PROPERTY_FLAG);\n  ajv.addKeyword(RJSF_ADDITONAL_PROPERTIES_FLAG);\n\n  // add more schemas to validate against\n  if (Array.isArray(additionalMetaSchemas)) {\n    ajv.addMetaSchema(additionalMetaSchemas);\n  }\n\n  // add more custom formats to validate against\n  if (isObject(customFormats)) {\n    Object.keys(customFormats).forEach((formatName) => {\n      ajv.addFormat(formatName, customFormats[formatName]);\n    });\n  }\n\n  return ajv;\n}\n","import Ajv, { ErrorObject, ValidateFunction } from \"ajv\";\nimport toPath from \"lodash/toPath\";\nimport isObject from \"lodash/isObject\";\nimport clone from \"lodash/clone\";\nimport {\n  CustomValidator,\n  ERRORS_KEY,\n  ErrorSchema,\n  ErrorSchemaBuilder,\n  ErrorTransformer,\n  FieldValidation,\n  FormContextType,\n  FormValidation,\n  GenericObjectType,\n  getDefaultFormState,\n  mergeValidationData,\n  REF_KEY,\n  RJSFSchema,\n  RJSFValidationError,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n  PROPERTIES_KEY,\n  getUiOptions,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport createAjvInstance from \"./createAjvInstance\";\n\nconst ROOT_SCHEMA_PREFIX = \"__rjsf_rootSchema\";\n\n/** `ValidatorType` implementation that uses the AJV 8 validation mechanism.\n */\nexport default class AJV8Validator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> implements ValidatorType<T, S, F>\n{\n  /** The AJV instance to use for all validations\n   *\n   * @private\n   */\n  private ajv: Ajv;\n\n  /** The Localizer function to use for localizing Ajv errors\n   *\n   * @private\n   */\n  readonly localizer?: Localizer;\n\n  /** Constructs an `AJV8Validator` instance using the `options`\n   *\n   * @param options - The `CustomValidatorOptionsType` options that are used to create the AJV instance\n   * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n   */\n  constructor(options: CustomValidatorOptionsType, localizer?: Localizer) {\n    const {\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n      AjvClass,\n    } = options;\n    this.ajv = createAjvInstance(\n      additionalMetaSchemas,\n      customFormats,\n      ajvOptionsOverrides,\n      ajvFormatOptions,\n      AjvClass\n    );\n    this.localizer = localizer;\n  }\n\n  /** Transforms a ajv validation errors list:\n   * [\n   *   {property: '.level1.level2[2].level3', message: 'err a'},\n   *   {property: '.level1.level2[2].level3', message: 'err b'},\n   *   {property: '.level1.level2[4].level3', message: 'err b'},\n   * ]\n   * Into an error tree:\n   * {\n   *   level1: {\n   *     level2: {\n   *       2: {level3: {errors: ['err a', 'err b']}},\n   *       4: {level3: {errors: ['err b']}},\n   *     }\n   *   }\n   * };\n   *\n   * @param errors - The list of RJSFValidationError objects\n   * @private\n   */\n  private toErrorSchema(errors: RJSFValidationError[]): ErrorSchema<T> {\n    const builder = new ErrorSchemaBuilder<T>();\n    if (errors.length) {\n      errors.forEach((error) => {\n        const { property, message } = error;\n        const path = toPath(property);\n\n        // If the property is at the root (.level1) then toPath creates\n        // an empty array element at the first index. Remove it.\n        if (path.length > 0 && path[0] === \"\") {\n          path.splice(0, 1);\n        }\n        if (message) {\n          builder.addErrors(message, path);\n        }\n      });\n    }\n    return builder.ErrorSchema;\n  }\n\n  /** Converts an `errorSchema` into a list of `RJSFValidationErrors`\n   *\n   * @param errorSchema - The `ErrorSchema` instance to convert\n   * @param [fieldPath=[]] - The current field path, defaults to [] if not specified\n   */\n  toErrorList(errorSchema?: ErrorSchema<T>, fieldPath: string[] = []) {\n    if (!errorSchema) {\n      return [];\n    }\n    let errorList: RJSFValidationError[] = [];\n    if (ERRORS_KEY in errorSchema) {\n      errorList = errorList.concat(\n        errorSchema[ERRORS_KEY]!.map((message: string) => {\n          const property = `.${fieldPath.join(\".\")}`;\n          return {\n            property,\n            message,\n            stack: `${property} ${message}`,\n          };\n        })\n      );\n    }\n    return Object.keys(errorSchema).reduce((acc, key) => {\n      if (key !== ERRORS_KEY) {\n        acc = acc.concat(\n          this.toErrorList((errorSchema as GenericObjectType)[key], [\n            ...fieldPath,\n            key,\n          ])\n        );\n      }\n      return acc;\n    }, errorList);\n  }\n\n  /** Given a `formData` object, recursively creates a `FormValidation` error handling structure around it\n   *\n   * @param formData - The form data around which the error handler is created\n   * @private\n   */\n  private createErrorHandler(formData: T): FormValidation<T> {\n    const handler: FieldValidation = {\n      // We store the list of errors for this node in a property named __errors\n      // to avoid name collision with a possible sub schema field named\n      // 'errors' (see `utils.toErrorSchema`).\n      __errors: [],\n      addError(message: string) {\n        this.__errors!.push(message);\n      },\n    };\n    if (Array.isArray(formData)) {\n      return formData.reduce((acc, value, key) => {\n        return { ...acc, [key]: this.createErrorHandler(value) };\n      }, handler);\n    }\n    if (isObject(formData)) {\n      const formObject: GenericObjectType = formData as GenericObjectType;\n      return Object.keys(formObject).reduce((acc, key) => {\n        return { ...acc, [key]: this.createErrorHandler(formObject[key]) };\n      }, handler as FormValidation<T>);\n    }\n    return handler as FormValidation<T>;\n  }\n\n  /** Unwraps the `errorHandler` structure into the associated `ErrorSchema`, stripping the `addError` functions from it\n   *\n   * @param errorHandler - The `FormValidation` error handling structure\n   * @private\n   */\n  private unwrapErrorHandler(errorHandler: FormValidation<T>): ErrorSchema<T> {\n    return Object.keys(errorHandler).reduce((acc, key) => {\n      if (key === \"addError\") {\n        return acc;\n      } else if (key === ERRORS_KEY) {\n        return { ...acc, [key]: (errorHandler as GenericObjectType)[key] };\n      }\n      return {\n        ...acc,\n        [key]: this.unwrapErrorHandler(\n          (errorHandler as GenericObjectType)[key]\n        ),\n      };\n    }, {} as ErrorSchema<T>);\n  }\n\n  /** Transforming the error output from ajv to format used by @rjsf/utils.\n   * At some point, components should be updated to support ajv.\n   *\n   * @param errors - The list of AJV errors to convert to `RJSFValidationErrors`\n   * @protected\n   */\n  protected transformRJSFValidationErrors(\n    errors: ErrorObject[] = [],\n    uiSchema?: UiSchema<T, S, F>\n  ): RJSFValidationError[] {\n    return errors.map((e: ErrorObject) => {\n      const {\n        instancePath,\n        keyword,\n        params,\n        schemaPath,\n        parentSchema,\n        ...rest\n      } = e;\n      let { message = \"\" } = rest;\n      let property = instancePath.replace(/\\//g, \".\");\n      let stack = `${property} ${message}`.trim();\n\n      if (\"missingProperty\" in params) {\n        property = property\n          ? `${property}.${params.missingProperty}`\n          : params.missingProperty;\n        const currentProperty: string = params.missingProperty;\n        const uiSchemaTitle = getUiOptions(\n          get(uiSchema, `${property.replace(/^\\./, \"\")}`)\n        ).title;\n\n        if (uiSchemaTitle) {\n          message = message.replace(currentProperty, uiSchemaTitle);\n        } else {\n          const parentSchemaTitle = get(parentSchema, [\n            PROPERTIES_KEY,\n            currentProperty,\n            \"title\",\n          ]);\n\n          if (parentSchemaTitle) {\n            message = message.replace(currentProperty, parentSchemaTitle);\n          }\n        }\n\n        stack = message;\n      } else {\n        const uiSchemaTitle = getUiOptions(\n          get(uiSchema, `${property.replace(/^\\./, \"\")}`)\n        ).title;\n\n        if (uiSchemaTitle) {\n          stack = `'${uiSchemaTitle}' ${message}`.trim();\n        } else {\n          const parentSchemaTitle = parentSchema?.title;\n\n          if (parentSchemaTitle) {\n            stack = `'${parentSchemaTitle}' ${message}`.trim();\n          }\n        }\n      }\n\n      // put data in expected format\n      return {\n        name: keyword,\n        property,\n        message,\n        params, // specific to ajv\n        stack,\n        schemaPath,\n      };\n    });\n  }\n\n  /** Runs the pure validation of the `schema` and `formData` without any of the RJSF functionality. Provided for use\n   * by the playground. Returns the `errors` from the validation\n   *\n   * @param schema - The schema against which to validate the form data   * @param schema\n   * @param formData - The form data to validate\n   */\n  rawValidation<Result = any>(\n    schema: RJSFSchema,\n    formData?: T\n  ): { errors?: Result[]; validationError?: Error } {\n    let compilationError: Error | undefined = undefined;\n    let compiledValidator: ValidateFunction | undefined;\n    if (schema[\"$id\"]) {\n      compiledValidator = this.ajv.getSchema(schema[\"$id\"]);\n    }\n    try {\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schema);\n      }\n      compiledValidator(formData);\n    } catch (err) {\n      compilationError = err as Error;\n    }\n\n    let errors;\n    if (compiledValidator) {\n      if (typeof this.localizer === \"function\") {\n        this.localizer(compiledValidator.errors);\n      }\n      errors = compiledValidator.errors || undefined;\n\n      // Clear errors to prevent persistent errors, see #1104\n      compiledValidator.errors = null;\n    }\n\n    return {\n      errors: errors as unknown as Result[],\n      validationError: compilationError,\n    };\n  }\n\n  /** This function processes the `formData` with an optional user contributed `customValidate` function, which receives\n   * the form data and a `errorHandler` function that will be used to add custom validation errors for each field. Also\n   * supports a `transformErrors` function that will take the raw AJV validation errors, prior to custom validation and\n   * transform them in what ever way it chooses.\n   *\n   * @param formData - The form data to validate\n   * @param schema - The schema against which to validate the form data\n   * @param [customValidate] - An optional function that is used to perform custom validation\n   * @param [transformErrors] - An optional function that is used to transform errors after AJV validation\n   * @param [uiSchema] - An optional uiSchema that is passed to `transformErrors` and `customValidate`\n   */\n  validateFormData(\n    formData: T | undefined,\n    schema: S,\n    customValidate?: CustomValidator<T, S, F>,\n    transformErrors?: ErrorTransformer<T, S, F>,\n    uiSchema?: UiSchema<T, S, F>\n  ): ValidationData<T> {\n    const rawErrors = this.rawValidation<ErrorObject>(schema, formData);\n    const { validationError: invalidSchemaError } = rawErrors;\n    let errors = this.transformRJSFValidationErrors(rawErrors.errors, uiSchema);\n\n    if (invalidSchemaError) {\n      errors = [...errors, { stack: invalidSchemaError!.message }];\n    }\n    if (typeof transformErrors === \"function\") {\n      errors = transformErrors(errors, uiSchema);\n    }\n\n    let errorSchema = this.toErrorSchema(errors);\n\n    if (invalidSchemaError) {\n      errorSchema = {\n        ...errorSchema,\n        $schema: {\n          __errors: [invalidSchemaError!.message],\n        },\n      };\n    }\n\n    if (typeof customValidate !== \"function\") {\n      return { errors, errorSchema };\n    }\n\n    // Include form data with undefined values, which is required for custom validation.\n    const newFormData = getDefaultFormState<T, S, F>(\n      this,\n      schema,\n      formData,\n      schema,\n      true\n    ) as T;\n\n    const errorHandler = customValidate(\n      newFormData,\n      this.createErrorHandler(newFormData),\n      uiSchema\n    );\n    const userErrorSchema = this.unwrapErrorHandler(errorHandler);\n    return mergeValidationData<T, S, F>(\n      this,\n      { errors, errorSchema },\n      userErrorSchema\n    );\n  }\n\n  /** Takes a `node` object and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixObject(node: S) {\n    for (const key in node) {\n      const realObj: GenericObjectType = node;\n      const value = realObj[key];\n      if (\n        key === REF_KEY &&\n        typeof value === \"string\" &&\n        value.startsWith(\"#\")\n      ) {\n        realObj[key] = ROOT_SCHEMA_PREFIX + value;\n      } else {\n        realObj[key] = this.withIdRefPrefix(value);\n      }\n    }\n    return node;\n  }\n\n  /** Takes a `node` object list and transforms any contained `$ref` node variables with a prefix, recursively calling\n   * `withIdRefPrefix` for any other elements.\n   *\n   * @param node - The list of object nodes to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @private\n   */\n  private withIdRefPrefixArray(node: S[]): S[] {\n    for (let i = 0; i < node.length; i++) {\n      node[i] = this.withIdRefPrefix(node[i]) as S;\n    }\n    return node;\n  }\n\n  /** Validates data against a schema, returning true if the data is valid, or\n   * false otherwise. If the schema is invalid, then this function will return\n   * false.\n   *\n   * @param schema - The schema against which to validate the form data\n   * @param formData - The form data to validate\n   * @param rootSchema - The root schema used to provide $ref resolutions\n   */\n  isValid(schema: S, formData: T | undefined, rootSchema: S) {\n    const rootSchemaId = rootSchema[\"$id\"] ?? ROOT_SCHEMA_PREFIX;\n    try {\n      // add the rootSchema ROOT_SCHEMA_PREFIX as id.\n      // then rewrite the schema ref's to point to the rootSchema\n      // this accounts for the case where schema have references to models\n      // that lives in the rootSchema but not in the schema in question.\n      if (this.ajv.getSchema(rootSchemaId) === undefined) {\n        this.ajv.addSchema(rootSchema, rootSchemaId);\n      }\n      const schemaWithIdRefPrefix = this.withIdRefPrefix(schema) as S;\n      let compiledValidator: ValidateFunction | undefined;\n      if (schemaWithIdRefPrefix[\"$id\"]) {\n        compiledValidator = this.ajv.getSchema(schemaWithIdRefPrefix[\"$id\"]);\n      }\n      if (compiledValidator === undefined) {\n        compiledValidator = this.ajv.compile(schemaWithIdRefPrefix);\n      }\n      const result = compiledValidator(formData);\n      return result as boolean;\n    } catch (e) {\n      console.warn(\"Error encountered compiling schema:\", e);\n      return false;\n    } finally {\n      // TODO: A function should be called if the root schema changes so we don't have to remove and recompile the schema every run.\n      // make sure we remove the rootSchema from the global ajv instance\n      this.ajv.removeSchema(rootSchemaId);\n    }\n  }\n\n  /** Recursively prefixes all $ref's in a schema with `ROOT_SCHEMA_PREFIX`\n   * This is used in isValid to make references to the rootSchema\n   *\n   * @param schemaNode - The object node to which a ROOT_SCHEMA_PREFIX is added when a REF_KEY is part of it\n   * @protected\n   */\n  protected withIdRefPrefix(schemaNode: S | S[]): S | S[] {\n    if (Array.isArray(schemaNode)) {\n      return this.withIdRefPrefixArray([...schemaNode]);\n    }\n    if (isObject(schemaNode)) {\n      return this.withIdRefPrefixObject(clone<S>(schemaNode));\n    }\n    return schemaNode;\n  }\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"@rjsf/utils\";\n\nimport { CustomValidatorOptionsType, Localizer } from \"./types\";\nimport AJV8Validator from \"./validator\";\n\n/** Creates and returns a customized implementation of the `ValidatorType` with the given customization `options` if\n * provided.\n *\n * @param [options={}] - The `CustomValidatorOptionsType` options that are used to create the `ValidatorType` instance\n * @param [localizer] - If provided, is used to localize a list of Ajv `ErrorObject`s\n */\nexport default function customizeValidator<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  options: CustomValidatorOptionsType = {},\n  localizer?: Localizer\n): ValidatorType<T, S, F> {\n  return new AJV8Validator<T, S, F>(options, localizer);\n}\n","import customizeValidator from \"./customizeValidator\";\n\nexport { customizeValidator };\nexport * from \"./types\";\n\nexport default customizeValidator();\n"],"names":["AJV_CONFIG","allErrors","multipleOfPrecision","strict","verbose","COLOR_FORMAT_REGEX","DATA_URL_FORMAT_REGEX","createAjvInstance","additionalMetaSchemas","customFormats","ajvOptionsOverrides","ajvFormatOptions","AjvClass","Ajv","ajv","addFormats","addFormat","addKeyword","ADDITIONAL_PROPERTY_FLAG","RJSF_ADDITONAL_PROPERTIES_FLAG","Array","isArray","addMetaSchema","isObject","Object","keys","forEach","formatName","ROOT_SCHEMA_PREFIX","AJV8Validator","options","localizer","toErrorSchema","errors","builder","ErrorSchemaBuilder","length","error","property","message","path","toPath","splice","addErrors","ErrorSchema","toErrorList","errorSchema","fieldPath","errorList","ERRORS_KEY","concat","map","join","stack","reduce","acc","key","createErrorHandler","formData","handler","__errors","addError","push","value","formObject","unwrapErrorHandler","errorHandler","transformRJSFValidationErrors","uiSchema","e","instancePath","keyword","params","schemaPath","parentSchema","rest","replace","trim","missingProperty","currentProperty","uiSchemaTitle","getUiOptions","get","title","parentSchemaTitle","PROPERTIES_KEY","name","rawValidation","schema","compilationError","undefined","compiledValidator","getSchema","compile","err","validationError","validateFormData","customValidate","transformErrors","rawErrors","invalidSchemaError","$schema","newFormData","getDefaultFormState","userErrorSchema","mergeValidationData","withIdRefPrefixObject","node","realObj","REF_KEY","startsWith","withIdRefPrefix","withIdRefPrefixArray","i","isValid","rootSchema","rootSchemaId","addSchema","schemaWithIdRefPrefix","result","console","warn","removeSchema","schemaNode","clone","customizeValidator"],"mappings":"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"}