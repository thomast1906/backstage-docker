{"version":3,"file":"material-ui.cjs.production.min.js","sources":["../src/AddButton/AddButton.tsx","../src/ArrayFieldItemTemplate/ArrayFieldItemTemplate.tsx","../src/ArrayFieldTemplate/ArrayFieldTemplate.tsx","../src/BaseInputTemplate/BaseInputTemplate.tsx","../src/DescriptionField/DescriptionField.tsx","../src/ErrorList/ErrorList.tsx","../src/IconButton/IconButton.tsx","../src/FieldErrorTemplate/FieldErrorTemplate.tsx","../src/FieldHelpTemplate/FieldHelpTemplate.tsx","../src/FieldTemplate/FieldTemplate.tsx","../src/ObjectFieldTemplate/ObjectFieldTemplate.tsx","../src/SubmitButton/SubmitButton.tsx","../src/TitleField/TitleField.tsx","../src/WrapIfAdditionalTemplate/WrapIfAdditionalTemplate.tsx","../src/Templates/Templates.ts","../src/CheckboxWidget/CheckboxWidget.tsx","../src/CheckboxesWidget/CheckboxesWidget.tsx","../src/DateWidget/DateWidget.tsx","../src/DateTimeWidget/DateTimeWidget.tsx","../src/RadioWidget/RadioWidget.tsx","../src/RangeWidget/RangeWidget.tsx","../src/SelectWidget/SelectWidget.tsx","../src/TextareaWidget/TextareaWidget.tsx","../src/Widgets/Widgets.ts","../src/Theme/Theme.tsx","../src/MuiForm/MuiForm.tsx"],"sourcesContent":["import React from \"react\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema, registry, ...props }: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton title=\"Add Item\" {...props} color=\"primary\">\n      <AddIcon />\n    </IconButton>\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    uiSchema,\n    registry,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n    minWidth: 0,\n  };\n  return (\n    <Grid container={true} alignItems=\"center\">\n      <Grid item={true} xs style={{ overflow: \"auto\" }}>\n        <Box mb={2}>\n          <Paper elevation={2}>\n            <Box p={2}>{children}</Box>\n          </Paper>\n        </Box>\n      </Grid>\n\n      {hasToolbar && (\n        <Grid item={true}>\n          {(hasMoveUp || hasMoveDown) && (\n            <MoveUpButton\n              style={btnStyle}\n              disabled={disabled || readonly || !hasMoveUp}\n              onClick={onReorderClick(index, index - 1)}\n              uiSchema={uiSchema}\n              registry={registry}\n            />\n          )}\n          {(hasMoveUp || hasMoveDown) && (\n            <MoveDownButton\n              style={btnStyle}\n              disabled={disabled || readonly || !hasMoveDown}\n              onClick={onReorderClick(index, index + 1)}\n              uiSchema={uiSchema}\n              registry={registry}\n            />\n          )}\n          {hasRemove && (\n            <RemoveButton\n              style={btnStyle}\n              disabled={disabled || readonly}\n              onClick={onDropIndexClick(index)}\n              uiSchema={uiSchema}\n              registry={registry}\n            />\n          )}\n        </Grid>\n      )}\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <Paper elevation={2}>\n      <Box p={2}>\n        <ArrayFieldTitleTemplate\n          idSchema={idSchema}\n          title={uiOptions.title || title}\n          schema={schema}\n          uiSchema={uiSchema}\n          required={required}\n          registry={registry}\n        />\n        <ArrayFieldDescriptionTemplate\n          idSchema={idSchema}\n          description={uiOptions.description || schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n        <Grid container={true} key={`array-item-list-${idSchema.$id}`}>\n          {items &&\n            items.map(\n              ({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n                <ArrayFieldItemTemplate key={key} {...itemProps} />\n              )\n            )}\n          {canAdd && (\n            <Grid container justifyContent=\"flex-end\">\n              <Grid item={true}>\n                <Box mt={2}>\n                  <AddButton\n                    className=\"array-item-add\"\n                    onClick={onAddClick}\n                    disabled={disabled || readonly}\n                    uiSchema={uiSchema}\n                    registry={registry}\n                  />\n                </Box>\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n      </Box>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport {\n  ariaDescribedByIds,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    placeholder,\n    required,\n    readonly,\n    disabled,\n    type,\n    label,\n    value,\n    onChange,\n    onBlur,\n    onFocus,\n    autofocus,\n    options,\n    schema,\n    uiSchema,\n    rawErrors = [],\n    formContext,\n    registry,\n    ...textFieldProps\n  } = props;\n  const inputProps = getInputProps<T, S, F>(schema, type, options);\n  // Now we need to pull out the step, min, max into an inner `inputProps` for material-ui\n  const { step, min, max, ...rest } = inputProps;\n  const otherProps = {\n    inputProps: {\n      step,\n      min,\n      max,\n      ...(schema.examples ? { list: examplesId<T>(id) } : undefined),\n    },\n    ...rest,\n  };\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) =>\n    onChange(value === \"\" ? options.emptyValue : value);\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, value);\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLInputElement>) => onFocus(id, value);\n\n  const { schemaUtils } = registry;\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  return (\n    <>\n      <TextField\n        id={id}\n        name={id}\n        placeholder={placeholder}\n        label={displayLabel ? label || schema.title : false}\n        autoFocus={autofocus}\n        required={required}\n        disabled={disabled || readonly}\n        {...otherProps}\n        value={value || value === 0 ? value : \"\"}\n        error={rawErrors.length > 0}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        {...(textFieldProps as TextFieldProps)}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(\n              schema.default && !schema.examples.includes(schema.default)\n                ? ([schema.default] as string[])\n                : []\n            )\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (description) {\n    return (\n      <Typography id={id} variant=\"subtitle2\" style={{ marginTop: \"5px\" }}>\n        {description}\n      </Typography>\n    );\n  }\n\n  return null;\n}\n","import React from \"react\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport Box from \"@material-ui/core/Box\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <Paper elevation={2}>\n      <Box mb={2} p={2}>\n        <Typography variant=\"h6\">Errors</Typography>\n        <List dense={true}>\n          {errors.map((error, i: number) => {\n            return (\n              <ListItem key={i}>\n                <ListItemIcon>\n                  <ErrorIcon color=\"error\" />\n                </ListItemIcon>\n                <ListItemText primary={error.stack} />\n              </ListItem>\n            );\n          })}\n        </List>\n      </Box>\n    </Paper>\n  );\n}\n","import React from \"react\";\nimport IconButton, {\n  IconButtonProps as MuiIconButtonProps,\n} from \"@material-ui/core/IconButton\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nexport default function MuiIconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const { icon, color, uiSchema, registry, ...otherProps } = props;\n  return (\n    <IconButton\n      {...otherProps}\n      size=\"small\"\n      color={color as MuiIconButtonProps[\"color\"]}\n    >\n      {icon}\n    </IconButton>\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <MuiIconButton\n      title=\"Move down\"\n      {...props}\n      icon={<ArrowDownwardIcon fontSize=\"small\" />}\n    />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <MuiIconButton\n      title=\"Move up\"\n      {...props}\n      icon={<ArrowUpwardIcon fontSize=\"small\" />}\n    />\n  );\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const { iconType, ...otherProps } = props;\n  return (\n    <MuiIconButton\n      title=\"Remove\"\n      {...otherProps}\n      color=\"secondary\"\n      icon={\n        <RemoveIcon fontSize={iconType === \"default\" ? \"medium\" : \"small\"} />\n      }\n    />\n  );\n}\n","import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport List from \"@material-ui/core/List\";\nimport {\n  errorId,\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <List dense={true} disablePadding={true}>\n      {errors.map((error, i: number) => {\n        return (\n          <ListItem key={i} disableGutters={true}>\n            <FormHelperText id={id}>{error}</FormHelperText>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}\n","import React from \"react\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\nimport {\n  helpId,\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  return <FormHelperText id={id}>{help}</FormHelperText>;\n}\n","import React from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    children,\n    classNames,\n    style,\n    disabled,\n    displayLabel,\n    hidden,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    readonly,\n    required,\n    rawErrors = [],\n    errors,\n    help,\n    rawDescription,\n    schema,\n    uiSchema,\n    registry,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n\n  if (hidden) {\n    return <div style={{ display: \"none\" }}>{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate\n      classNames={classNames}\n      style={style}\n      disabled={disabled}\n      id={id}\n      label={label}\n      onDropPropertyClick={onDropPropertyClick}\n      onKeyChange={onKeyChange}\n      readonly={readonly}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    >\n      <FormControl\n        fullWidth={true}\n        error={rawErrors.length ? true : false}\n        required={required}\n      >\n        {children}\n        {displayLabel && rawDescription ? (\n          <Typography variant=\"caption\" color=\"textSecondary\">\n            {rawDescription}\n          </Typography>\n        ) : null}\n        {errors}\n        {help}\n      </FormControl>\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {\n  FormContextType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    title,\n    properties,\n    required,\n    disabled,\n    readonly,\n    uiSchema,\n    idSchema,\n    schema,\n    formData,\n    onAddClick,\n    registry,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <>\n      {(uiOptions.title || title) && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(uiOptions.description || description) && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={uiOptions.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <Grid container={true} spacing={2} style={{ marginTop: \"10px\" }}>\n        {properties.map((element, index) =>\n          // Remove the <Grid> if the inner element is hidden as the <Grid>\n          // itself would otherwise still take up space.\n          element.hidden ? (\n            element.content\n          ) : (\n            <Grid\n              item={true}\n              xs={12}\n              key={index}\n              style={{ marginBottom: \"10px\" }}\n            >\n              {element.content}\n            </Grid>\n          )\n        )}\n        {canExpand<T, S, F>(schema, uiSchema, formData) && (\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item={true}>\n              <AddButton\n                className=\"object-property-expand\"\n                onClick={onAddClick(schema)}\n                disabled={disabled || readonly}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            </Grid>\n          </Grid>\n        )}\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Button from \"@material-ui/core/Button\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <Box marginTop={3}>\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        color=\"primary\"\n        {...submitButtonProps}\n      >\n        {submitText}\n      </Button>\n    </Box>\n  );\n}\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, title }: TitleFieldProps<T, S, F>) {\n  return (\n    <Box id={id} mb={1} mt={1}>\n      <Typography variant=\"h5\">{title}</Typography>\n      <Divider />\n    </Box>\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Grid from \"@material-ui/core/Grid\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Input from \"@material-ui/core/Input\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    children,\n    classNames,\n    style,\n    disabled,\n    id,\n    label,\n    onDropPropertyClick,\n    onKeyChange,\n    readonly,\n    required,\n    schema,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  const handleBlur = ({ target }: React.FocusEvent<HTMLInputElement>) =>\n    onKeyChange(target.value);\n\n  return (\n    <Grid\n      container\n      key={`${id}-key`}\n      alignItems=\"center\"\n      spacing={2}\n      className={classNames}\n      style={style}\n    >\n      <Grid item xs>\n        <FormControl fullWidth={true} required={required}>\n          <InputLabel>{keyLabel}</InputLabel>\n          <Input\n            defaultValue={label}\n            disabled={disabled || readonly}\n            id={`${id}-key`}\n            name={`${id}-key`}\n            onBlur={!readonly ? handleBlur : undefined}\n            type=\"text\"\n          />\n        </FormControl>\n      </Grid>\n      <Grid item={true} xs>\n        {children}\n      </Grid>\n      <Grid item={true}>\n        <RemoveButton\n          iconType=\"default\"\n          style={btnStyle}\n          disabled={disabled || readonly}\n          onClick={onDropPropertyClick(label)}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      </Grid>\n    </Grid>\n  );\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport AddButton from \"../AddButton\";\nimport ArrayFieldItemTemplate from \"../ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"../ArrayFieldTemplate\";\nimport BaseInputTemplate from \"../BaseInputTemplate\";\nimport DescriptionField from \"../DescriptionField\";\nimport ErrorList from \"../ErrorList\";\nimport { MoveDownButton, MoveUpButton, RemoveButton } from \"../IconButton\";\nimport FieldErrorTemplate from \"../FieldErrorTemplate\";\nimport FieldHelpTemplate from \"../FieldHelpTemplate\";\nimport FieldTemplate from \"../FieldTemplate\";\nimport ObjectFieldTemplate from \"../ObjectFieldTemplate\";\nimport SubmitButton from \"../SubmitButton\";\nimport TitleField from \"../TitleField\";\nimport WrapIfAdditionalTemplate from \"../WrapIfAdditionalTemplate\";\n\nexport function generateTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Partial<TemplatesType<T, S, F>> {\n  return {\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    BaseInputTemplate,\n    ButtonTemplates: {\n      AddButton,\n      MoveDownButton,\n      MoveUpButton,\n      RemoveButton,\n      SubmitButton,\n    },\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    FieldTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default generateTemplates();\n","import React from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport {\n  ariaDescribedByIds,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    schema,\n    id,\n    value,\n    disabled,\n    readonly,\n    label,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n  } = props;\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const _onChange = (_: any, checked: boolean) => onChange(checked);\n  const _onBlur = ({\n    target: { value },\n  }: React.FocusEvent<HTMLButtonElement>) => onBlur(id, value);\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLButtonElement>) => onFocus(id, value);\n\n  return (\n    <FormControlLabel\n      control={\n        <Checkbox\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : Boolean(value)}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={_onChange}\n          onBlur={_onBlur}\n          onFocus={_onFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n      }\n      label={label || \"\"}\n    />\n  );\n}\n","import React from \"react\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  label,\n  id,\n  disabled,\n  options,\n  value,\n  autofocus,\n  readonly,\n  required,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const _onChange =\n    (index: number) =>\n    ({ target: { checked } }: React.ChangeEvent<HTMLInputElement>) => {\n      if (checked) {\n        onChange(\n          enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions)\n        );\n      } else {\n        onChange(\n          enumOptionsDeselectValue<S>(index, checkboxesValues, enumOptions)\n        );\n      }\n    };\n\n  const _onBlur = ({\n    target: { value },\n  }: React.FocusEvent<HTMLButtonElement>) =>\n    onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLButtonElement>) =>\n    onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n\n  return (\n    <>\n      <FormLabel required={required} htmlFor={id}>\n        {label || schema.title}\n      </FormLabel>\n      <FormGroup id={id} row={!!inline}>\n        {Array.isArray(enumOptions) &&\n          enumOptions.map((option, index: number) => {\n            const checked = enumOptionsIsSelected<S>(\n              option.value,\n              checkboxesValues\n            );\n            const itemDisabled =\n              Array.isArray(enumDisabled) &&\n              enumDisabled.indexOf(option.value) !== -1;\n            const checkbox = (\n              <Checkbox\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={_onChange(index)}\n                onBlur={_onBlur}\n                onFocus={_onFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n            );\n            return (\n              <FormControlLabel\n                control={checkbox}\n                key={index}\n                label={option.label}\n              />\n            );\n          })}\n      </FormGroup>\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"date\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      {...props}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const value = utcToLocal(props.value);\n  const onChange = (value: any) => {\n    props.onChange(localToUTC(value));\n  };\n\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      InputLabelProps={{\n        shrink: true,\n      }}\n      {...props}\n      value={value}\n      onChange={onChange}\n    />\n  );\n}\n","import React from \"react\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  schema,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  label,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue } = options;\n\n  const _onChange = (_: any, value: any) =>\n    onChange(enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue));\n\n  const row = options ? options.inline : false;\n  const selectedIndex = enumOptionsIndexForValue<S>(value, enumOptions);\n\n  return (\n    <>\n      <FormLabel required={required} htmlFor={id}>\n        {label || schema.title}\n      </FormLabel>\n      <RadioGroup\n        id={id}\n        name={id}\n        value={selectedIndex}\n        row={row as boolean}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      >\n        {Array.isArray(enumOptions) &&\n          enumOptions.map((option, index) => {\n            const itemDisabled =\n              Array.isArray(enumDisabled) &&\n              enumDisabled.indexOf(option.value) !== -1;\n            const radio = (\n              <FormControlLabel\n                control={\n                  <Radio name={id} id={optionId(id, index)} color=\"primary\" />\n                }\n                label={option.label}\n                value={String(index)}\n                key={index}\n                disabled={disabled || itemDisabled || readonly}\n              />\n            );\n\n            return radio;\n          })}\n      </RadioGroup>\n    </>\n  );\n}\n","import React from \"react\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Slider from \"@material-ui/core/Slider\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  rangeSpec,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    value,\n    readonly,\n    disabled,\n    onBlur,\n    onFocus,\n    options,\n    schema,\n    onChange,\n    required,\n    label,\n    id,\n  } = props;\n  const sliderProps = { value, label, id, name: id, ...rangeSpec<S>(schema) };\n\n  const _onChange = (_: any, value?: number | number[]) => {\n    onChange(value ? value : options.emptyValue);\n  };\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, value);\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLInputElement>) => onFocus(id, value);\n\n  return (\n    <>\n      <FormLabel required={required} htmlFor={id}>\n        {label || schema.title}\n      </FormLabel>\n      <Slider\n        disabled={disabled || readonly}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        valueLabelDisplay=\"auto\"\n        {...sliderProps}\n        aria-describedby={ariaDescribedByIds<T>(id)}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  id,\n  options,\n  label,\n  required,\n  disabled,\n  readonly,\n  placeholder,\n  value,\n  multiple,\n  autofocus,\n  onChange,\n  onBlur,\n  onFocus,\n  rawErrors = [],\n  registry,\n  uiSchema,\n  hideError,\n  formContext,\n  ...textFieldProps\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n\n  multiple = typeof multiple === \"undefined\" ? false : !!multiple;\n\n  const emptyValue = multiple ? [] : \"\";\n  const isEmpty =\n    typeof value === \"undefined\" ||\n    (multiple && value.length < 1) ||\n    (!multiple && value === emptyValue);\n\n  const _onChange = ({\n    target: { value },\n  }: React.ChangeEvent<{ value: string }>) =>\n    onChange(enumOptionsValueForIndex<S>(value, enumOptions, optEmptyVal));\n  const _onBlur = ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n    onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, optEmptyVal));\n  const _onFocus = ({\n    target: { value },\n  }: React.FocusEvent<HTMLInputElement>) =>\n    onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, optEmptyVal));\n  const selectedIndexes = enumOptionsIndexForValue<S>(\n    value,\n    enumOptions,\n    multiple\n  );\n\n  return (\n    <TextField\n      id={id}\n      name={id}\n      label={label || schema.title}\n      value={isEmpty ? emptyValue : selectedIndexes}\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      placeholder={placeholder}\n      error={rawErrors.length > 0}\n      onChange={_onChange}\n      onBlur={_onBlur}\n      onFocus={_onFocus}\n      {...(textFieldProps as TextFieldProps)}\n      select // Apply this and the following props after the potential overrides defined in textFieldProps\n      InputLabelProps={{\n        ...textFieldProps.InputLabelProps,\n        shrink: !isEmpty,\n      }}\n      SelectProps={{\n        ...textFieldProps.SelectProps,\n        multiple,\n      }}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i: number) => {\n          const disabled: boolean =\n            Array.isArray(enumDisabled) && enumDisabled.indexOf(value) !== -1;\n          return (\n            <MenuItem key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </MenuItem>\n          );\n        })}\n    </TextField>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n  getTemplate,\n} from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n\n  let rows: string | number = 5;\n  if (typeof options.rows === \"string\" || typeof options.rows === \"number\") {\n    rows = options.rows;\n  }\n\n  return <BaseInputTemplate {...props} multiline rows={rows} />;\n}\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport CheckboxWidget from \"../CheckboxWidget/CheckboxWidget\";\nimport CheckboxesWidget from \"../CheckboxesWidget/CheckboxesWidget\";\nimport DateWidget from \"../DateWidget/DateWidget\";\nimport DateTimeWidget from \"../DateTimeWidget/DateTimeWidget\";\nimport RadioWidget from \"../RadioWidget/RadioWidget\";\nimport RangeWidget from \"../RangeWidget/RangeWidget\";\nimport SelectWidget from \"../SelectWidget/SelectWidget\";\nimport TextareaWidget from \"../TextareaWidget/TextareaWidget\";\n\nexport function generateWidgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    CheckboxWidget,\n    CheckboxesWidget,\n    DateWidget,\n    DateTimeWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    TextareaWidget,\n  };\n}\n\nexport default generateWidgets();\n","import { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\nimport { ThemeProps } from \"@rjsf/core\";\n\nimport { generateTemplates } from \"../Templates\";\nimport { generateWidgets } from \"../Widgets\";\n\nexport function generateTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ThemeProps<T, S, F> {\n  return {\n    templates: generateTemplates<T, S, F>(),\n    widgets: generateWidgets<T, S, F>(),\n  };\n}\n\nexport default generateTheme();\n","import { ComponentType } from \"react\";\nimport { withTheme, FormProps } from \"@rjsf/core\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\nimport { generateTheme } from \"../Theme\";\n\nexport function generateForm<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): ComponentType<FormProps<T, S, F>> {\n  return withTheme<T, S, F>(generateTheme<T, S, F>());\n}\n\nexport default generateForm();\n"],"names":["AddButton","_ref","uiSchema","props","_objectWithoutPropertiesLoose","_excluded","React","createElement","IconButton","_extends","title","color","AddIcon","ArrayFieldItemTemplate","disabled","hasToolbar","hasMoveDown","hasMoveUp","hasRemove","index","onDropIndexClick","onReorderClick","readonly","registry","_registry$templates$B","templates","ButtonTemplates","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","flex","paddingLeft","paddingRight","fontWeight","minWidth","Grid","container","alignItems","item","xs","style","overflow","Box","mb","Paper","elevation","p","children","onClick","ArrayFieldTemplate","canAdd","idSchema","items","onAddClick","required","schema","uiOptions","getUiOptions","ArrayFieldDescriptionTemplate","getTemplate","ArrayFieldTitleTemplate","description","key","$id","map","itemProps","justifyContent","mt","className","BaseInputTemplate","id","placeholder","type","label","value","onChange","onBlur","onFocus","autofocus","options","_props$rawErrors","rawErrors","textFieldProps","inputProps","getInputProps","step","min","max","rest","_excluded2","otherProps","examples","list","examplesId","undefined","displayLabel","schemaUtils","getDisplayLabel","Fragment","TextField","name","autoFocus","error","length","target","emptyValue","_ref2","_ref3","ariaDescribedByIds","Array","isArray","concat","includes","example","DescriptionField","Typography","variant","marginTop","ErrorList","errors","List","dense","i","ListItem","ListItemIcon","ErrorIcon","ListItemText","primary","stack","MuiIconButton","icon","size","ArrowDownwardIcon","fontSize","ArrowUpwardIcon","iconType","RemoveIcon","FieldErrorTemplate","_props$errors","errorId","disablePadding","disableGutters","FormHelperText","FieldHelpTemplate","help","helpId","FieldTemplate","classNames","hidden","onDropPropertyClick","onKeyChange","rawDescription","WrapIfAdditionalTemplate","display","FormControl","fullWidth","ObjectFieldTemplate","properties","formData","TitleFieldTemplate","DescriptionFieldTemplate","titleId","descriptionId","spacing","element","content","marginBottom","canExpand","SubmitButton","getSubmitButtonOptions","submitText","_getSubmitButtonOptio2","_getSubmitButtonOptio","norender","Button","TitleField","Divider","ADDITIONAL_PROPERTY_FLAG","InputLabel","Input","defaultValue","generateTemplates","ErrorListTemplate","Templates","CheckboxWidget","schemaRequiresTrueValue","FormControlLabel","control","Checkbox","checked","Boolean","_","CheckboxesWidget","enumOptions","enumDisabled","inline","checkboxesValues","_onChange","enumOptionsSelectValue","enumOptionsDeselectValue","_onBlur","enumOptionsValueForIndex","_onFocus","_ref4","FormLabel","htmlFor","FormGroup","row","option","enumOptionsIsSelected","itemDisabled","indexOf","checkbox","optionId","DateWidget","InputLabelProps","shrink","DateTimeWidget","utcToLocal","localToUTC","RadioWidget","selectedIndex","enumOptionsIndexForValue","RadioGroup","Radio","String","RangeWidget","sliderProps","rangeSpec","Slider","valueLabelDisplay","SelectWidget","multiple","_ref$rawErrors","optEmptyVal","isEmpty","selectedIndexes","select","SelectProps","_ref5","MenuItem","TextareaWidget","rows","multiline","generateWidgets","Widgets","generateTheme","widgets","Theme","generateForm","withTheme","MuiForm"],"mappings":"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"}