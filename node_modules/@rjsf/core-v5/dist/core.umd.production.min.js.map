{"version":3,"file":"core.umd.production.min.js","sources":["../src/components/fields/ArrayField.tsx","../src/components/fields/BooleanField.tsx","../src/components/fields/MultiSchemaField.tsx","../src/components/fields/NumberField.tsx","../src/components/fields/ObjectField.tsx","../src/components/fields/SchemaField.tsx","../src/components/fields/StringField.tsx","../src/components/fields/NullField.tsx","../src/components/templates/ArrayFieldDescriptionTemplate.tsx","../src/components/templates/ArrayFieldItemTemplate.tsx","../src/components/templates/ArrayFieldTemplate.tsx","../src/components/templates/ArrayFieldTitleTemplate.tsx","../src/components/templates/BaseInputTemplate.tsx","../src/components/templates/ButtonTemplates/SubmitButton.tsx","../src/components/templates/ButtonTemplates/IconButton.tsx","../src/components/templates/ButtonTemplates/AddButton.tsx","../src/components/templates/DescriptionField.tsx","../src/components/templates/ErrorList.tsx","../src/components/templates/FieldTemplate/Label.tsx","../src/components/templates/FieldTemplate/FieldTemplate.tsx","../src/components/templates/FieldErrorTemplate.tsx","../src/components/templates/FieldHelpTemplate.tsx","../src/components/templates/ObjectFieldTemplate.tsx","../src/components/templates/TitleField.tsx","../src/components/templates/UnsupportedField.tsx","../src/components/templates/WrapIfAdditionalTemplate.tsx","../src/components/widgets/AltDateWidget.tsx","../src/components/widgets/AltDateTimeWidget.tsx","../src/components/widgets/CheckboxWidget.tsx","../src/components/widgets/CheckboxesWidget.tsx","../src/components/widgets/ColorWidget.tsx","../src/components/widgets/DateWidget.tsx","../src/components/widgets/DateTimeWidget.tsx","../src/components/widgets/EmailWidget.tsx","../src/components/widgets/FileWidget.tsx","../src/components/widgets/HiddenWidget.tsx","../src/components/widgets/PasswordWidget.tsx","../src/components/widgets/RadioWidget.tsx","../src/components/widgets/RangeWidget.tsx","../src/components/widgets/SelectWidget.tsx","../src/components/widgets/TextareaWidget.tsx","../src/components/widgets/TextWidget.tsx","../src/components/widgets/URLWidget.tsx","../src/components/widgets/UpDownWidget.tsx","../src/getDefaultRegistry.ts","../src/components/fields/index.ts","../src/components/templates/index.ts","../src/components/templates/ButtonTemplates/index.ts","../src/components/widgets/index.ts","../src/components/Form.tsx","../src/withTheme.tsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getWidget,\n  getUiOptions,\n  isFixedItems,\n  allowAdditionalItems,\n  isCustomWidget,\n  optionsList,\n  ArrayFieldTemplateProps,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ITEMS_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport { nanoid } from \"nanoid\";\n\n/** Type used to represent the keyed form data used in the state */\ntype KeyedFormDataType<T> = { key: string; item: T };\n\n/** Type used for the state of the `ArrayField` component */\ntype ArrayFieldState<T> = {\n  /** The keyed form data elements */\n  keyedFormData: KeyedFormDataType<T>[];\n  /** Flag indicating whether any of the keyed form data has been updated */\n  updatedKeyedFormData: boolean;\n};\n\n/** Used to generate a unique ID for an element in a row */\nfunction generateRowId() {\n  return nanoid();\n}\n\n/** Converts the `formData` into `KeyedFormDataType` data, using the `generateRowId()` function to create the key\n *\n * @param formData - The data for the form\n * @returns - The `formData` converted into a `KeyedFormDataType` element\n */\nfunction generateKeyedFormData<T>(formData: T[]): KeyedFormDataType<T>[] {\n  return !Array.isArray(formData)\n    ? []\n    : formData.map((item) => {\n        return {\n          key: generateRowId(),\n          item,\n        };\n      });\n}\n\n/** Converts `KeyedFormDataType` data into the inner `formData`\n *\n * @param keyedFormData - The `KeyedFormDataType` to be converted\n * @returns - The inner `formData` item(s) in the `keyedFormData`\n */\nfunction keyedToPlainFormData<T>(\n  keyedFormData: KeyedFormDataType<T> | KeyedFormDataType<T>[]\n): T[] {\n  if (Array.isArray(keyedFormData)) {\n    return keyedFormData.map((keyedItem) => keyedItem.item);\n  }\n  return [];\n}\n\n/** The `ArrayField` component is used to render a field in the schema that is of type `array`. It supports both normal\n * and fixed array, allowing user to add and remove elements from the array data.\n */\nclass ArrayField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T[], S, F>, ArrayFieldState<T>> {\n  /** Constructs an `ArrayField` from the `props`, generating the initial keyed data from the `formData`\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T[], S, F>) {\n    super(props);\n    const { formData = [] } = props;\n    const keyedFormData = generateKeyedFormData<T>(formData);\n    this.state = {\n      keyedFormData,\n      updatedKeyedFormData: false,\n    };\n  }\n\n  /** React lifecycle method that is called when the props are about to change allowing the state to be updated. It\n   * regenerates the keyed form data and returns it\n   *\n   * @param nextProps - The next set of props data\n   * @param prevState - The previous set of state data\n   */\n  static getDerivedStateFromProps<\n    T = any,\n    S extends StrictRJSFSchema = RJSFSchema,\n    F extends FormContextType = any\n  >(\n    nextProps: Readonly<FieldProps<T[], S, F>>,\n    prevState: Readonly<ArrayFieldState<T>>\n  ) {\n    // Don't call getDerivedStateFromProps if keyed formdata was just updated.\n    if (prevState.updatedKeyedFormData) {\n      return {\n        updatedKeyedFormData: false,\n      };\n    }\n    const nextFormData = Array.isArray(nextProps.formData)\n      ? nextProps.formData\n      : [];\n    const previousKeyedFormData = prevState.keyedFormData || [];\n    const newKeyedFormData =\n      nextFormData.length === previousKeyedFormData.length\n        ? previousKeyedFormData.map((previousKeyedFormDatum, index) => {\n            return {\n              key: previousKeyedFormDatum.key,\n              item: nextFormData[index],\n            };\n          })\n        : generateKeyedFormData<T>(nextFormData);\n    return {\n      keyedFormData: newKeyedFormData,\n    };\n  }\n\n  /** Returns the appropriate title for an item by getting first the title from the schema.items, then falling back to\n   * the description from the schema.items, and finally the string \"Item\"\n   */\n  get itemTitle() {\n    const { schema } = this.props;\n    return get(\n      schema,\n      [ITEMS_KEY, \"title\"],\n      get(schema, [ITEMS_KEY, \"description\"], \"Item\")\n    );\n  }\n\n  /** Determines whether the item described in the schema is always required, which is determined by whether any item\n   * may be null.\n   *\n   * @param itemSchema - The schema for the item\n   * @return - True if the item schema type does not contain the \"null\" type\n   */\n  isItemRequired(itemSchema: S) {\n    if (Array.isArray(itemSchema.type)) {\n      // While we don't yet support composite/nullable jsonschema types, it's\n      // future-proof to check for requirement against these.\n      return !itemSchema.type.includes(\"null\");\n    }\n    // All non-null array item types are inherently required by design\n    return itemSchema.type !== \"null\";\n  }\n\n  /** Determines whether more items can be added to the array. If the uiSchema indicates the array doesn't allow adding\n   * then false is returned. Otherwise, if the schema indicates that there are a maximum number of items and the\n   * `formData` matches that value, then false is returned, otherwise true is returned.\n   *\n   * @param formItems - The list of items in the form\n   * @returns - True if the item is addable otherwise false\n   */\n  canAddItem(formItems: any[]) {\n    const { schema, uiSchema } = this.props;\n    let { addable } = getUiOptions<T[], S, F>(uiSchema);\n    if (addable !== false) {\n      // if ui:options.addable was not explicitly set to false, we can add\n      // another item if we have not exceeded maxItems yet\n      if (schema.maxItems !== undefined) {\n        addable = formItems.length < schema.maxItems;\n      } else {\n        addable = true;\n      }\n    }\n    return addable;\n  }\n\n  /** Returns the default form information for an item based on the schema for that item. Deals with the possibility\n   * that the schema is fixed and allows additional items.\n   */\n  _getNewFormDataRow = (): T => {\n    const { schema, registry } = this.props;\n    const { schemaUtils } = registry;\n    let itemSchema = schema.items as S;\n    if (isFixedItems(schema) && allowAdditionalItems(schema)) {\n      itemSchema = schema.additionalItems as S;\n    }\n    // Cast this as a T to work around schema utils being for T[] caused by the FieldProps<T[], S, F> call on the class\n    return schemaUtils.getDefaultFormState(itemSchema) as unknown as T;\n  };\n\n  /** Callback handler for when the user clicks on the add or add at index buttons. Creates a new row of keyed form data\n   * either at the end of the list (when index is not specified) or inserted at the `index` when it is, adding it into\n   * the state, and then returning `onChange()` with the plain form data converted from the keyed data\n   *\n   * @param event - The event for the click\n   * @param [index] - The optional index at which to add the new data\n   */\n  _handleAddClick(event: MouseEvent, index?: number) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const { onChange } = this.props;\n    const { keyedFormData } = this.state;\n    const newKeyedFormDataRow: KeyedFormDataType<T> = {\n      key: generateRowId(),\n      item: this._getNewFormDataRow(),\n    };\n    const newKeyedFormData = [...keyedFormData];\n    if (index !== undefined) {\n      newKeyedFormData.splice(index, 0, newKeyedFormDataRow);\n    } else {\n      newKeyedFormData.push(newKeyedFormDataRow);\n    }\n    this.setState(\n      {\n        keyedFormData: newKeyedFormData,\n        updatedKeyedFormData: true,\n      },\n      () => onChange(keyedToPlainFormData(newKeyedFormData))\n    );\n  }\n\n  /** Callback handler for when the user clicks on the add button. Creates a new row of keyed form data at the end of\n   * the list, adding it into the state, and then returning `onChange()` with the plain form data converted from the\n   * keyed data\n   *\n   * @param event - The event for the click\n   */\n  onAddClick = (event: MouseEvent) => {\n    this._handleAddClick(event);\n  };\n\n  /** Callback handler for when the user clicks on the add button on an existing array element. Creates a new row of\n   * keyed form data inserted at the `index`, adding it into the state, and then returning `onChange()` with the plain\n   * form data converted from the keyed data\n   *\n   * @param index - The index at which the add button is clicked\n   */\n  onAddIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      this._handleAddClick(event, index);\n    };\n  };\n\n  /** Callback handler for when the user clicks on the remove button on an existing array element. Removes the row of\n   * keyed form data at the `index` in the state, and then returning `onChange()` with the plain form data converted\n   * from the keyed data\n   *\n   * @param index - The index at which the remove button is clicked\n   */\n  onDropIndexClick = (index: number) => {\n    return (event: MouseEvent) => {\n      if (event) {\n        event.preventDefault();\n      }\n      const { onChange, errorSchema } = this.props;\n      const { keyedFormData } = this.state;\n      // refs #195: revalidate to ensure properly reindexing errors\n      let newErrorSchema: ErrorSchema<T>;\n      if (errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i < index) {\n            set(newErrorSchema, [i], errorSchema[idx]);\n          } else if (i > index) {\n            set(newErrorSchema, [i - 1], errorSchema[idx]);\n          }\n        }\n      }\n      const newKeyedFormData = keyedFormData.filter((_, i) => i !== index);\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n          updatedKeyedFormData: true,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler for when the user clicks on one of the move item buttons on an existing array element. Moves the\n   * row of keyed form data at the `index` to the `newIndex` in the state, and then returning `onChange()` with the\n   * plain form data converted from the keyed data\n   *\n   * @param index - The index of the item to move\n   * @param newIndex - The index to where the item is to be moved\n   */\n  onReorderClick = (index: number, newIndex: number) => {\n    return (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (event) {\n        event.preventDefault();\n        event.currentTarget.blur();\n      }\n      const { onChange, errorSchema } = this.props;\n      let newErrorSchema: ErrorSchema<T>;\n      if (this.props.errorSchema) {\n        newErrorSchema = {};\n        for (const idx in errorSchema) {\n          const i = parseInt(idx);\n          if (i == index) {\n            set(newErrorSchema, [newIndex], errorSchema[index]);\n          } else if (i == newIndex) {\n            set(newErrorSchema, [index], errorSchema[newIndex]);\n          } else {\n            set(newErrorSchema, [idx], errorSchema[i]);\n          }\n        }\n      }\n\n      const { keyedFormData } = this.state;\n      function reOrderArray() {\n        // Copy item\n        const _newKeyedFormData = keyedFormData.slice();\n\n        // Moves item from index to newIndex\n        _newKeyedFormData.splice(index, 1);\n        _newKeyedFormData.splice(newIndex, 0, keyedFormData[index]);\n\n        return _newKeyedFormData;\n      }\n      const newKeyedFormData = reOrderArray();\n      this.setState(\n        {\n          keyedFormData: newKeyedFormData,\n        },\n        () =>\n          onChange(\n            keyedToPlainFormData(newKeyedFormData),\n            newErrorSchema as ErrorSchema<T[]>\n          )\n      );\n    };\n  };\n\n  /** Callback handler used to deal with changing the value of the data in the array at the `index`. Calls the\n   * `onChange` callback with the updated form data\n   *\n   * @param index - The index of the item being changed\n   */\n  onChangeForIndex = (index: number) => {\n    return (value: any, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const { formData, onChange, errorSchema } = this.props;\n      const arrayData = Array.isArray(formData) ? formData : [];\n      const newFormData = arrayData.map((item: T, i: number) => {\n        // We need to treat undefined items as nulls to have validation.\n        // See https://github.com/tdegrunt/jsonschema/issues/206\n        const jsonValue = typeof value === \"undefined\" ? null : value;\n        return index === i ? jsonValue : item;\n      });\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [index]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Callback handler used to change the value for a checkbox */\n  onSelectChange = (value: any) => {\n    const { onChange, idSchema } = this.props;\n    onChange(value, undefined, idSchema && idSchema.$id);\n  };\n\n  /** Renders the `ArrayField` depending on the specific needs of the schema and uischema elements\n   */\n  render() {\n    const { schema, uiSchema, idSchema, registry } = this.props;\n    const { schemaUtils } = registry;\n    if (!(ITEMS_KEY in schema)) {\n      const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n      const UnsupportedFieldTemplate = getTemplate<\n        \"UnsupportedFieldTemplate\",\n        T[],\n        S,\n        F\n      >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n      return (\n        <UnsupportedFieldTemplate\n          schema={schema}\n          idSchema={idSchema}\n          reason=\"Missing items definition\"\n          registry={registry}\n        />\n      );\n    }\n    if (schemaUtils.isMultiSelect(schema)) {\n      // If array has enum or uniqueItems set to true, call renderMultiSelect() to render the default multiselect widget or a custom widget, if specified.\n      return this.renderMultiSelect();\n    }\n    if (isCustomWidget<T[], S, F>(uiSchema)) {\n      return this.renderCustomWidget();\n    }\n    if (isFixedItems(schema)) {\n      return this.renderFixedArray();\n    }\n    if (schemaUtils.isFilesArray(schema, uiSchema)) {\n      return this.renderFiles();\n    }\n    return this.renderNormalArray();\n  }\n\n  /** Renders a normal array without any limitations of length\n   */\n  renderNormalArray() {\n    const {\n      schema,\n      uiSchema = {},\n      errorSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      idPrefix,\n      idSeparator = \"_\",\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    const title = schema.title === undefined ? name : schema.title;\n    const { schemaUtils, formContext } = registry;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const _schemaItems: S = isObject(schema.items)\n      ? (schema.items as S)\n      : ({} as S);\n    const itemsSchema: S = schemaUtils.retrieveSchema(_schemaItems);\n    const formData = keyedToPlainFormData(this.state.keyedFormData);\n    const canAdd = this.canAddItem(formData);\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const itemSchema = schemaUtils.retrieveSchema(_schemaItems, itemCast);\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canMoveUp: index > 0,\n          canMoveDown: index < formData.length - 1,\n          itemSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          itemData: itemCast,\n          itemUiSchema: uiSchema.items,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      className: `field field-array field-array-of-${itemsSchema.type}`,\n      disabled,\n      idSchema,\n      uiSchema,\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      schema,\n      title,\n      formContext,\n      formData,\n      rawErrors,\n      registry,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders an array using the custom widget provided by the user in the `uiSchema`\n   */\n  renderCustomWidget() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      hideError,\n      placeholder,\n      onBlur,\n      onFocus,\n      formData: items = [],\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, formContext } = registry;\n    const title = schema.title || name;\n\n    const { widget, ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={options}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        hideError={hideError}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array as a set of checkboxes\n   */\n  renderMultiSelect() {\n    const {\n      schema,\n      idSchema,\n      uiSchema,\n      formData: items = [],\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      placeholder,\n      onBlur,\n      onFocus,\n      registry,\n      rawErrors,\n      name,\n    } = this.props;\n    const { widgets, schemaUtils, formContext } = registry;\n    const itemsSchema = schemaUtils.retrieveSchema(schema.items as S, items);\n    const title = schema.title || name;\n    const enumOptions = optionsList(itemsSchema);\n    const { widget = \"select\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        id={idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        options={{ ...options, enumOptions }}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        label={title}\n        placeholder={placeholder}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n      />\n    );\n  }\n\n  /** Renders an array of files using the `FileWidget`\n   */\n  renderFiles() {\n    const {\n      schema,\n      uiSchema,\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      onBlur,\n      onFocus,\n      registry,\n      formData: items = [],\n      rawErrors,\n    } = this.props;\n    const title = schema.title || name;\n    const { widgets, formContext } = registry;\n    const { widget = \"files\", ...options } = getUiOptions<T[], S, F>(uiSchema);\n    const Widget = getWidget<T[], S, F>(schema, widget, widgets);\n    return (\n      <Widget\n        options={options}\n        id={idSchema.$id}\n        multiple\n        onChange={this.onSelectChange}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        schema={schema}\n        uiSchema={uiSchema}\n        title={title}\n        value={items}\n        disabled={disabled}\n        readonly={readonly}\n        required={required}\n        registry={registry}\n        formContext={formContext}\n        autofocus={autofocus}\n        rawErrors={rawErrors}\n        label=\"\"\n      />\n    );\n  }\n\n  /** Renders an array that has a maximum limit of items\n   */\n  renderFixedArray() {\n    const {\n      schema,\n      uiSchema = {},\n      formData = [],\n      errorSchema,\n      idPrefix,\n      idSeparator = \"_\",\n      idSchema,\n      name,\n      disabled = false,\n      readonly = false,\n      autofocus = false,\n      required = false,\n      registry,\n      onBlur,\n      onFocus,\n      rawErrors,\n    } = this.props;\n    const { keyedFormData } = this.state;\n    let { formData: items = [] } = this.props;\n    const title = schema.title || name;\n    const uiOptions = getUiOptions<T[], S, F>(uiSchema);\n    const { schemaUtils, formContext } = registry;\n    const _schemaItems: S[] = isObject(schema.items)\n      ? (schema.items as S[])\n      : ([] as S[]);\n    const itemSchemas = _schemaItems.map((item: S, index: number) =>\n      schemaUtils.retrieveSchema(item, formData[index] as unknown as T[])\n    );\n    const additionalSchema = isObject(schema.additionalItems)\n      ? schemaUtils.retrieveSchema(schema.additionalItems as S, formData)\n      : null;\n\n    if (!items || items.length < itemSchemas.length) {\n      // to make sure at least all fixed items are generated\n      items = items || [];\n      items = items.concat(new Array(itemSchemas.length - items.length));\n    }\n\n    // These are the props passed into the render function\n    const canAdd = this.canAddItem(items) && !!additionalSchema;\n    const arrayProps: ArrayFieldTemplateProps<T[], S, F> = {\n      canAdd,\n      className: \"field field-array field-array-fixed-items\",\n      disabled,\n      idSchema,\n      formData,\n      items: keyedFormData.map((keyedItem, index) => {\n        const { key, item } = keyedItem;\n        // While we are actually dealing with a single item of type T, the types require a T[], so cast\n        const itemCast = item as unknown as T[];\n        const additional = index >= itemSchemas.length;\n        const itemSchema =\n          additional && isObject(schema.additionalItems)\n            ? schemaUtils.retrieveSchema(schema.additionalItems as S, itemCast)\n            : itemSchemas[index];\n        const itemIdPrefix = idSchema.$id + idSeparator + index;\n        const itemIdSchema = schemaUtils.toIdSchema(\n          itemSchema,\n          itemIdPrefix,\n          itemCast,\n          idPrefix,\n          idSeparator\n        );\n        const itemUiSchema = additional\n          ? uiSchema.additionalItems || {}\n          : Array.isArray(uiSchema.items)\n          ? uiSchema.items[index]\n          : uiSchema.items || {};\n        const itemErrorSchema = errorSchema\n          ? (errorSchema[index] as ErrorSchema<T[]>)\n          : undefined;\n\n        return this.renderArrayFieldItem({\n          key,\n          index,\n          name: name && `${name}-${index}`,\n          canAdd,\n          canRemove: additional,\n          canMoveUp: index >= itemSchemas.length + 1,\n          canMoveDown: additional && index < items.length - 1,\n          itemSchema,\n          itemData: itemCast,\n          itemUiSchema,\n          itemIdSchema,\n          itemErrorSchema,\n          autofocus: autofocus && index === 0,\n          onBlur,\n          onFocus,\n          rawErrors,\n          totalItems: keyedFormData.length,\n        });\n      }),\n      onAddClick: this.onAddClick,\n      readonly,\n      required,\n      registry,\n      schema,\n      uiSchema,\n      title,\n      formContext,\n      rawErrors,\n    };\n\n    const Template = getTemplate<\"ArrayFieldTemplate\", T[], S, F>(\n      \"ArrayFieldTemplate\",\n      registry,\n      uiOptions\n    );\n    return <Template {...arrayProps} />;\n  }\n\n  /** Renders the individual array item using a `SchemaField` along with the additional properties required to be send\n   * back to the `ArrayFieldItemTemplate`.\n   *\n   * @param props - The props for the individual array item to be rendered\n   */\n  renderArrayFieldItem(props: {\n    key: string;\n    index: number;\n    name: string;\n    canAdd: boolean;\n    canRemove?: boolean;\n    canMoveUp?: boolean;\n    canMoveDown?: boolean;\n    itemSchema: S;\n    itemData: T[];\n    itemUiSchema: UiSchema<T[], S, F>;\n    itemIdSchema: IdSchema<T[]>;\n    itemErrorSchema?: ErrorSchema<T[]>;\n    autofocus?: boolean;\n    onBlur: FieldProps<T[], S, F>[\"onBlur\"];\n    onFocus: FieldProps<T[], S, F>[\"onFocus\"];\n    rawErrors?: string[];\n    totalItems: number;\n  }) {\n    const {\n      key,\n      index,\n      name,\n      canAdd,\n      canRemove = true,\n      canMoveUp = true,\n      canMoveDown = true,\n      itemSchema,\n      itemData,\n      itemUiSchema,\n      itemIdSchema,\n      itemErrorSchema,\n      autofocus,\n      onBlur,\n      onFocus,\n      rawErrors,\n      totalItems,\n    } = props;\n    const {\n      disabled,\n      hideError,\n      idPrefix,\n      idSeparator,\n      readonly,\n      uiSchema,\n      registry,\n      formContext,\n    } = this.props;\n    const {\n      fields: { ArraySchemaField, SchemaField },\n    } = registry;\n    const ItemSchemaField = ArraySchemaField || SchemaField;\n    const { orderable = true, removable = true } = getUiOptions<T[], S, F>(\n      uiSchema\n    );\n    const has: { [key: string]: boolean } = {\n      moveUp: orderable && canMoveUp,\n      moveDown: orderable && canMoveDown,\n      remove: removable && canRemove,\n      toolbar: false,\n    };\n    has.toolbar = Object.keys(has).some((key: keyof typeof has) => has[key]);\n\n    return {\n      children: (\n        <ItemSchemaField\n          name={name}\n          index={index}\n          schema={itemSchema}\n          uiSchema={itemUiSchema}\n          formData={itemData}\n          formContext={formContext}\n          errorSchema={itemErrorSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          idSchema={itemIdSchema}\n          required={this.isItemRequired(itemSchema)}\n          onChange={this.onChangeForIndex(index)}\n          onBlur={onBlur}\n          onFocus={onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n          hideError={hideError}\n          autofocus={autofocus}\n          rawErrors={rawErrors}\n        />\n      ),\n      className: \"array-item\",\n      disabled,\n      canAdd,\n      hasToolbar: has.toolbar,\n      hasMoveUp: has.moveUp,\n      hasMoveDown: has.moveDown,\n      hasRemove: has.remove,\n      index,\n      totalItems,\n      key,\n      onAddIndexClick: this.onAddIndexClick,\n      onDropIndexClick: this.onDropIndexClick,\n      onReorderClick: this.onReorderClick,\n      readonly,\n      registry,\n      schema: itemSchema,\n      uiSchema: itemUiSchema,\n    };\n  }\n}\n\n/** `ArrayField` is `React.ComponentType<FieldProps<T[], S, F>>` (necessarily) but the `registry` requires things to be a\n * `Field` which is defined as `React.ComponentType<FieldProps<T, S, F>>`, so cast it to make `registry` happy.\n */\nexport default ArrayField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  FieldProps,\n  FormContextType,\n  EnumOptionsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\n\n/** The `BooleanField` component is used to render a field in the schema is boolean. It constructs `enumOptions` for the\n * two boolean values based on the various alternatives in the schema.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction BooleanField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    registry,\n    required,\n    disabled,\n    readonly,\n    autofocus,\n    onChange,\n    onFocus,\n    onBlur,\n    rawErrors,\n  } = props;\n  const { title } = schema;\n  const { widgets, formContext } = registry;\n  const { widget = \"checkbox\", ...options } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget(schema, widget, widgets);\n\n  let enumOptions: EnumOptionsType<S>[] | undefined;\n\n  if (Array.isArray(schema.oneOf)) {\n    enumOptions = optionsList<S>({\n      oneOf: schema.oneOf\n        .map((option) => {\n          if (isObject(option)) {\n            return {\n              ...option,\n              title: option.title || (option.const === true ? \"Yes\" : \"No\"),\n            };\n          }\n          return undefined;\n        })\n        .filter((o: any) => o) as S[], // cast away the error that typescript can't grok is fixed\n    } as unknown as S);\n  } else {\n    // We deprecated enumNames in v5. It's intentionally omitted from RSJFSchema type, so we need to cast here.\n    const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n    const enums = schema.enum ?? [true, false];\n    if (\n      !schemaWithEnumNames.enumNames &&\n      enums.length === 2 &&\n      enums.every((v: any) => typeof v === \"boolean\")\n    ) {\n      enumOptions = [\n        {\n          value: enums[0],\n          label: enums[0] ? \"Yes\" : \"No\",\n        },\n        {\n          value: enums[1],\n          label: enums[1] ? \"Yes\" : \"No\",\n        },\n      ];\n    } else {\n      enumOptions = optionsList<S>({\n        enum: enums,\n        // NOTE: enumNames is deprecated, but still supported for now.\n        enumNames: schemaWithEnumNames.enumNames,\n      } as unknown as S);\n    }\n  }\n\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      onChange={onChange}\n      onFocus={onFocus}\n      onBlur={onBlur}\n      label={title === undefined ? name : title}\n      value={formData}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      registry={registry}\n      formContext={formContext}\n      autofocus={autofocus}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default BooleanField;\n","import React, { Component } from \"react\";\nimport get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\nimport omit from \"lodash/omit\";\nimport {\n  getUiOptions,\n  getWidget,\n  deepEquals,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ERRORS_KEY,\n} from \"@rjsf/utils\";\n\n/** Type used for the state of the `AnyOfField` component */\ntype AnyOfFieldState<S extends StrictRJSFSchema = RJSFSchema> = {\n  /** The currently selected option */\n  selectedOption: number;\n  /* The option schemas after retrieving all $refs */\n  retrievedOptions: S[];\n};\n\n/** The prefix used when a oneOf option does not have a title\n */\nconst UNKNOWN_OPTION_PREFIX = \"Option\";\n\n/** The `AnyOfField` component is used to render a field in the schema that is an `anyOf`, `allOf` or `oneOf`. It tracks\n * the currently selected option and cleans up any irrelevant data in `formData`.\n *\n * @param props - The `FieldProps` for this template\n */\nclass AnyOfField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, AnyOfFieldState<S>> {\n  /** Constructs an `AnyOfField` with the given `props` to initialize the initially selected option in state\n   *\n   * @param props - The `FieldProps` for this template\n   */\n  constructor(props: FieldProps<T, S, F>) {\n    super(props);\n\n    const {\n      formData,\n      options,\n      registry: { schemaUtils },\n    } = this.props;\n    // cache the retrieved options in state in case they have $refs to save doing it later\n    const retrievedOptions = options.map((opt: S) =>\n      schemaUtils.retrieveSchema(opt, formData)\n    );\n\n    this.state = {\n      retrievedOptions,\n      selectedOption: this.getMatchingOption(0, formData, retrievedOptions),\n    };\n  }\n\n  /** React lifecycle method that is called when the props and/or state for this component is updated. It recomputes the\n   * currently selected option based on the overall `formData`\n   *\n   * @param prevProps - The previous `FieldProps` for this template\n   * @param prevState - The previous `AnyOfFieldState` for this template\n   */\n  componentDidUpdate(\n    prevProps: Readonly<FieldProps<T, S, F>>,\n    prevState: Readonly<AnyOfFieldState>\n  ) {\n    const { formData, options, idSchema } = this.props;\n    const { selectedOption } = this.state;\n    let newState = this.state;\n    if (!deepEquals(prevProps.options, options)) {\n      const {\n        registry: { schemaUtils },\n      } = this.props;\n      // re-cache the retrieved options in state in case they have $refs to save doing it later\n      const retrievedOptions = options.map((opt: S) =>\n        schemaUtils.retrieveSchema(opt, formData)\n      );\n      newState = { selectedOption, retrievedOptions };\n    }\n    if (\n      !deepEquals(formData, prevProps.formData) &&\n      idSchema.$id === prevProps.idSchema.$id\n    ) {\n      const { retrievedOptions } = newState;\n      const matchingOption = this.getMatchingOption(\n        selectedOption,\n        formData,\n        retrievedOptions\n      );\n\n      if (prevState && matchingOption !== selectedOption) {\n        newState = { selectedOption: matchingOption, retrievedOptions };\n      }\n    }\n    if (newState !== this.state) {\n      this.setState(newState);\n    }\n  }\n\n  /** Determines the best matching option for the given `formData` and `options`.\n   *\n   * @param formData - The new formData\n   * @param options - The list of options to choose from\n   * @return - The index of the `option` that best matches the `formData`\n   */\n  getMatchingOption(\n    selectedOption: number,\n    formData: T | undefined,\n    options: S[]\n  ) {\n    const { schemaUtils } = this.props.registry;\n\n    const option = schemaUtils.getClosestMatchingOption(\n      formData,\n      options,\n      selectedOption\n    );\n    if (option > 0) {\n      return option;\n    }\n    // If the form data matches none of the options, use the currently selected\n    // option, assuming it's available; otherwise use the first option\n    return selectedOption || 0;\n  }\n\n  /** Callback handler to remember what the currently selected option is. In addition to that the `formData` is updated\n   * to remove properties that are not part of the newly selected option schema, and then the updated data is passed to\n   * the `onChange` handler.\n   *\n   * @param option - The new option value being selected\n   */\n  onOptionChange = (option?: string) => {\n    const { selectedOption, retrievedOptions } = this.state;\n    const { formData, onChange, registry } = this.props;\n    const { schemaUtils } = registry;\n    const intOption = option !== undefined ? parseInt(option, 10) : -1;\n    if (intOption === selectedOption) {\n      return;\n    }\n    const newOption = intOption >= 0 ? retrievedOptions[intOption] : undefined;\n    const oldOption =\n      selectedOption >= 0 ? retrievedOptions[selectedOption] : undefined;\n\n    let newFormData = schemaUtils.sanitizeDataForNewSchema(\n      newOption,\n      oldOption,\n      formData\n    );\n    if (newFormData && newOption) {\n      // Call getDefaultFormState to make sure defaults are populated on change. Pass \"excludeObjectChildren\"\n      // so that only the root objects themselves are created without adding undefined children properties\n      newFormData = schemaUtils.getDefaultFormState(\n        newOption,\n        newFormData,\n        \"excludeObjectChildren\"\n      ) as T;\n    }\n    onChange(newFormData, undefined, this.getFieldId());\n\n    this.setState({ selectedOption: intOption });\n  };\n\n  getFieldId() {\n    const { idSchema, schema } = this.props;\n    return `${idSchema.$id}${\n      schema.oneOf ? \"__oneof_select\" : \"__anyof_select\"\n    }`;\n  }\n\n  /** Renders the `AnyOfField` selector along with a `SchemaField` for the value of the `formData`\n   */\n  render() {\n    const {\n      baseType,\n      disabled = false,\n      errorSchema = {},\n      formContext,\n      onBlur,\n      onFocus,\n      registry,\n      schema,\n      uiSchema,\n    } = this.props;\n\n    const { widgets, fields } = registry;\n    const { SchemaField: _SchemaField } = fields;\n    const { selectedOption, retrievedOptions } = this.state;\n    const {\n      widget = \"select\",\n      placeholder,\n      autofocus,\n      autocomplete,\n      title = schema.title,\n      ...uiOptions\n    } = getUiOptions<T, S, F>(uiSchema);\n    const Widget = getWidget<T, S, F>({ type: \"number\" }, widget, widgets);\n    const rawErrors = get(errorSchema, ERRORS_KEY, []);\n    const fieldErrorSchema = omit(errorSchema, [ERRORS_KEY]);\n\n    const option =\n      selectedOption >= 0 ? retrievedOptions[selectedOption] || null : null;\n    let optionSchema: S;\n\n    if (option) {\n      // If the subschema doesn't declare a type, infer the type from the\n      // parent schema\n      optionSchema = option.type\n        ? option\n        : Object.assign({}, option, { type: baseType });\n    }\n\n    const optionLabel = title\n      ? `${title} ${UNKNOWN_OPTION_PREFIX.toLowerCase()}`\n      : UNKNOWN_OPTION_PREFIX;\n    const enumOptions = retrievedOptions.map(\n      (opt: { title?: string }, index: number) => ({\n        label: opt.title || `${optionLabel} ${index + 1}`,\n        value: index,\n      })\n    );\n\n    return (\n      <div className=\"panel panel-default panel-body\">\n        <div className=\"form-group\">\n          <Widget\n            id={this.getFieldId()}\n            schema={{ type: \"number\", default: 0 } as S}\n            onChange={this.onOptionChange}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            disabled={disabled || isEmpty(enumOptions)}\n            multiple={false}\n            rawErrors={rawErrors}\n            errorSchema={fieldErrorSchema}\n            value={selectedOption >= 0 ? selectedOption : undefined}\n            options={{ enumOptions, ...uiOptions }}\n            registry={registry}\n            formContext={formContext}\n            placeholder={placeholder}\n            autocomplete={autocomplete}\n            autofocus={autofocus}\n            label=\"\"\n          />\n        </div>\n        {option !== null && (\n          <_SchemaField {...this.props} schema={optionSchema!} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AnyOfField;\n","import React, { useState, useCallback } from \"react\";\nimport {\n  asNumber,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n// Matches a string that ends in a . character, optionally followed by a sequence of\n// digits followed by any number of 0 characters up until the end of the line.\n// Ensuring that there is at least one prefixed character is important so that\n// you don't incorrectly match against \"0\".\nconst trailingCharMatcherWithPrefix = /\\.([0-9]*0)*$/;\n\n// This is used for trimming the trailing 0 and . characters without affecting\n// the rest of the string. Its possible to use one RegEx with groups for this\n// functionality, but it is fairly complex compared to simply defining two\n// different matchers.\nconst trailingCharMatcher = /[0.]0*$/;\n\n/**\n * The NumberField class has some special handling for dealing with trailing\n * decimal points and/or zeroes. This logic is designed to allow trailing values\n * to be visible in the input element, but not be represented in the\n * corresponding form data.\n *\n * The algorithm is as follows:\n *\n * 1. When the input value changes the value is cached in the component state\n *\n * 2. The value is then normalized, removing trailing decimal points and zeros,\n *    then passed to the \"onChange\" callback\n *\n * 3. When the component is rendered, the formData value is checked against the\n *    value cached in the state. If it matches the cached value, the cached\n *    value is passed to the input instead of the formData value\n */\nfunction NumberField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { registry, onChange, formData, value: initialValue } = props;\n  const [lastValue, setLastValue] = useState(initialValue);\n  const { StringField } = registry.fields;\n\n  let value = formData;\n\n  /** Handle the change from the `StringField` to properly convert to a number\n   *\n   * @param value - The current value for the change occurring\n   */\n  const handleChange = useCallback(\n    (value: FieldProps<T, S, F>[\"value\"]) => {\n      // Cache the original value in component state\n      setLastValue(value);\n\n      // Normalize decimals that don't start with a zero character in advance so\n      // that the rest of the normalization logic is simpler\n      if (`${value}`.charAt(0) === \".\") {\n        value = `0${value}`;\n      }\n\n      // Check that the value is a string (this can happen if the widget used is a\n      // <select>, due to an enum declaration etc) then, if the value ends in a\n      // trailing decimal point or multiple zeroes, strip the trailing values\n      const processed =\n        typeof value === \"string\" && value.match(trailingCharMatcherWithPrefix)\n          ? asNumber(value.replace(trailingCharMatcher, \"\"))\n          : asNumber(value);\n\n      onChange(processed as unknown as T);\n    },\n    [onChange]\n  );\n\n  if (typeof lastValue === \"string\" && typeof value === \"number\") {\n    // Construct a regular expression that checks for a string that consists\n    // of the formData value suffixed with zero or one '.' characters and zero\n    // or more '0' characters\n    const re = new RegExp(`${value}`.replace(\".\", \"\\\\.\") + \"\\\\.?0*$\");\n\n    // If the cached \"lastValue\" is a match, use that instead of the formData\n    // value to prevent the input value from changing in the UI\n    if (lastValue.match(re)) {\n      value = lastValue as unknown as T;\n    }\n  }\n\n  return <StringField {...props} formData={value} onChange={handleChange} />;\n}\n\nexport default NumberField;\n","import React, { Component } from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  orderProperties,\n  ErrorSchema,\n  FieldProps,\n  FormContextType,\n  GenericObjectType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ADDITIONAL_PROPERTY_FLAG,\n  PROPERTIES_KEY,\n  REF_KEY,\n  ANY_OF_KEY,\n  ONE_OF_KEY,\n} from \"@rjsf/utils\";\nimport get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport set from \"lodash/set\";\nimport unset from \"lodash/unset\";\n\n/** Type used for the state of the `ObjectField` component */\ntype ObjectFieldState = {\n  /** Flag indicating whether an additional property key was modified */\n  wasPropertyKeyModified: boolean;\n  /** The set of additional properties */\n  additionalProperties: object;\n};\n\n/** The `ObjectField` component is used to render a field in the schema that is of type `object`. It tracks whether an\n * additional property key was modified and what it was modified to\n *\n * @param props - The `FieldProps` for this template\n */\nclass ObjectField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FieldProps<T, S, F>, ObjectFieldState> {\n  /** Set up the initial state */\n  state = {\n    wasPropertyKeyModified: false,\n    additionalProperties: {},\n  };\n\n  /** Returns a flag indicating whether the `name` field is required in the object schema\n   *\n   * @param name - The name of the field to check for required-ness\n   * @returns - True if the field `name` is required, false otherwise\n   */\n  isRequired(name: string) {\n    const { schema } = this.props;\n    return (\n      Array.isArray(schema.required) && schema.required.indexOf(name) !== -1\n    );\n  }\n\n  /** Returns the `onPropertyChange` handler for the `name` field. Handles the special case where a user is attempting\n   * to clear the data for a field added as an additional property. Calls the `onChange()` handler with the updated\n   * formData.\n   *\n   * @param name - The name of the property\n   * @param addedByAdditionalProperties - Flag indicating whether this property is an additional property\n   * @returns - The onPropertyChange callback for the `name` property\n   */\n  onPropertyChange = (name: string, addedByAdditionalProperties = false) => {\n    return (\n      value: T | undefined,\n      newErrorSchema?: ErrorSchema<T>,\n      id?: string\n    ) => {\n      const { formData, onChange, errorSchema } = this.props;\n      if (value === undefined && addedByAdditionalProperties) {\n        // Don't set value = undefined for fields added by\n        // additionalProperties. Doing so removes them from the\n        // formData, which causes them to completely disappear\n        // (including the input field for the property name). Unlike\n        // fields which are \"mandated\" by the schema, these fields can\n        // be set to undefined by clicking a \"delete field\" button, so\n        // set empty values to the empty string.\n        value = \"\" as unknown as T;\n      }\n      const newFormData = { ...formData, [name]: value } as unknown as T;\n      onChange(\n        newFormData,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [name]: newErrorSchema,\n          },\n        id\n      );\n    };\n  };\n\n  /** Returns a callback to handle the onDropPropertyClick event for the given `key` which removes the old `key` data\n   * and calls the `onChange` callback with it\n   *\n   * @param key - The key for which the drop callback is desired\n   * @returns - The drop property click callback\n   */\n  onDropPropertyClick = (key: string) => {\n    return (event: DragEvent) => {\n      event.preventDefault();\n      const { onChange, formData } = this.props;\n      const copiedFormData = { ...formData } as T;\n      unset(copiedFormData, key);\n      onChange(copiedFormData);\n    };\n  };\n\n  /** Computes the next available key name from the `preferredKey`, indexing through the already existing keys until one\n   * that is already not assigned is found.\n   *\n   * @param preferredKey - The preferred name of a new key\n   * @param [formData] - The form data in which to check if the desired key already exists\n   * @returns - The name of the next available key from `preferredKey`\n   */\n  getAvailableKey = (preferredKey: string, formData?: T) => {\n    const { uiSchema } = this.props;\n    const { duplicateKeySuffixSeparator = \"-\" } = getUiOptions<T, S, F>(\n      uiSchema\n    );\n\n    let index = 0;\n    let newKey = preferredKey;\n    while (has(formData, newKey)) {\n      newKey = `${preferredKey}${duplicateKeySuffixSeparator}${++index}`;\n    }\n    return newKey;\n  };\n\n  /** Returns a callback function that deals with the rename of a key for an additional property for a schema. That\n   * callback will attempt to rename the key and move the existing data to that key, calling `onChange` when it does.\n   *\n   * @param oldValue - The old value of a field\n   * @returns - The key change callback function\n   */\n  onKeyChange = (oldValue: any) => {\n    return (value: any, newErrorSchema: ErrorSchema<T>) => {\n      if (oldValue === value) {\n        return;\n      }\n      const { formData, onChange, errorSchema } = this.props;\n\n      value = this.getAvailableKey(value, formData);\n      const newFormData: GenericObjectType = {\n        ...(formData as GenericObjectType),\n      };\n      const newKeys: GenericObjectType = { [oldValue]: value };\n      const keyValues = Object.keys(newFormData).map((key) => {\n        const newKey = newKeys[key] || key;\n        return { [newKey]: newFormData[key] };\n      });\n      const renamedObj = Object.assign({}, ...keyValues);\n\n      this.setState({ wasPropertyKeyModified: true });\n\n      onChange(\n        renamedObj,\n        errorSchema &&\n          errorSchema && {\n            ...errorSchema,\n            [value]: newErrorSchema,\n          }\n      );\n    };\n  };\n\n  /** Returns a default value to be used for a new additional schema property of the given `type`\n   *\n   * @param type - The type of the new additional schema property\n   */\n  getDefaultValue(type?: RJSFSchema[\"type\"]) {\n    switch (type) {\n      case \"string\":\n        return \"New Value\";\n      case \"array\":\n        return [];\n      case \"boolean\":\n        return false;\n      case \"null\":\n        return null;\n      case \"number\":\n        return 0;\n      case \"object\":\n        return {};\n      default:\n        // We don't have a datatype for some reason (perhaps additionalProperties was true)\n        return \"New Value\";\n    }\n  }\n\n  /** Handles the adding of a new additional property on the given `schema`. Calls the `onChange` callback once the new\n   * default data for that field has been added to the formData.\n   *\n   * @param schema - The schema element to which the new property is being added\n   */\n  handleAddClick = (schema: S) => () => {\n    if (!schema.additionalProperties) {\n      return;\n    }\n    const { formData, onChange, registry } = this.props;\n    const newFormData = { ...formData } as T;\n\n    let type: RJSFSchema[\"type\"] = undefined;\n    if (isObject(schema.additionalProperties)) {\n      type = schema.additionalProperties.type;\n      let apSchema = schema.additionalProperties;\n      if (REF_KEY in apSchema) {\n        const { schemaUtils } = registry;\n        apSchema = schemaUtils.retrieveSchema(\n          { $ref: apSchema[REF_KEY] } as S,\n          formData\n        );\n        type = apSchema.type;\n      }\n      if (!type && (ANY_OF_KEY in apSchema || ONE_OF_KEY in apSchema)) {\n        type = \"object\";\n      }\n    }\n\n    const newKey = this.getAvailableKey(\"newKey\", newFormData);\n    // Cast this to make the `set` work properly\n    set(newFormData as GenericObjectType, newKey, this.getDefaultValue(type));\n\n    onChange(newFormData);\n  };\n\n  /** Renders the `ObjectField` from the given props\n   */\n  render() {\n    const {\n      schema: rawSchema,\n      uiSchema = {},\n      formData,\n      errorSchema,\n      idSchema,\n      name,\n      required = false,\n      disabled = false,\n      readonly = false,\n      hideError,\n      idPrefix,\n      idSeparator,\n      onBlur,\n      onFocus,\n      registry,\n    } = this.props;\n\n    const { fields, formContext, schemaUtils } = registry;\n    const { SchemaField } = fields;\n    const schema: S = schemaUtils.retrieveSchema(rawSchema, formData);\n    const uiOptions = getUiOptions<T, S, F>(uiSchema);\n    const { properties: schemaProperties = {} } = schema;\n\n    const title = schema.title === undefined ? name : schema.title;\n    const description = uiOptions.description || schema.description;\n    let orderedProperties: string[];\n    try {\n      const properties = Object.keys(schemaProperties);\n      orderedProperties = orderProperties(properties, uiOptions.order);\n    } catch (err) {\n      return (\n        <div>\n          <p className=\"config-error\" style={{ color: \"red\" }}>\n            Invalid {name || \"root\"} object field configuration:\n            <em>{(err as Error).message}</em>.\n          </p>\n          <pre>{JSON.stringify(schema)}</pre>\n        </div>\n      );\n    }\n\n    const Template = getTemplate<\"ObjectFieldTemplate\", T, S, F>(\n      \"ObjectFieldTemplate\",\n      registry,\n      uiOptions\n    );\n\n    const templateProps = {\n      title: uiOptions.title || title,\n      description,\n      properties: orderedProperties.map((name) => {\n        const addedByAdditionalProperties = has(schema, [\n          PROPERTIES_KEY,\n          name,\n          ADDITIONAL_PROPERTY_FLAG,\n        ]);\n        const fieldUiSchema = addedByAdditionalProperties\n          ? uiSchema.additionalProperties\n          : uiSchema[name];\n        const hidden = getUiOptions<T, S, F>(fieldUiSchema).widget === \"hidden\";\n        const fieldIdSchema: IdSchema<T> = get(idSchema, [name], {});\n\n        return {\n          content: (\n            <SchemaField\n              key={name}\n              name={name}\n              required={this.isRequired(name)}\n              schema={get(schema, [PROPERTIES_KEY, name], {})}\n              uiSchema={fieldUiSchema}\n              errorSchema={get(errorSchema, name)}\n              idSchema={fieldIdSchema}\n              idPrefix={idPrefix}\n              idSeparator={idSeparator}\n              formData={get(formData, name)}\n              formContext={formContext}\n              wasPropertyKeyModified={this.state.wasPropertyKeyModified}\n              onKeyChange={this.onKeyChange(name)}\n              onChange={this.onPropertyChange(\n                name,\n                addedByAdditionalProperties\n              )}\n              onBlur={onBlur}\n              onFocus={onFocus}\n              registry={registry}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              onDropPropertyClick={this.onDropPropertyClick}\n            />\n          ),\n          name,\n          readonly,\n          disabled,\n          required,\n          hidden,\n        };\n      }),\n      readonly,\n      disabled,\n      required,\n      idSchema,\n      uiSchema,\n      schema,\n      formData,\n      formContext,\n      registry,\n    };\n    return <Template {...templateProps} onAddClick={this.handleAddClick} />;\n  }\n}\n\nexport default ObjectField;\n","import React from \"react\";\nimport {\n  mergeObjects,\n  deepEquals,\n  descriptionId,\n  getUiOptions,\n  getSchemaType,\n  getTemplate,\n  ErrorSchema,\n  FieldProps,\n  FieldTemplateProps,\n  FormContextType,\n  IdSchema,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  ID_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  UI_OPTIONS_KEY,\n} from \"@rjsf/utils\";\nimport isObject from \"lodash/isObject\";\nimport omit from \"lodash/omit\";\n\n/** The map of component type to FieldName */\nconst COMPONENT_TYPES: { [key: string]: string } = {\n  array: \"ArrayField\",\n  boolean: \"BooleanField\",\n  integer: \"NumberField\",\n  number: \"NumberField\",\n  object: \"ObjectField\",\n  string: \"StringField\",\n  null: \"NullField\",\n};\n\n/** Computes and returns which `Field` implementation to return in order to render the field represented by the\n * `schema`. The `uiOptions` are used to alter what potential `Field` implementation is actually returned. If no\n * appropriate `Field` implementation can be found then a wrapper around `UnsupportedFieldTemplate` is used.\n *\n * @param schema - The schema from which to obtain the type\n * @param uiOptions - The UI Options that may affect the component decision\n * @param idSchema - The id that is passed to the `UnsupportedFieldTemplate`\n * @param registry - The registry from which fields and templates are obtained\n * @returns - The `Field` component that is used to render the actual field data\n */\nfunction getFieldComponent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: S,\n  uiOptions: UIOptionsType<T, S, F>,\n  idSchema: IdSchema<T>,\n  registry: Registry<T, S, F>\n) {\n  const field = uiOptions.field;\n  const { fields } = registry;\n  if (typeof field === \"function\") {\n    return field;\n  }\n  if (typeof field === \"string\" && field in fields) {\n    return fields[field];\n  }\n\n  const schemaType = getSchemaType(schema);\n  const type: string = Array.isArray(schemaType)\n    ? schemaType[0]\n    : schemaType || \"\";\n  const componentName = COMPONENT_TYPES[type];\n\n  // If the type is not defined and the schema uses 'anyOf' or 'oneOf', don't\n  // render a field and let the MultiSchemaField component handle the form display\n  if (!componentName && (schema.anyOf || schema.oneOf)) {\n    return () => null;\n  }\n\n  return componentName in fields\n    ? fields[componentName]\n    : () => {\n        const UnsupportedFieldTemplate = getTemplate<\n          \"UnsupportedFieldTemplate\",\n          T,\n          S,\n          F\n        >(\"UnsupportedFieldTemplate\", registry, uiOptions);\n\n        return (\n          <UnsupportedFieldTemplate\n            schema={schema}\n            idSchema={idSchema}\n            reason={`Unknown field type ${schema.type}`}\n            registry={registry}\n          />\n        );\n      };\n}\n\n/** The `SchemaFieldRender` component is the work-horse of react-jsonschema-form, determining what kind of real field to\n * render based on the `schema`, `uiSchema` and all the other props. It also deals with rendering the `anyOf` and\n * `oneOf` fields.\n *\n * @param props - The `FieldProps` for this component\n */\nfunction SchemaFieldRender<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema: _schema,\n    idSchema: _idSchema,\n    uiSchema,\n    formData,\n    errorSchema,\n    idPrefix,\n    idSeparator,\n    name,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    registry,\n    wasPropertyKeyModified = false,\n  } = props;\n  const { formContext, schemaUtils } = registry;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const FieldTemplate = getTemplate<\"FieldTemplate\", T, S, F>(\n    \"FieldTemplate\",\n    registry,\n    uiOptions\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, uiOptions);\n  const FieldHelpTemplate = getTemplate<\"FieldHelpTemplate\", T, S, F>(\n    \"FieldHelpTemplate\",\n    registry,\n    uiOptions\n  );\n  const FieldErrorTemplate = getTemplate<\"FieldErrorTemplate\", T, S, F>(\n    \"FieldErrorTemplate\",\n    registry,\n    uiOptions\n  );\n  const schema = schemaUtils.retrieveSchema(_schema, formData);\n  const fieldId = _idSchema[ID_KEY];\n  const idSchema = mergeObjects(\n    schemaUtils.toIdSchema(schema, fieldId, formData, idPrefix, idSeparator),\n    _idSchema\n  ) as IdSchema<T>;\n\n  /** Intermediary `onChange` handler for field components that will inject the `id` of the current field into the\n   * `onChange` chain if it is not already being provided from a deeper level in the hierarchy\n   */\n  const handleFieldComponentChange = React.useCallback(\n    (formData: T | undefined, newErrorSchema?: ErrorSchema<T>, id?: string) => {\n      const theId = id || fieldId;\n      return onChange(formData, newErrorSchema, theId);\n    },\n    [fieldId, onChange]\n  );\n\n  const FieldComponent = getFieldComponent<T, S, F>(\n    schema,\n    uiOptions,\n    idSchema,\n    registry\n  );\n  const disabled = Boolean(props.disabled || uiOptions.disabled);\n  const readonly = Boolean(\n    props.readonly ||\n      uiOptions.readonly ||\n      props.schema.readOnly ||\n      schema.readOnly\n  );\n  const uiSchemaHideError = uiOptions.hideError;\n  // Set hideError to the value provided in the uiSchema, otherwise stick with the prop to propagate to children\n  const hideError =\n    uiSchemaHideError === undefined\n      ? props.hideError\n      : Boolean(uiSchemaHideError);\n  const autofocus = Boolean(props.autofocus || uiOptions.autofocus);\n  if (Object.keys(schema).length === 0) {\n    return null;\n  }\n\n  const displayLabel = schemaUtils.getDisplayLabel(schema, uiSchema);\n\n  const { __errors, ...fieldErrorSchema } = errorSchema || {};\n  // See #439: uiSchema: Don't pass consumed class names or style to child components\n  const fieldUiSchema = omit(uiSchema, [\n    \"ui:classNames\",\n    \"classNames\",\n    \"ui:style\",\n  ]);\n  if (UI_OPTIONS_KEY in fieldUiSchema) {\n    fieldUiSchema[UI_OPTIONS_KEY] = omit(fieldUiSchema[UI_OPTIONS_KEY], [\n      \"classNames\",\n      \"style\",\n    ]);\n  }\n\n  const field = (\n    <FieldComponent\n      {...props}\n      onChange={handleFieldComponentChange}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={fieldUiSchema}\n      disabled={disabled}\n      readonly={readonly}\n      hideError={hideError}\n      autofocus={autofocus}\n      errorSchema={fieldErrorSchema}\n      formContext={formContext}\n      rawErrors={__errors}\n    />\n  );\n\n  const id = idSchema[ID_KEY];\n\n  // If this schema has a title defined, but the user has set a new key/label, retain their input.\n  let label;\n  if (wasPropertyKeyModified) {\n    label = name;\n  } else {\n    label =\n      ADDITIONAL_PROPERTY_FLAG in schema\n        ? name\n        : uiOptions.title || props.schema.title || schema.title || name;\n  }\n\n  const description =\n    uiOptions.description ||\n    props.schema.description ||\n    schema.description ||\n    \"\";\n  const help = uiOptions.help;\n  const hidden = uiOptions.widget === \"hidden\";\n\n  const classNames = [\"form-group\", \"field\", `field-${schema.type}`];\n  if (!hideError && __errors && __errors.length > 0) {\n    classNames.push(\"field-error has-error has-danger\");\n  }\n  if (uiSchema?.classNames) {\n    if (process.env.NODE_ENV !== \"production\") {\n      console.warn(\n        \"'uiSchema.classNames' is deprecated and may be removed in a major release; Use 'ui:classNames' instead.\"\n      );\n    }\n    classNames.push(uiSchema.classNames);\n  }\n  if (uiOptions.classNames) {\n    classNames.push(uiOptions.classNames);\n  }\n\n  const helpComponent = (\n    <FieldHelpTemplate\n      help={help}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      hasErrors={!hideError && __errors && __errors.length > 0}\n      registry={registry}\n    />\n  );\n  const errorsComponent = hideError ? undefined : (\n    <FieldErrorTemplate\n      errors={__errors}\n      errorSchema={errorSchema}\n      idSchema={idSchema}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n  const fieldProps: Omit<FieldTemplateProps<T, S, F>, \"children\"> = {\n    description: (\n      <DescriptionFieldTemplate\n        id={descriptionId<T>(id)}\n        description={description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n    ),\n    rawDescription: description,\n    help: helpComponent,\n    rawHelp: typeof help === \"string\" ? help : undefined,\n    errors: errorsComponent,\n    rawErrors: hideError ? undefined : __errors,\n    id,\n    label,\n    hidden,\n    onChange,\n    onKeyChange,\n    onDropPropertyClick,\n    required,\n    disabled,\n    readonly,\n    hideError,\n    displayLabel,\n    classNames: classNames.join(\" \").trim(),\n    style: uiOptions.style,\n    formContext,\n    formData,\n    schema,\n    uiSchema,\n    registry,\n  };\n\n  const _AnyOfField = registry.fields.AnyOfField;\n  const _OneOfField = registry.fields.OneOfField;\n  const isReplacingAnyOrOneOf =\n    uiSchema?.[\"ui:field\"] && uiSchema?.[\"ui:fieldReplacesAnyOrOneOf\"] === true;\n\n  return (\n    <FieldTemplate {...fieldProps}>\n      <>\n        {field}\n        {/*\n        If the schema `anyOf` or 'oneOf' can be rendered as a select control, don't\n        render the selection and let `StringField` component handle\n        rendering\n      */}\n        {schema.anyOf &&\n          !isReplacingAnyOrOneOf &&\n          !schemaUtils.isSelect(schema) && (\n            <_AnyOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.anyOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n        {schema.oneOf &&\n          !isReplacingAnyOrOneOf &&\n          !schemaUtils.isSelect(schema) && (\n            <_OneOfField\n              name={name}\n              disabled={disabled}\n              readonly={readonly}\n              hideError={hideError}\n              errorSchema={errorSchema}\n              formData={formData}\n              formContext={formContext}\n              idPrefix={idPrefix}\n              idSchema={idSchema}\n              idSeparator={idSeparator}\n              onBlur={props.onBlur}\n              onChange={props.onChange}\n              onFocus={props.onFocus}\n              options={schema.oneOf.map((_schema) =>\n                schemaUtils.retrieveSchema(\n                  isObject(_schema) ? (_schema as S) : ({} as S),\n                  formData\n                )\n              )}\n              baseType={schema.type}\n              registry={registry}\n              schema={schema}\n              uiSchema={uiSchema}\n            />\n          )}\n      </>\n    </FieldTemplate>\n  );\n}\n\n/** The `SchemaField` component determines whether it is necessary to rerender the component based on any props changes\n * and if so, calls the `SchemaFieldRender` component with the props.\n */\nclass SchemaField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends React.Component<FieldProps<T, S, F>> {\n  shouldComponentUpdate(nextProps: Readonly<FieldProps<T, S, F>>) {\n    return !deepEquals(this.props, nextProps);\n  }\n\n  render() {\n    return <SchemaFieldRender<T, S, F> {...this.props} />;\n  }\n}\n\nexport default SchemaField;\n","import React from \"react\";\nimport {\n  getWidget,\n  getUiOptions,\n  optionsList,\n  hasWidget,\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `StringField` component is used to render a schema field that represents a string type\n *\n * @param props - The `FieldProps` for this template\n */\nfunction StringField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const {\n    schema,\n    name,\n    uiSchema,\n    idSchema,\n    formData,\n    required,\n    disabled = false,\n    readonly = false,\n    autofocus = false,\n    onChange,\n    onBlur,\n    onFocus,\n    registry,\n    rawErrors,\n  } = props;\n  const { title, format } = schema;\n  const { widgets, formContext, schemaUtils } = registry;\n  const enumOptions = schemaUtils.isSelect(schema)\n    ? optionsList(schema)\n    : undefined;\n  let defaultWidget = enumOptions ? \"select\" : \"text\";\n  if (format && hasWidget<T, S, F>(schema, format, widgets)) {\n    defaultWidget = format;\n  }\n  const {\n    widget = defaultWidget,\n    placeholder = \"\",\n    ...options\n  } = getUiOptions<T, S, F>(uiSchema);\n  const Widget = getWidget<T, S, F>(schema, widget, widgets);\n  return (\n    <Widget\n      options={{ ...options, enumOptions }}\n      schema={schema}\n      uiSchema={uiSchema}\n      id={idSchema.$id}\n      label={title === undefined ? name : title}\n      value={formData}\n      onChange={onChange}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      required={required}\n      disabled={disabled}\n      readonly={readonly}\n      formContext={formContext}\n      autofocus={autofocus}\n      registry={registry}\n      placeholder={placeholder}\n      rawErrors={rawErrors}\n    />\n  );\n}\n\nexport default StringField;\n","import { useEffect } from \"react\";\nimport {\n  FieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `NullField` component is used to render a field in the schema is null. It also ensures that the `formData` is\n * also set to null if it has no value.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction NullField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldProps<T, S, F>) {\n  const { formData, onChange } = props;\n  useEffect(() => {\n    if (formData === undefined) {\n      onChange(null as unknown as T);\n    }\n  }, [formData, onChange]);\n\n  return null;\n}\n\nexport default NullField;\n","import React from \"react\";\nimport {\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  ArrayFieldDescriptionProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldDescriptionTemplate` component renders a `DescriptionFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldDescriptionProps` for the component\n */\nexport default function ArrayFieldDescriptionTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldDescriptionProps<T, S, F>) {\n  const { idSchema, description, registry, schema, uiSchema } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!description || !displayLabel) {\n    return null;\n  }\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  return (\n    <DescriptionFieldTemplate\n      id={descriptionId<T>(idSchema)}\n      description={description}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { CSSProperties } from \"react\";\nimport {\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldItemTemplate` component is the template used to render an items of an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldItemTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateItemType<T, S, F>) {\n  const {\n    children,\n    className,\n    disabled,\n    hasToolbar,\n    hasMoveDown,\n    hasMoveUp,\n    hasRemove,\n    index,\n    onDropIndexClick,\n    onReorderClick,\n    readonly,\n    registry,\n    uiSchema,\n  } = props;\n  const { MoveDownButton, MoveUpButton, RemoveButton } =\n    registry.templates.ButtonTemplates;\n  const btnStyle: CSSProperties = {\n    flex: 1,\n    paddingLeft: 6,\n    paddingRight: 6,\n    fontWeight: \"bold\",\n  };\n  return (\n    <div className={className}>\n      <div className={hasToolbar ? \"col-xs-9\" : \"col-xs-12\"}>{children}</div>\n      {hasToolbar && (\n        <div className=\"col-xs-3 array-item-toolbox\">\n          <div\n            className=\"btn-group\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-around\",\n            }}\n          >\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveUpButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveUp}\n                onClick={onReorderClick(index, index - 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {(hasMoveUp || hasMoveDown) && (\n              <MoveDownButton\n                style={btnStyle}\n                disabled={disabled || readonly || !hasMoveDown}\n                onClick={onReorderClick(index, index + 1)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n            {hasRemove && (\n              <RemoveButton\n                style={btnStyle}\n                disabled={disabled || readonly}\n                onClick={onDropIndexClick(index)}\n                uiSchema={uiSchema}\n                registry={registry}\n              />\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  ArrayFieldTemplateProps,\n  ArrayFieldTemplateItemType,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTemplate` component is the template used to render all items in an array.\n *\n * @param props - The `ArrayFieldTemplateItemType` props for the component\n */\nexport default function ArrayFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTemplateProps<T, S, F>) {\n  const {\n    canAdd,\n    className,\n    disabled,\n    idSchema,\n    uiSchema,\n    items,\n    onAddClick,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n  } = props;\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const ArrayFieldDescriptionTemplate = getTemplate<\n    \"ArrayFieldDescriptionTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldDescriptionTemplate\", registry, uiOptions);\n  const ArrayFieldItemTemplate = getTemplate<\"ArrayFieldItemTemplate\", T, S, F>(\n    \"ArrayFieldItemTemplate\",\n    registry,\n    uiOptions\n  );\n  const ArrayFieldTitleTemplate = getTemplate<\n    \"ArrayFieldTitleTemplate\",\n    T,\n    S,\n    F\n  >(\"ArrayFieldTitleTemplate\", registry, uiOptions);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset className={className} id={idSchema.$id}>\n      <ArrayFieldTitleTemplate\n        idSchema={idSchema}\n        title={uiOptions.title || title}\n        required={required}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <ArrayFieldDescriptionTemplate\n        idSchema={idSchema}\n        description={uiOptions.description || schema.description}\n        schema={schema}\n        uiSchema={uiSchema}\n        registry={registry}\n      />\n      <div className=\"row array-item-list\">\n        {items &&\n          items.map(\n            ({ key, ...itemProps }: ArrayFieldTemplateItemType<T, S, F>) => (\n              <ArrayFieldItemTemplate key={key} {...itemProps} />\n            )\n          )}\n      </div>\n      {canAdd && (\n        <AddButton\n          className=\"array-item-add\"\n          onClick={onAddClick}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  getUiOptions,\n  titleId,\n  ArrayFieldTitleProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\n/** The `ArrayFieldTitleTemplate` component renders a `TitleFieldTemplate` with an `id` derived from\n * the `idSchema`.\n *\n * @param props - The `ArrayFieldTitleProps` for the component\n */\nexport default function ArrayFieldTitleTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ArrayFieldTitleProps<T, S, F>) {\n  const { idSchema, title, schema, uiSchema, required, registry } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const { label: displayLabel = true } = options;\n  if (!title || !displayLabel) {\n    return null;\n  }\n  const TitleFieldTemplate: TemplatesType<T, S, F>[\"TitleFieldTemplate\"] =\n    getTemplate<\"TitleFieldTemplate\", T, S, F>(\n      \"TitleFieldTemplate\",\n      registry,\n      options\n    );\n  return (\n    <TitleFieldTemplate\n      id={titleId<T>(idSchema)}\n      title={title}\n      required={required}\n      schema={schema}\n      uiSchema={uiSchema}\n      registry={registry}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  ariaDescribedByIds,\n  examplesId,\n  getInputProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `BaseInputTemplate` is the template to use to render the basic `<input>` component for the `core` theme.\n * It is used as the template for rendering many of the <input> based widgets that differ by `type` and callbacks only.\n * It can be customized/overridden for other themes or individual implementations as needed.\n *\n * @param props - The `WidgetProps` for this template\n */\nexport default function BaseInputTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    id,\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onBlur,\n    onFocus,\n    onChange,\n    options,\n    schema,\n    uiSchema,\n    formContext,\n    registry,\n    rawErrors,\n    type,\n    ...rest\n  } = props;\n\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!id) {\n    console.log(\"No id for\", props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const inputProps = {\n    ...rest,\n    ...getInputProps<T, S, F>(schema, type, options),\n  };\n\n  let inputValue;\n  if (inputProps.type === \"number\" || inputProps.type === \"integer\") {\n    inputValue = value || value === 0 ? value : \"\";\n  } else {\n    inputValue = value == null ? \"\" : value;\n  }\n\n  const _onChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options]\n  );\n  const _onBlur = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n  const _onFocus = useCallback(\n    ({ target: { value } }: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, value),\n    [onFocus, id]\n  );\n\n  return (\n    <>\n      <input\n        id={id}\n        name={id}\n        className=\"form-control\"\n        readOnly={readonly}\n        disabled={disabled}\n        autoFocus={autofocus}\n        value={inputValue}\n        {...inputProps}\n        list={schema.examples ? examplesId<T>(id) : undefined}\n        onChange={_onChange}\n        onBlur={_onBlur}\n        onFocus={_onFocus}\n        aria-describedby={ariaDescribedByIds<T>(id, !!schema.examples)}\n      />\n      {Array.isArray(schema.examples) && (\n        <datalist key={`datalist_${id}`} id={examplesId<T>(id)}>\n          {(schema.examples as string[])\n            .concat(\n              schema.default && !schema.examples.includes(schema.default)\n                ? ([schema.default] as string[])\n                : []\n            )\n            .map((example: any) => {\n              return <option key={example} value={example} />;\n            })}\n        </datalist>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport {\n  getSubmitButtonOptions,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  SubmitButtonProps,\n} from \"@rjsf/utils\";\n\n/** The `SubmitButton` renders a button that represent the `Submit` action on a form\n */\nexport default function SubmitButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ uiSchema }: SubmitButtonProps<T, S, F>) {\n  const {\n    submitText,\n    norender,\n    props: submitButtonProps = {},\n  } = getSubmitButtonOptions<T, S, F>(uiSchema);\n  if (norender) {\n    return null;\n  }\n  return (\n    <div>\n      <button\n        type=\"submit\"\n        {...submitButtonProps}\n        className={`btn btn-info ${submitButtonProps.className}`}\n      >\n        {submitText}\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nexport default function IconButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  const {\n    iconType = \"default\",\n    icon,\n    className,\n    uiSchema,\n    registry,\n    ...otherProps\n  } = props;\n  return (\n    <button\n      type=\"button\"\n      className={`btn btn-${iconType} ${className}`}\n      {...otherProps}\n    >\n      <i className={`glyphicon glyphicon-${icon}`} />\n    </button>\n  );\n}\n\nexport function MoveDownButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move down\"\n      className=\"array-item-move-down\"\n      {...props}\n      icon=\"arrow-down\"\n    />\n  );\n}\n\nexport function MoveUpButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Move up\"\n      className=\"array-item-move-up\"\n      {...props}\n      icon=\"arrow-up\"\n    />\n  );\n}\n\nexport function RemoveButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: IconButtonProps<T, S, F>) {\n  return (\n    <IconButton\n      title=\"Remove\"\n      className=\"array-item-remove\"\n      {...props}\n      iconType=\"danger\"\n      icon=\"remove\"\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  IconButtonProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport IconButton from \"./IconButton\";\n\n/** The `AddButton` renders a button that represent the `Add` action on a form\n */\nexport default function AddButton<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ className, onClick, disabled, registry }: IconButtonProps<T, S, F>) {\n  return (\n    <div className=\"row\">\n      <p className={`col-xs-3 col-xs-offset-9 text-right ${className}`}>\n        <IconButton\n          iconType=\"info\"\n          icon=\"plus\"\n          className=\"btn-add col-xs-12\"\n          title=\"Add\"\n          onClick={onClick}\n          disabled={disabled}\n          registry={registry}\n        />\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  DescriptionFieldProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `DescriptionField` is the template to use to render the description of a field\n *\n * @param props - The `DescriptionFieldProps` for this component\n */\nexport default function DescriptionField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: DescriptionFieldProps<T, S, F>) {\n  const { id, description } = props;\n  if (!description) {\n    return null;\n  }\n  if (typeof description === \"string\") {\n    return (\n      <p id={id} className=\"field-description\">\n        {description}\n      </p>\n    );\n  } else {\n    return (\n      <div id={id} className=\"field-description\">\n        {description}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport {\n  ErrorListProps,\n  FormContextType,\n  RJSFValidationError,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `ErrorList` component is the template that renders the all the errors associated with the fields in the `Form`\n *\n * @param props - The `ErrorListProps` for this component\n */\nexport default function ErrorList<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ errors }: ErrorListProps<T, S, F>) {\n  return (\n    <div className=\"panel panel-danger errors\">\n      <div className=\"panel-heading\">\n        <h3 className=\"panel-title\">Errors</h3>\n      </div>\n      <ul className=\"list-group\">\n        {errors.map((error: RJSFValidationError, i: number) => {\n          return (\n            <li key={i} className=\"list-group-item text-danger\">\n              {error.stack}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\nexport type LabelProps = {\n  /** The label for the field */\n  label?: string;\n  /** A boolean value stating if the field is required */\n  required?: boolean;\n  /** The id of the input field being labeled */\n  id?: string;\n};\n\n/** Renders a label for a field\n *\n * @param props - The `LabelProps` for this component\n */\nexport default function Label(props: LabelProps) {\n  const { label, required, id } = props;\n  if (!label) {\n    return null;\n  }\n  return (\n    <label className=\"control-label\" htmlFor={id}>\n      {label}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </label>\n  );\n}\n","import React from \"react\";\nimport {\n  FieldTemplateProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  getTemplate,\n  getUiOptions,\n} from \"@rjsf/utils\";\n\nimport Label from \"./Label\";\n\n/** The `FieldTemplate` component is the template used by `SchemaField` to render any field. It renders the field\n * content, (label, description, children, errors and help) inside of a `WrapIfAdditional` component.\n *\n * @param props - The `FieldTemplateProps` for this component\n */\nexport default function FieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldTemplateProps<T, S, F>) {\n  const {\n    id,\n    label,\n    children,\n    errors,\n    help,\n    description,\n    hidden,\n    required,\n    displayLabel,\n    registry,\n    uiSchema,\n  } = props;\n  const uiOptions = getUiOptions(uiSchema);\n  const WrapIfAdditionalTemplate = getTemplate<\n    \"WrapIfAdditionalTemplate\",\n    T,\n    S,\n    F\n  >(\"WrapIfAdditionalTemplate\", registry, uiOptions);\n  if (hidden) {\n    return <div className=\"hidden\">{children}</div>;\n  }\n  return (\n    <WrapIfAdditionalTemplate {...props}>\n      {displayLabel && <Label label={label} required={required} id={id} />}\n      {displayLabel && description ? description : null}\n      {children}\n      {errors}\n      {help}\n    </WrapIfAdditionalTemplate>\n  );\n}\n","import React from \"react\";\nimport {\n  errorId,\n  FieldErrorProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldErrorTemplate` component renders the errors local to the particular field\n *\n * @param props - The `FieldErrorProps` for the errors being rendered\n */\nexport default function FieldErrorTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldErrorProps<T, S, F>) {\n  const { errors = [], idSchema } = props;\n  if (errors.length === 0) {\n    return null;\n  }\n  const id = errorId<T>(idSchema);\n\n  return (\n    <div>\n      <ul id={id} className=\"error-detail bs-callout bs-callout-info\">\n        {errors\n          .filter((elem) => !!elem)\n          .map((error, index: number) => {\n            return (\n              <li className=\"text-danger\" key={index}>\n                {error}\n              </li>\n            );\n          })}\n      </ul>\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  helpId,\n  FieldHelpProps,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `FieldHelpTemplate` component renders any help desired for a field\n *\n * @param props - The `FieldHelpProps` to be rendered\n */\nexport default function FieldHelpTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: FieldHelpProps<T, S, F>) {\n  const { idSchema, help } = props;\n  if (!help) {\n    return null;\n  }\n  const id = helpId<T>(idSchema);\n  if (typeof help === \"string\") {\n    return (\n      <p id={id} className=\"help-block\">\n        {help}\n      </p>\n    );\n  }\n  return (\n    <div id={id} className=\"help-block\">\n      {help}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  ObjectFieldTemplatePropertyType,\n  ObjectFieldTemplateProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n  canExpand,\n  descriptionId,\n  getTemplate,\n  getUiOptions,\n  titleId,\n} from \"@rjsf/utils\";\n\n/** The `ObjectFieldTemplate` is the template to use to render all the inner properties of an object along with the\n * title and description if available. If the object is expandable, then an `AddButton` is also rendered after all\n * the properties.\n *\n * @param props - The `ObjectFieldTemplateProps` for this component\n */\nexport default function ObjectFieldTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: ObjectFieldTemplateProps<T, S, F>) {\n  const {\n    description,\n    disabled,\n    formData,\n    idSchema,\n    onAddClick,\n    properties,\n    readonly,\n    registry,\n    required,\n    schema,\n    title,\n    uiSchema,\n  } = props;\n  const options = getUiOptions<T, S, F>(uiSchema);\n  const TitleFieldTemplate = getTemplate<\"TitleFieldTemplate\", T, S, F>(\n    \"TitleFieldTemplate\",\n    registry,\n    options\n  );\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Button templates are not overridden in the uiSchema\n  const {\n    ButtonTemplates: { AddButton },\n  } = registry.templates;\n  return (\n    <fieldset id={idSchema.$id}>\n      {(options.title || title) && (\n        <TitleFieldTemplate\n          id={titleId<T>(idSchema)}\n          title={options.title || title}\n          required={required}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {(options.description || description) && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(idSchema)}\n          description={options.description || description!}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      {properties.map((prop: ObjectFieldTemplatePropertyType) => prop.content)}\n      {canExpand<T, S, F>(schema, uiSchema, formData) && (\n        <AddButton\n          className=\"object-property-expand\"\n          onClick={onAddClick(schema)}\n          disabled={disabled || readonly}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n    </fieldset>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  TitleFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nconst REQUIRED_FIELD_SYMBOL = \"*\";\n\n/** The `TitleField` is the template to use to render the title of a field\n *\n * @param props - The `TitleFieldProps` for this component\n */\nexport default function TitleField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: TitleFieldProps<T, S, F>) {\n  const { id, title, required } = props;\n  return (\n    <legend id={id}>\n      {title}\n      {required && <span className=\"required\">{REQUIRED_FIELD_SYMBOL}</span>}\n    </legend>\n  );\n}\n","import React from \"react\";\nimport {\n  FormContextType,\n  UnsupportedFieldProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `UnsupportedField` component is used to render a field in the schema is one that is not supported by\n * react-jsonschema-form.\n *\n * @param props - The `FieldProps` for this template\n */\nfunction UnsupportedField<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: UnsupportedFieldProps<T, S, F>) {\n  const { schema, idSchema, reason } = props;\n  return (\n    <div className=\"unsupported-field\">\n      <p>\n        Unsupported field schema\n        {idSchema && idSchema.$id && (\n          <span>\n            {\" for\"} field <code>{idSchema.$id}</code>\n          </span>\n        )}\n        {reason && <em>: {reason}</em>}.\n      </p>\n      {schema && <pre>{JSON.stringify(schema, null, 2)}</pre>}\n    </div>\n  );\n}\n\nexport default UnsupportedField;\n","import React from \"react\";\nimport {\n  ADDITIONAL_PROPERTY_FLAG,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WrapIfAdditionalTemplateProps,\n} from \"@rjsf/utils\";\n\nimport Label from \"./FieldTemplate/Label\";\n\n/** The `WrapIfAdditional` component is used by the `FieldTemplate` to rename, or remove properties that are\n * part of an `additionalProperties` part of a schema.\n *\n * @param props - The `WrapIfAdditionalProps` for this component\n */\nexport default function WrapIfAdditionalTemplate<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WrapIfAdditionalTemplateProps<T, S, F>) {\n  const {\n    id,\n    classNames,\n    style,\n    disabled,\n    label,\n    onKeyChange,\n    onDropPropertyClick,\n    readonly,\n    required,\n    schema,\n    children,\n    uiSchema,\n    registry,\n  } = props;\n  // Button templates are not overridden in the uiSchema\n  const { RemoveButton } = registry.templates.ButtonTemplates;\n  const keyLabel = `${label} Key`; // i18n ?\n  const additional = ADDITIONAL_PROPERTY_FLAG in schema;\n\n  if (!additional) {\n    return (\n      <div className={classNames} style={style}>\n        {children}\n      </div>\n    );\n  }\n\n  return (\n    <div className={classNames} style={style}>\n      <div className=\"row\">\n        <div className=\"col-xs-5 form-additional\">\n          <div className=\"form-group\">\n            <Label label={keyLabel} required={required} id={`${id}-key`} />\n            <input\n              className=\"form-control\"\n              type=\"text\"\n              id={`${id}-key`}\n              onBlur={(event) => onKeyChange(event.target.value)}\n              defaultValue={label}\n            />\n          </div>\n        </div>\n        <div className=\"form-additional form-group col-xs-5\">{children}</div>\n        <div className=\"col-xs-2\">\n          <RemoveButton\n            className=\"array-item-remove btn-block\"\n            style={{ border: \"0\" }}\n            disabled={disabled || readonly}\n            onClick={onDropPropertyClick(label)}\n            uiSchema={uiSchema}\n            registry={registry}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { MouseEvent, useCallback, useEffect, useReducer } from \"react\";\nimport {\n  ariaDescribedByIds,\n  parseDateString,\n  toDateString,\n  pad,\n  DateObject,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction rangeOptions(start: number, stop: number) {\n  const options = [];\n  for (let i = start; i <= stop; i++) {\n    options.push({ value: i, label: pad(i, 2) });\n  }\n  return options;\n}\n\nfunction readyForChange(state: DateObject) {\n  return Object.values(state).every((value) => value !== -1);\n}\n\nfunction dateElementProps(\n  state: DateObject,\n  time: boolean,\n  yearsRange: [number, number] = [1900, new Date().getFullYear() + 2]\n) {\n  const { year, month, day, hour, minute, second } = state;\n  const data = [\n    {\n      type: \"year\",\n      range: yearsRange,\n      value: year,\n    },\n    { type: \"month\", range: [1, 12], value: month },\n    { type: \"day\", range: [1, 31], value: day },\n  ] as { type: string; range: [number, number]; value: number | undefined }[];\n  if (time) {\n    data.push(\n      { type: \"hour\", range: [0, 23], value: hour },\n      { type: \"minute\", range: [0, 59], value: minute },\n      { type: \"second\", range: [0, 59], value: second }\n    );\n  }\n  return data;\n}\n\ntype DateElementProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  WidgetProps<T, S, F>,\n  | \"value\"\n  | \"disabled\"\n  | \"readonly\"\n  | \"autofocus\"\n  | \"registry\"\n  | \"onBlur\"\n  | \"onFocus\"\n> & {\n  rootId: string;\n  select: (property: keyof DateObject, value: any) => void;\n  type: string;\n  range: [number, number];\n};\n\nfunction DateElement<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  type,\n  range,\n  value,\n  select,\n  rootId,\n  disabled,\n  readonly,\n  autofocus,\n  registry,\n  onBlur,\n  onFocus,\n}: DateElementProps<T, S, F>) {\n  const id = rootId + \"_\" + type;\n  const { SelectWidget } = registry.widgets;\n  return (\n    <SelectWidget\n      schema={{ type: \"integer\" } as S}\n      id={id}\n      className=\"form-control\"\n      options={{ enumOptions: rangeOptions(range[0], range[1]) }}\n      placeholder={type}\n      value={value}\n      disabled={disabled}\n      readonly={readonly}\n      autofocus={autofocus}\n      onChange={(value: any) => select(type as keyof DateObject, value)}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      registry={registry}\n      label=\"\"\n      aria-describedby={ariaDescribedByIds<T>(rootId)}\n    />\n  );\n}\n\n/** The `AltDateWidget` is an alternative widget for rendering date properties.\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  time = false,\n  disabled = false,\n  readonly = false,\n  autofocus = false,\n  options,\n  id,\n  registry,\n  onBlur,\n  onFocus,\n  onChange,\n  value,\n}: WidgetProps<T, S, F>) {\n  const [state, setState] = useReducer(\n    (state: DateObject, action: Partial<DateObject>) => {\n      return { ...state, ...action };\n    },\n    parseDateString(value, time)\n  );\n\n  useEffect(() => {\n    if (value && value !== toDateString(state, time)) {\n      setState(parseDateString(value, time));\n    }\n  }, [value, state, time]);\n\n  useEffect(() => {\n    if (readyForChange(state)) {\n      // Only propagate to parent state if we have a complete date{time}\n      onChange(toDateString(state, time));\n    }\n  }, [state, time, onChange]);\n\n  const handleChange = useCallback(\n    (property: keyof DateObject, value: string) => {\n      setState({ [property]: value });\n    },\n    []\n  );\n\n  const handleSetNow = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      const nowDateObj = parseDateString(new Date().toJSON(), time);\n      setState(nowDateObj);\n    },\n    [disabled, readonly, time]\n  );\n\n  const handleClear = useCallback(\n    (event: MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n      if (disabled || readonly) {\n        return;\n      }\n      setState(parseDateString(\"\", time));\n      onChange(undefined);\n    },\n    [disabled, readonly, time, onChange]\n  );\n\n  return (\n    <ul className=\"list-inline\">\n      {dateElementProps(\n        state,\n        time,\n        options.yearsRange as [number, number] | undefined\n      ).map((elemProps, i) => (\n        <li className=\"list-inline-item\" key={i}>\n          <DateElement\n            rootId={id}\n            select={handleChange}\n            {...elemProps}\n            disabled={disabled}\n            readonly={readonly}\n            registry={registry}\n            onBlur={onBlur}\n            onFocus={onFocus}\n            autofocus={autofocus && i === 0}\n          />\n        </li>\n      ))}\n      {(options.hideNowButton !== \"undefined\"\n        ? !options.hideNowButton\n        : true) && (\n        <li className=\"list-inline-item\">\n          <a href=\"#\" className=\"btn btn-info btn-now\" onClick={handleSetNow}>\n            Now\n          </a>\n        </li>\n      )}\n      {(options.hideClearButton !== \"undefined\"\n        ? !options.hideClearButton\n        : true) && (\n        <li className=\"list-inline-item\">\n          <a\n            href=\"#\"\n            className=\"btn btn-warning btn-clear\"\n            onClick={handleClear}\n          >\n            Clear\n          </a>\n        </li>\n      )}\n    </ul>\n  );\n}\n\nexport default AltDateWidget;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\nimport React from \"react\";\n\n/** The `AltDateTimeWidget` is an alternative widget for rendering datetime properties.\n *  It uses the AltDateWidget for rendering, with the `time` prop set to true by default.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction AltDateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ time = true, ...props }: WidgetProps<T, S, F>) {\n  const { AltDateWidget } = props.registry.widgets;\n  return <AltDateWidget time={time} {...props} />;\n}\n\nexport default AltDateTimeWidget;\n","import React, { useCallback } from \"react\";\nimport {\n  ariaDescribedByIds,\n  descriptionId,\n  getTemplate,\n  schemaRequiresTrueValue,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `CheckBoxWidget` is a widget for rendering boolean properties.\n *  It is typically used to represent a boolean.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  uiSchema,\n  options,\n  id,\n  value,\n  disabled,\n  readonly,\n  label,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  registry,\n}: WidgetProps<T, S, F>) {\n  const DescriptionFieldTemplate = getTemplate<\n    \"DescriptionFieldTemplate\",\n    T,\n    S,\n    F\n  >(\"DescriptionFieldTemplate\", registry, options);\n  // Because an unchecked checkbox will cause html5 validation to fail, only add\n  // the \"required\" attribute if the field value must be \"true\", due to the\n  // \"const\" or \"enum\" keywords\n  const required = schemaRequiresTrueValue<S>(schema);\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) =>\n      onChange(event.target.checked),\n    [onChange]\n  );\n\n  const handleBlur = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onBlur(id, event.target.checked),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) =>\n      onFocus(id, event.target.checked),\n    [onFocus, id]\n  );\n\n  return (\n    <div className={`checkbox ${disabled || readonly ? \"disabled\" : \"\"}`}>\n      {schema.description && (\n        <DescriptionFieldTemplate\n          id={descriptionId<T>(id)}\n          description={schema.description}\n          schema={schema}\n          uiSchema={uiSchema}\n          registry={registry}\n        />\n      )}\n      <label>\n        <input\n          type=\"checkbox\"\n          id={id}\n          name={id}\n          checked={typeof value === \"undefined\" ? false : value}\n          required={required}\n          disabled={disabled || readonly}\n          autoFocus={autofocus}\n          onChange={handleChange}\n          onBlur={handleBlur}\n          onFocus={handleFocus}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n        <span>{label}</span>\n      </label>\n    </div>\n  );\n}\n\nexport default CheckboxWidget;\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsDeselectValue,\n  enumOptionsIsSelected,\n  enumOptionsSelectValue,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  WidgetProps,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\n/** The `CheckboxesWidget` is a widget for rendering checkbox groups.\n *  It is typically used to represent an array of enums.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction CheckboxesWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  disabled,\n  options: { inline = false, enumOptions, enumDisabled, emptyValue },\n  value,\n  autofocus = false,\n  readonly,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const checkboxesValues = Array.isArray(value) ? value : [value];\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n  return (\n    <div className=\"checkboxes\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, index) => {\n          const checked = enumOptionsIsSelected<S>(\n            option.value,\n            checkboxesValues\n          );\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n            if (event.target.checked) {\n              onChange(\n                enumOptionsSelectValue<S>(index, checkboxesValues, enumOptions)\n              );\n            } else {\n              onChange(\n                enumOptionsDeselectValue<S>(\n                  index,\n                  checkboxesValues,\n                  enumOptions\n                )\n              );\n            }\n          };\n\n          const checkbox = (\n            <span>\n              <input\n                type=\"checkbox\"\n                id={optionId(id, index)}\n                name={id}\n                checked={checked}\n                value={String(index)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && index === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n          return inline ? (\n            <label key={index} className={`checkbox-inline ${disabledCls}`}>\n              {checkbox}\n            </label>\n          ) : (\n            <div key={index} className={`checkbox ${disabledCls}`}>\n              <label>{checkbox}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default CheckboxesWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `ColorWidget` component uses the `BaseInputTemplate` changing the type to `color` and disables it when it is\n * either disabled or readonly.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function ColorWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { disabled, readonly, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"color\"\n      {...props}\n      disabled={disabled || readonly}\n    />\n  );\n}\n","import React, { useCallback } from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateWidget` component uses the `BaseInputTemplate` changing the type to `date` and transforms\n * the value to undefined when it is falsy during the `onChange` handling.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  const handleChange = useCallback(\n    (value: React.ChangeEvent) => onChange(value || undefined),\n    [onChange]\n  );\n\n  return <BaseInputTemplate type=\"date\" {...props} onChange={handleChange} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  localToUTC,\n  utcToLocal,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `DateTimeWidget` component uses the `BaseInputTemplate` changing the type to `datetime-local` and transforms\n * the value to/from utc using the appropriate utility functions.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function DateTimeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { onChange, value, options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return (\n    <BaseInputTemplate\n      type=\"datetime-local\"\n      {...props}\n      value={utcToLocal(value)}\n      onChange={(value) => onChange(localToUTC(value))}\n    />\n  );\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `EmailWidget` component uses the `BaseInputTemplate` changing the type to `email`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function EmailWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"email\" {...props} />;\n}\n","import React, { ChangeEvent, useCallback, useMemo, useState } from \"react\";\nimport {\n  ariaDescribedByIds,\n  dataURItoBlob,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction addNameToDataURL(dataURL: string, name: string) {\n  if (dataURL === null) {\n    return null;\n  }\n  return dataURL.replace(\";base64\", `;name=${encodeURIComponent(name)};base64`);\n}\n\ntype FileInfoType = {\n  dataURL?: string | null;\n  name: string;\n  size: number;\n  type: string;\n};\n\nfunction processFile(file: File): Promise<FileInfoType> {\n  const { name, size, type } = file;\n  return new Promise((resolve, reject) => {\n    const reader = new window.FileReader();\n    reader.onerror = reject;\n    reader.onload = (event) => {\n      if (typeof event.target?.result === \"string\") {\n        resolve({\n          dataURL: addNameToDataURL(event.target.result, name),\n          name,\n          size,\n          type,\n        });\n      } else {\n        resolve({\n          dataURL: null,\n          name,\n          size,\n          type,\n        });\n      }\n    };\n    reader.readAsDataURL(file);\n  });\n}\n\nfunction processFiles(files: FileList) {\n  return Promise.all(Array.from(files).map(processFile));\n}\n\nfunction FilesInfo({\n  filesInfo,\n}: {\n  filesInfo: { name: string; size: number; type: string }[];\n}) {\n  if (filesInfo.length === 0) {\n    return null;\n  }\n  return (\n    <ul className=\"file-info\">\n      {filesInfo.map((fileInfo, key) => {\n        const { name, size, type } = fileInfo;\n        return (\n          <li key={key}>\n            <strong>{name}</strong> ({type}, {size} bytes)\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction extractFileInfo(dataURLs: string[]) {\n  return dataURLs\n    .filter((dataURL) => typeof dataURL !== \"undefined\")\n    .map((dataURL) => {\n      const { blob, name } = dataURItoBlob(dataURL);\n      return {\n        name: name,\n        size: blob.size,\n        type: blob.type,\n      };\n    });\n}\n\n/**\n *  The `FileWidget` is a widget for rendering file upload fields.\n *  It is typically used with a string property with data-url format.\n */\nfunction FileWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  multiple,\n  id,\n  readonly,\n  disabled,\n  onChange,\n  value,\n  autofocus = false,\n  options,\n}: WidgetProps<T, S, F>) {\n  const extractedFilesInfo = useMemo(\n    () =>\n      Array.isArray(value) ? extractFileInfo(value) : extractFileInfo([value]),\n    [value]\n  );\n  const [filesInfo, setFilesInfo] =\n    useState<FileInfoType[]>(extractedFilesInfo);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files) {\n        return;\n      }\n      processFiles(event.target.files).then((filesInfoEvent) => {\n        setFilesInfo(filesInfoEvent);\n        const newValue = filesInfoEvent.map((fileInfo) => fileInfo.dataURL);\n        if (multiple) {\n          onChange(newValue);\n        } else {\n          onChange(newValue[0]);\n        }\n      });\n    },\n    [multiple, onChange]\n  );\n\n  return (\n    <div>\n      <p>\n        <input\n          id={id}\n          name={id}\n          type=\"file\"\n          disabled={readonly || disabled}\n          onChange={handleChange}\n          defaultValue=\"\"\n          autoFocus={autofocus}\n          multiple={multiple}\n          accept={options.accept ? String(options.accept) : undefined}\n          aria-describedby={ariaDescribedByIds<T>(id)}\n        />\n      </p>\n      <FilesInfo filesInfo={filesInfo} />\n    </div>\n  );\n}\n\nexport default FileWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `HiddenWidget` is a widget for rendering a hidden input field.\n *  It is typically used by setting type to \"hidden\".\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction HiddenWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({ id, value }: WidgetProps<T, S, F>) {\n  return (\n    <input\n      type=\"hidden\"\n      id={id}\n      name={id}\n      value={typeof value === \"undefined\" ? \"\" : value}\n    />\n  );\n}\n\nexport default HiddenWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `PasswordWidget` component uses the `BaseInputTemplate` changing the type to `password`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function PasswordWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"password\" {...props} />;\n}\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIsSelected,\n  enumOptionsValueForIndex,\n  optionId,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RadioWidget` is a widget for rendering a radio group.\n *  It is typically used with a string property constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction RadioWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onBlur,\n  onFocus,\n  onChange,\n  id,\n}: WidgetProps<T, S, F>) {\n  // Generating a unique field name to identify this set of radio buttons\n  const name = Math.random().toString();\n  const { enumOptions, enumDisabled, inline, emptyValue } = options;\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onBlur(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLInputElement>) =>\n      onFocus(id, enumOptionsValueForIndex<S>(value, enumOptions, emptyValue)),\n    [onFocus, id]\n  );\n\n  return (\n    <div className=\"field-radio-group\" id={id}>\n      {Array.isArray(enumOptions) &&\n        enumOptions.map((option, i) => {\n          const checked = enumOptionsIsSelected<S>(option.value, value);\n          const itemDisabled =\n            Array.isArray(enumDisabled) &&\n            enumDisabled.indexOf(option.value) !== -1;\n          const disabledCls =\n            disabled || itemDisabled || readonly ? \"disabled\" : \"\";\n\n          const handleChange = () => onChange(option.value);\n\n          const radio = (\n            <span>\n              <input\n                type=\"radio\"\n                id={optionId(id, i)}\n                checked={checked}\n                name={name}\n                required={required}\n                value={String(i)}\n                disabled={disabled || itemDisabled || readonly}\n                autoFocus={autofocus && i === 0}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                onFocus={handleFocus}\n                aria-describedby={ariaDescribedByIds<T>(id)}\n              />\n              <span>{option.label}</span>\n            </span>\n          );\n\n          return inline ? (\n            <label key={i} className={`radio-inline ${disabledCls}`}>\n              {radio}\n            </label>\n          ) : (\n            <div key={i} className={`radio ${disabledCls}`}>\n              <label>{radio}</label>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default RadioWidget;\n","import React from \"react\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `RangeWidget` component uses the `BaseInputTemplate` changing the type to `range` and wrapping the result\n * in a div, with the value along side it.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function RangeWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const {\n    value,\n    registry: {\n      templates: { BaseInputTemplate },\n    },\n  } = props;\n  return (\n    <div className=\"field-range-wrapper\">\n      <BaseInputTemplate type=\"range\" {...props} />\n      <span className=\"range-view\">{value}</span>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FocusEvent, useCallback } from \"react\";\nimport {\n  ariaDescribedByIds,\n  enumOptionsIndexForValue,\n  enumOptionsValueForIndex,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\nfunction getValue(\n  event: React.SyntheticEvent<HTMLSelectElement>,\n  multiple: boolean\n) {\n  if (multiple) {\n    return Array.from((event.target as HTMLSelectElement).options)\n      .slice()\n      .filter((o) => o.selected)\n      .map((o) => o.value);\n  }\n  return (event.target as HTMLSelectElement).value;\n}\n\n/** The `SelectWidget` is a widget for rendering dropdowns.\n *  It is typically used with string properties constrained with enum options.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction SelectWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  schema,\n  id,\n  options,\n  value,\n  required,\n  disabled,\n  readonly,\n  multiple = false,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n  placeholder,\n}: WidgetProps<T, S, F>) {\n  const { enumOptions, enumDisabled, emptyValue: optEmptyVal } = options;\n  const emptyValue = multiple ? [] : \"\";\n\n  const handleFocus = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onFocus(\n        id,\n        enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal)\n      );\n    },\n    [onFocus, id, schema, multiple, options]\n  );\n\n  const handleBlur = useCallback(\n    (event: FocusEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onBlur(\n        id,\n        enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal)\n      );\n    },\n    [onBlur, id, schema, multiple, options]\n  );\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLSelectElement>) => {\n      const newValue = getValue(event, multiple);\n      return onChange(\n        enumOptionsValueForIndex<S>(newValue, enumOptions, optEmptyVal)\n      );\n    },\n    [onChange, schema, multiple, options]\n  );\n\n  const selectedIndexes = enumOptionsIndexForValue<S>(\n    value,\n    enumOptions,\n    multiple\n  );\n\n  return (\n    <select\n      id={id}\n      name={id}\n      multiple={multiple}\n      className=\"form-control\"\n      value={\n        typeof selectedIndexes === \"undefined\" ? emptyValue : selectedIndexes\n      }\n      required={required}\n      disabled={disabled || readonly}\n      autoFocus={autofocus}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    >\n      {!multiple && schema.default === undefined && (\n        <option value=\"\">{placeholder}</option>\n      )}\n      {Array.isArray(enumOptions) &&\n        enumOptions.map(({ value, label }, i) => {\n          const disabled = enumDisabled && enumDisabled.indexOf(value) !== -1;\n          return (\n            <option key={i} value={String(i)} disabled={disabled}>\n              {label}\n            </option>\n          );\n        })}\n    </select>\n  );\n}\n\nexport default SelectWidget;\n","import React, { FocusEvent, useCallback } from \"react\";\nimport {\n  ariaDescribedByIds,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextareaWidget` is a widget for rendering input fields as textarea.\n *\n * @param props - The `WidgetProps` for this component\n */\nfunction TextareaWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>({\n  id,\n  options = {},\n  placeholder,\n  value,\n  required,\n  disabled,\n  readonly,\n  autofocus = false,\n  onChange,\n  onBlur,\n  onFocus,\n}: WidgetProps<T, S, F>) {\n  const handleChange = useCallback(\n    ({ target: { value } }: React.ChangeEvent<HTMLTextAreaElement>) =>\n      onChange(value === \"\" ? options.emptyValue : value),\n    [onChange, options.emptyValue]\n  );\n\n  const handleBlur = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onBlur(id, value),\n    [onBlur, id]\n  );\n\n  const handleFocus = useCallback(\n    ({ target: { value } }: FocusEvent<HTMLTextAreaElement>) =>\n      onFocus(id, value),\n    [id, onFocus]\n  );\n\n  return (\n    <textarea\n      id={id}\n      name={id}\n      className=\"form-control\"\n      value={value ? value : \"\"}\n      placeholder={placeholder}\n      required={required}\n      disabled={disabled}\n      readOnly={readonly}\n      autoFocus={autofocus}\n      rows={options.rows}\n      onBlur={handleBlur}\n      onFocus={handleFocus}\n      onChange={handleChange}\n      aria-describedby={ariaDescribedByIds<T>(id)}\n    />\n  );\n}\n\nTextareaWidget.defaultProps = {\n  autofocus: false,\n  options: {},\n};\n\nexport default TextareaWidget;\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `TextWidget` component uses the `BaseInputTemplate`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function TextWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `URLWidget` component uses the `BaseInputTemplate` changing the type to `url`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function URLWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"url\" {...props} />;\n}\n","import React from \"react\";\nimport {\n  getTemplate,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  WidgetProps,\n} from \"@rjsf/utils\";\n\n/** The `UpDownWidget` component uses the `BaseInputTemplate` changing the type to `number`.\n *\n * @param props - The `WidgetProps` for this component\n */\nexport default function UpDownWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(props: WidgetProps<T, S, F>) {\n  const { options, registry } = props;\n  const BaseInputTemplate = getTemplate<\"BaseInputTemplate\", T, S, F>(\n    \"BaseInputTemplate\",\n    registry,\n    options\n  );\n  return <BaseInputTemplate type=\"number\" {...props} />;\n}\n","import {\n  FormContextType,\n  Registry,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport fields from \"./components/fields\";\nimport templates from \"./components/templates\";\nimport widgets from \"./components/widgets\";\n\n/** The default registry consists of all the fields, templates and widgets provided in the core implementation,\n * plus an empty `rootSchema` and `formContext. We omit schemaUtils here because it cannot be defaulted without a\n * rootSchema and validator. It will be added into the computed registry later in the Form.\n */\nexport default function getDefaultRegistry<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): Omit<Registry<T, S, F>, \"schemaUtils\"> {\n  return {\n    fields: fields<T, S, F>(),\n    templates: templates<T, S, F>(),\n    widgets: widgets<T, S, F>(),\n    rootSchema: {} as S,\n    formContext: {} as F,\n  };\n}\n","import {\n  Field,\n  FormContextType,\n  RegistryFieldsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport ArrayField from \"./ArrayField\";\nimport BooleanField from \"./BooleanField\";\nimport MultiSchemaField from \"./MultiSchemaField\";\nimport NumberField from \"./NumberField\";\nimport ObjectField from \"./ObjectField\";\nimport SchemaField from \"./SchemaField\";\nimport StringField from \"./StringField\";\nimport NullField from \"./NullField\";\n\nfunction fields<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryFieldsType<T, S, F> {\n  return {\n    AnyOfField: MultiSchemaField,\n    ArrayField: ArrayField as unknown as Field<T, S, F>,\n    // ArrayField falls back to SchemaField if ArraySchemaField is not defined, which it isn't by default\n    BooleanField,\n    NumberField,\n    ObjectField,\n    OneOfField: MultiSchemaField,\n    SchemaField,\n    StringField,\n    NullField,\n  };\n}\n\nexport default fields;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport ArrayFieldDescriptionTemplate from \"./ArrayFieldDescriptionTemplate\";\nimport ArrayFieldItemTemplate from \"./ArrayFieldItemTemplate\";\nimport ArrayFieldTemplate from \"./ArrayFieldTemplate\";\nimport ArrayFieldTitleTemplate from \"./ArrayFieldTitleTemplate\";\nimport BaseInputTemplate from \"./BaseInputTemplate\";\nimport ButtonTemplates from \"./ButtonTemplates\";\nimport DescriptionField from \"./DescriptionField\";\nimport ErrorList from \"./ErrorList\";\nimport FieldTemplate from \"./FieldTemplate\";\nimport FieldErrorTemplate from \"./FieldErrorTemplate\";\nimport FieldHelpTemplate from \"./FieldHelpTemplate\";\nimport ObjectFieldTemplate from \"./ObjectFieldTemplate\";\nimport TitleField from \"./TitleField\";\nimport UnsupportedField from \"./UnsupportedField\";\nimport WrapIfAdditionalTemplate from \"./WrapIfAdditionalTemplate\";\n\nfunction templates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F> {\n  return {\n    ArrayFieldDescriptionTemplate,\n    ArrayFieldItemTemplate,\n    ArrayFieldTemplate,\n    ArrayFieldTitleTemplate,\n    ButtonTemplates: ButtonTemplates<T, S, F>(),\n    BaseInputTemplate,\n    DescriptionFieldTemplate: DescriptionField,\n    ErrorListTemplate: ErrorList,\n    FieldTemplate,\n    FieldErrorTemplate,\n    FieldHelpTemplate,\n    ObjectFieldTemplate,\n    TitleFieldTemplate: TitleField,\n    UnsupportedFieldTemplate: UnsupportedField,\n    WrapIfAdditionalTemplate,\n  };\n}\n\nexport default templates;\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  TemplatesType,\n} from \"@rjsf/utils\";\n\nimport SubmitButton from \"./SubmitButton\";\nimport AddButton from \"./AddButton\";\nimport { RemoveButton, MoveDownButton, MoveUpButton } from \"./IconButton\";\n\nfunction buttonTemplates<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): TemplatesType<T, S, F>[\"ButtonTemplates\"] {\n  return {\n    SubmitButton,\n    AddButton,\n    MoveDownButton,\n    MoveUpButton,\n    RemoveButton,\n  };\n}\n\nexport default buttonTemplates;\n","import {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n} from \"@rjsf/utils\";\n\nimport AltDateWidget from \"./AltDateWidget\";\nimport AltDateTimeWidget from \"./AltDateTimeWidget\";\nimport CheckboxWidget from \"./CheckboxWidget\";\nimport CheckboxesWidget from \"./CheckboxesWidget\";\nimport ColorWidget from \"./ColorWidget\";\nimport DateWidget from \"./DateWidget\";\nimport DateTimeWidget from \"./DateTimeWidget\";\nimport EmailWidget from \"./EmailWidget\";\nimport FileWidget from \"./FileWidget\";\nimport HiddenWidget from \"./HiddenWidget\";\nimport PasswordWidget from \"./PasswordWidget\";\nimport RadioWidget from \"./RadioWidget\";\nimport RangeWidget from \"./RangeWidget\";\nimport SelectWidget from \"./SelectWidget\";\nimport TextareaWidget from \"./TextareaWidget\";\nimport TextWidget from \"./TextWidget\";\nimport URLWidget from \"./URLWidget\";\nimport UpDownWidget from \"./UpDownWidget\";\n\nfunction widgets<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(): RegistryWidgetsType<T, S, F> {\n  return {\n    PasswordWidget,\n    RadioWidget,\n    UpDownWidget,\n    RangeWidget,\n    SelectWidget,\n    TextWidget,\n    DateWidget,\n    DateTimeWidget,\n    AltDateWidget,\n    AltDateTimeWidget,\n    EmailWidget,\n    URLWidget,\n    TextareaWidget,\n    HiddenWidget,\n    ColorWidget,\n    FileWidget,\n    CheckboxWidget,\n    CheckboxesWidget,\n  };\n}\n\nexport default widgets;\n","import React, { Component } from \"react\";\nimport {\n  createSchemaUtils,\n  CustomValidator,\n  deepEquals,\n  ErrorSchema,\n  ErrorTransformer,\n  FormContextType,\n  GenericObjectType,\n  getTemplate,\n  getUiOptions,\n  IdSchema,\n  isObject,\n  mergeObjects,\n  NAME_KEY,\n  PathSchema,\n  StrictRJSFSchema,\n  Registry,\n  RegistryFieldsType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  RJSFValidationError,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n  SchemaUtilsType,\n  shouldRender,\n  TemplatesType,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"@rjsf/utils\";\nimport _get from \"lodash/get\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _pick from \"lodash/pick\";\nimport _toPath from \"lodash/toPath\";\n\nimport getDefaultRegistry from \"../getDefaultRegistry\";\n\n/** The properties that are passed to the `Form` */\nexport interface FormProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** An implementation of the `ValidatorType` interface that is needed for form validation to work */\n  validator: ValidatorType<T, S, F>;\n  /** The optional children for the form, if provided, it will replace the default `SubmitButton` */\n  children?: React.ReactNode;\n  /** The uiSchema for the form */\n  uiSchema?: UiSchema<T, S, F>;\n  /** The data for the form, used to prefill a form with existing data */\n  formData?: T;\n  // Form presentation and behavior modifiers\n  /** You can provide a `formContext` object to the form, which is passed down to all fields and widgets. Useful for\n   * implementing context aware fields and widgets.\n   *\n   * NOTE: Setting `{readonlyAsDisabled: false}` on the formContext will make the antd theme treat readOnly fields as\n   * disabled.\n   */\n  formContext?: F;\n  /** To avoid collisions with existing ids in the DOM, it is possible to change the prefix used for ids;\n   * Default is `root`\n   */\n  idPrefix?: string;\n  /** To avoid using a path separator that is present in field names, it is possible to change the separator used for\n   * ids (Default is `_`)\n   */\n  idSeparator?: string;\n  /** It's possible to disable the whole form by setting the `disabled` prop. The `disabled` prop is then forwarded down\n   * to each field of the form. If you just want to disable some fields, see the `ui:disabled` parameter in `uiSchema`\n   */\n  disabled?: boolean;\n  /** It's possible to make the whole form read-only by setting the `readonly` prop. The `readonly` prop is then\n   * forwarded down to each field of the form. If you just want to make some fields read-only, see the `ui:readonly`\n   * parameter in `uiSchema`\n   */\n  readonly?: boolean;\n  // Form registry\n  /** The dictionary of registered fields in the form */\n  fields?: RegistryFieldsType<T, S, F>;\n  /** The dictionary of registered templates in the form; Partial allows a subset to be provided beyond the defaults */\n  templates?: Partial<Omit<TemplatesType<T, S, F>, \"ButtonTemplates\">> & {\n    ButtonTemplates?: Partial<TemplatesType<T, S, F>[\"ButtonTemplates\"]>;\n  };\n  /** The dictionary of registered widgets in the form */\n  widgets?: RegistryWidgetsType<T, S, F>;\n  // Callbacks\n  /** If you plan on being notified every time the form data are updated, you can pass an `onChange` handler, which will\n   * receive the same args as `onSubmit` any time a value is updated in the form. Can also return the `id` of the field\n   * that caused the change\n   */\n  onChange?: (data: IChangeEvent<T, S, F>, id?: string) => void;\n  /** To react when submitted form data are invalid, pass an `onError` handler. It will be passed the list of\n   * encountered errors\n   */\n  onError?: (errors: RJSFValidationError[]) => void;\n  /** You can pass a function as the `onSubmit` prop of your `Form` component to listen to when the form is submitted\n   * and its data are valid. It will be passed a result object having a `formData` attribute, which is the valid form\n   * data you're usually after. The original event will also be passed as a second parameter\n   */\n  onSubmit?: (data: IChangeEvent<T, S, F>, event: React.FormEvent<any>) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been touched, so you can pass\n   * an `onBlur` handler, which will receive the id of the input that was blurred and the field value\n   */\n  onBlur?: (id: string, data: any) => void;\n  /** Sometimes you may want to trigger events or modify external state when a field has been focused, so you can pass\n   * an `onFocus` handler, which will receive the id of the input that is focused and the field value\n   */\n  onFocus?: (id: string, data: any) => void;\n  // <form /> HTML attributes\n  /** The value of this prop will be passed to the `accept-charset` HTML attribute on the form */\n  acceptcharset?: string;\n  /** The value of this prop will be passed to the `action` HTML attribute on the form\n   *\n   * NOTE: this just renders the `action` attribute in the HTML markup. There is no real network request being sent to\n   * this `action` on submit. Instead, react-jsonschema-form catches the submit event with `event.preventDefault()`\n   * and then calls the `onSubmit` function, where you could send a request programmatically with `fetch` or similar.\n   */\n  action?: string;\n  /** The value of this prop will be passed to the `autocomplete` HTML attribute on the form */\n  autoComplete?: string;\n  /** The value of this prop will be passed to the `class` HTML attribute on the form */\n  className?: string;\n  /** The value of this prop will be passed to the `enctype` HTML attribute on the form */\n  enctype?: string;\n  /** The value of this prop will be passed to the `id` HTML attribute on the form */\n  id?: string;\n  /** The value of this prop will be passed to the `name` HTML attribute on the form */\n  name?: string;\n  /** The value of this prop will be passed to the `method` HTML attribute on the form */\n  method?: string;\n  /** It's possible to change the default `form` tag name to a different HTML tag, which can be helpful if you are\n   * nesting forms. However, native browser form behaviour, such as submitting when the `Enter` key is pressed, may no\n   * longer work\n   */\n  tagName?: React.ElementType;\n  /** The value of this prop will be passed to the `target` HTML attribute on the form */\n  target?: string;\n  // Errors and validation\n  /** Formerly the `validate` prop; Takes a function that specifies custom validation rules for the form */\n  customValidate?: CustomValidator<T, S, F>;\n  /** This prop allows passing in custom errors that are augmented with the existing JSON Schema errors on the form; it\n   * can be used to implement asynchronous validation\n   */\n  extraErrors?: ErrorSchema<T>;\n  /** If set to true, turns off HTML5 validation on the form; Set to `false` by default */\n  noHtml5Validate?: boolean;\n  /** If set to true, turns off all validation. Set to `false` by default\n   *\n   * @deprecated - In a future release, this switch may be replaced by making `validator` prop optional\n   */\n  noValidate?: boolean;\n  /** If set to true, the form will perform validation and show any validation errors whenever the form data is changed,\n   * rather than just on submit\n   */\n  liveValidate?: boolean;\n  /** If `omitExtraData` and `liveOmit` are both set to true, then extra form data values that are not in any form field\n   * will be removed whenever `onChange` is called. Set to `false` by default\n   */\n  liveOmit?: boolean;\n  /** If set to true, then extra form data values that are not in any form field will be removed whenever `onSubmit` is\n   * called. Set to `false` by default.\n   */\n  omitExtraData?: boolean;\n  /** When this prop is set to `top` or 'bottom', a list of errors (or the custom error list defined in the `ErrorList`) will also\n   * show. When set to false, only inline input validation errors will be shown. Set to `top` by default\n   */\n  showErrorList?: false | \"top\" | \"bottom\";\n  /** A function can be passed to this prop in order to make modifications to the default errors resulting from JSON\n   * Schema validation\n   */\n  transformErrors?: ErrorTransformer<T, S, F>;\n  /** If set to true, then the first field with an error will receive the focus when the form is submitted with errors\n   */\n  focusOnFirstError?: boolean;\n  // Private\n  /**\n   * _internalFormWrapper is currently used by the semantic-ui theme to provide a custom wrapper around `<Form />`\n   * that supports the proper rendering of those themes. To use this prop, one must pass a component that takes two\n   * props: `children` and `as`. That component, at minimum, should render the `children` inside of a <form /> tag\n   * unless `as` is provided, in which case, use the `as` prop in place of `<form />`.\n   * i.e.:\n   * ```\n   * export default function InternalForm({ children, as }) {\n   *   const FormTag = as || 'form';\n   *   return <FormTag>{children}</FormTag>;\n   * }\n   * ```\n   *\n   * Use at your own risk as this prop is private and may change at any time without notice.\n   */\n  _internalFormWrapper?: React.ElementType;\n  /** Support receiving a React ref to the Form\n   */\n  ref?: React.Ref<Form<T, S, F>>;\n}\n\n/** The data that is contained within the state for the `Form` */\nexport interface FormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> {\n  /** The JSON schema object for the form */\n  schema: S;\n  /** The uiSchema for the form */\n  uiSchema: UiSchema<T, S, F>;\n  /** The `IdSchema` for the form, computed from the `schema`, the `rootFieldId`, the `formData` and the `idPrefix` and\n   * `idSeparator` props.\n   */\n  idSchema: IdSchema<T>;\n  /** The schemaUtils implementation used by the `Form`, created from the `validator` and the `schema` */\n  schemaUtils: SchemaUtilsType<T, S, F>;\n  /** The current data for the form, computed from the `formData` prop and the changes made by the user */\n  formData?: T;\n  /** Flag indicating whether the form is in edit mode, true when `formData` is passed to the form, otherwise false */\n  edit: boolean;\n  /** The current list of errors for the form, includes `extraErrors` */\n  errors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form, includes `extraErrors` */\n  errorSchema: ErrorSchema<T>;\n  /** The current list of errors for the form directly from schema validation, does NOT include `extraErrors` */\n  schemaValidationErrors: RJSFValidationError[];\n  /** The current errors, in `ErrorSchema` format, for the form directly from schema validation, does NOT include\n   * `extraErrors`\n   */\n  schemaValidationErrorSchema: ErrorSchema<T>;\n}\n\n/** The event data passed when changes have been made to the form, includes everything from the `FormState` except\n * the schema validation errors. An additional `status` is added when returned from `onSubmit`\n */\nexport interface IChangeEvent<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Omit<\n    FormState<T, S, F>,\n    \"schemaValidationErrors\" | \"schemaValidationErrorSchema\"\n  > {\n  /** The status of the form when submitted */\n  status?: \"submitted\";\n}\n\n/** The `Form` component renders the outer form and all the fields defined in the `schema` */\nexport default class Form<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> extends Component<FormProps<T, S, F>, FormState<T, S, F>> {\n  /** The ref used to hold the `form` element, this needs to be `any` because `tagName` or `_internalFormWrapper` can\n   * provide any possible type here\n   */\n  formElement: React.RefObject<any>;\n\n  /** Constructs the `Form` from the `props`. Will setup the initial state from the props. It will also call the\n   * `onChange` handler if the initially provided `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param props - The initial props for the `Form`\n   */\n  constructor(props: FormProps<T, S, F>) {\n    super(props);\n\n    if (!props.validator) {\n      throw new Error(\"A validator is required for Form functionality to work\");\n    }\n\n    this.state = this.getStateFromProps(props, props.formData);\n    if (\n      this.props.onChange &&\n      !deepEquals(this.state.formData, this.props.formData)\n    ) {\n      this.props.onChange(this.state);\n    }\n    this.formElement = React.createRef();\n  }\n\n  /** React lifecycle method that gets called before new props are provided, updates the state based on new props. It\n   * will also call the`onChange` handler if the `formData` is modified to add missing default values as part of the\n   * state construction.\n   *\n   * @param nextProps - The new set of props about to be applied to the `Form`\n   */\n  UNSAFE_componentWillReceiveProps(nextProps: FormProps<T, S, F>) {\n    const nextState = this.getStateFromProps(nextProps, nextProps.formData);\n    if (\n      !deepEquals(nextState.formData, nextProps.formData) &&\n      !deepEquals(nextState.formData, this.state.formData) &&\n      nextProps.onChange\n    ) {\n      nextProps.onChange(nextState);\n    }\n    this.setState(nextState);\n  }\n\n  /** Extracts the updated state from the given `props` and `inputFormData`. As part of this process, the\n   * `inputFormData` is first processed to add any missing required defaults. After that, the data is run through the\n   * validation process IF required by the `props`.\n   *\n   * @param props - The props passed to the `Form`\n   * @param inputFormData - The new or current data for the `Form`\n   * @returns - The new state for the `Form`\n   */\n  getStateFromProps(\n    props: FormProps<T, S, F>,\n    inputFormData?: T\n  ): FormState<T, S, F> {\n    const state: FormState<T, S, F> = this.state || {};\n    const schema = \"schema\" in props ? props.schema : this.props.schema;\n    const uiSchema: UiSchema<T, S, F> =\n      (\"uiSchema\" in props ? props.uiSchema! : this.props.uiSchema!) || {};\n    const edit = typeof inputFormData !== \"undefined\";\n    const liveValidate =\n      \"liveValidate\" in props ? props.liveValidate : this.props.liveValidate;\n    const mustValidate = edit && !props.noValidate && liveValidate;\n    const rootSchema = schema;\n    let schemaUtils: SchemaUtilsType<T, S, F> = state.schemaUtils;\n    if (\n      !schemaUtils ||\n      schemaUtils.doesSchemaUtilsDiffer(props.validator, rootSchema)\n    ) {\n      schemaUtils = createSchemaUtils<T, S, F>(props.validator, rootSchema);\n    }\n    const formData: T = schemaUtils.getDefaultFormState(\n      schema,\n      inputFormData\n    ) as T;\n    const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n\n    const getCurrentErrors = (): ValidationData<T> => {\n      if (props.noValidate) {\n        return { errors: [], errorSchema: {} };\n      } else if (!props.liveValidate) {\n        return {\n          errors: state.schemaValidationErrors || [],\n          errorSchema: state.schemaValidationErrorSchema || {},\n        };\n      }\n      return {\n        errors: state.errors || [],\n        errorSchema: state.errorSchema || {},\n      };\n    };\n\n    let errors: RJSFValidationError[];\n    let errorSchema: ErrorSchema<T> | undefined;\n    let schemaValidationErrors: RJSFValidationError[] =\n      state.schemaValidationErrors;\n    let schemaValidationErrorSchema: ErrorSchema<T> =\n      state.schemaValidationErrorSchema;\n    if (mustValidate) {\n      const schemaValidation = this.validate(formData, schema, schemaUtils);\n      errors = schemaValidation.errors;\n      errorSchema = schemaValidation.errorSchema;\n      schemaValidationErrors = errors;\n      schemaValidationErrorSchema = errorSchema;\n    } else {\n      const currentErrors = getCurrentErrors();\n      errors = currentErrors.errors;\n      errorSchema = currentErrors.errorSchema;\n    }\n    if (props.extraErrors) {\n      const merged = schemaUtils.mergeValidationData(\n        { errorSchema, errors },\n        props.extraErrors\n      );\n      errorSchema = merged.errorSchema;\n      errors = merged.errors;\n    }\n    const idSchema = schemaUtils.toIdSchema(\n      retrievedSchema,\n      uiSchema[\"ui:rootFieldId\"],\n      formData,\n      props.idPrefix,\n      props.idSeparator\n    );\n    const nextState: FormState<T, S, F> = {\n      schemaUtils,\n      schema,\n      uiSchema,\n      idSchema,\n      formData,\n      edit,\n      errors,\n      errorSchema,\n      schemaValidationErrors,\n      schemaValidationErrorSchema,\n    };\n    return nextState;\n  }\n\n  /** React lifecycle method that is used to determine whether component should be updated.\n   *\n   * @param nextProps - The next version of the props\n   * @param nextState - The next version of the state\n   * @returns - True if the component should be updated, false otherwise\n   */\n  shouldComponentUpdate(\n    nextProps: FormProps<T, S, F>,\n    nextState: FormState<T, S, F>\n  ): boolean {\n    return shouldRender(this, nextProps, nextState);\n  }\n\n  /** Validates the `formData` against the `schema` using the `altSchemaUtils` (if provided otherwise it uses the\n   * `schemaUtils` in the state), returning the results.\n   *\n   * @param formData - The new form data to validate\n   * @param schema - The schema used to validate against\n   * @param altSchemaUtils - The alternate schemaUtils to use for validation\n   */\n  validate(\n    formData: T | undefined,\n    schema = this.props.schema,\n    altSchemaUtils?: SchemaUtilsType<T, S, F>\n  ): ValidationData<T> {\n    const schemaUtils = altSchemaUtils\n      ? altSchemaUtils\n      : this.state.schemaUtils;\n    const { customValidate, transformErrors, uiSchema } = this.props;\n    const resolvedSchema = schemaUtils.retrieveSchema(schema, formData);\n    return schemaUtils\n      .getValidator()\n      .validateFormData(\n        formData,\n        resolvedSchema,\n        customValidate,\n        transformErrors,\n        uiSchema\n      );\n  }\n\n  /** Renders any errors contained in the `state` in using the `ErrorList`, if not disabled by `showErrorList`. */\n  renderErrors(registry: Registry<T, S, F>) {\n    const { errors, errorSchema, schema, uiSchema } = this.state;\n    const { formContext } = this.props;\n    const options = getUiOptions<T, S, F>(uiSchema);\n    const ErrorListTemplate = getTemplate<\"ErrorListTemplate\", T, S, F>(\n      \"ErrorListTemplate\",\n      registry,\n      options\n    );\n\n    if (errors && errors.length) {\n      return (\n        <ErrorListTemplate\n          errors={errors}\n          errorSchema={errorSchema || {}}\n          schema={schema}\n          uiSchema={uiSchema}\n          formContext={formContext}\n        />\n      );\n    }\n    return null;\n  }\n\n  /** Returns the `formData` with only the elements specified in the `fields` list\n   *\n   * @param formData - The data for the `Form`\n   * @param fields - The fields to keep while filtering\n   */\n  getUsedFormData = (\n    formData: T | undefined,\n    fields: string[][]\n  ): T | undefined => {\n    // For the case of a single input form\n    if (fields.length === 0 && typeof formData !== \"object\") {\n      return formData;\n    }\n\n    // _pick has incorrect type definition, it works with string[][], because lodash/hasIn supports it\n    const data: GenericObjectType = _pick(\n      formData,\n      fields as unknown as string[]\n    );\n    if (Array.isArray(formData)) {\n      return Object.keys(data).map((key: string) => data[key]) as unknown as T;\n    }\n\n    return data as T;\n  };\n\n  /** Returns the list of field names from inspecting the `pathSchema` as well as using the `formData`\n   *\n   * @param pathSchema - The `PathSchema` object for the form\n   * @param [formData] - The form data to use while checking for empty objects/arrays\n   */\n  getFieldNames = (pathSchema: PathSchema<T>, formData?: T): string[][] => {\n    const getAllPaths = (\n      _obj: GenericObjectType,\n      acc: string[][] = [],\n      paths: string[][] = [[]]\n    ) => {\n      Object.keys(_obj).forEach((key: string) => {\n        if (typeof _obj[key] === \"object\") {\n          const newPaths = paths.map((path) => [...path, key]);\n          // If an object is marked with additionalProperties, all its keys are valid\n          if (\n            _obj[key][RJSF_ADDITONAL_PROPERTIES_FLAG] &&\n            _obj[key][NAME_KEY] !== \"\"\n          ) {\n            acc.push(_obj[key][NAME_KEY]);\n          } else {\n            getAllPaths(_obj[key], acc, newPaths);\n          }\n        } else if (key === NAME_KEY && _obj[key] !== \"\") {\n          paths.forEach((path) => {\n            const formValue = _get(formData, path);\n            // adds path to fieldNames if it points to a value\n            // or an empty object/array\n            if (typeof formValue !== \"object\" || _isEmpty(formValue)) {\n              acc.push(path);\n            }\n          });\n        }\n      });\n      return acc;\n    };\n\n    return getAllPaths(pathSchema);\n  };\n\n  /** Function to handle changes made to a field in the `Form`. This handler receives an entirely new copy of the\n   * `formData` along with a new `ErrorSchema`. It will first update the `formData` with any missing default fields and\n   * then, if `omitExtraData` and `liveOmit` are turned on, the `formData` will be filterer to remove any extra data not\n   * in a form field. Then, the resulting formData will be validated if required. The state will be updated with the new\n   * updated (potentially filtered) `formData`, any errors that resulted from validation. Finally the `onChange`\n   * callback will be called if specified with the updated state.\n   *\n   * @param formData - The new form data from a change to a field\n   * @param newErrorSchema - The new `ErrorSchema` based on the field change\n   * @param id - The id of the field that caused the change\n   */\n  onChange = (\n    formData: T | undefined,\n    newErrorSchema?: ErrorSchema<T>,\n    id?: string\n  ) => {\n    const {\n      extraErrors,\n      omitExtraData,\n      liveOmit,\n      noValidate,\n      liveValidate,\n      onChange,\n    } = this.props;\n    const { schemaUtils, schema } = this.state;\n    if (isObject(formData) || Array.isArray(formData)) {\n      const newState = this.getStateFromProps(this.props, formData);\n      formData = newState.formData;\n    }\n\n    const mustValidate = !noValidate && liveValidate;\n    let state: Partial<FormState<T, S, F>> = { formData, schema };\n    let newFormData = formData;\n\n    if (omitExtraData === true && liveOmit === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, formData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        formData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, formData);\n\n      newFormData = this.getUsedFormData(formData, fieldNames);\n      state = {\n        formData: newFormData,\n      };\n    }\n\n    if (mustValidate) {\n      const schemaValidation = this.validate(newFormData);\n      let errors = schemaValidation.errors;\n      let errorSchema = schemaValidation.errorSchema;\n      const schemaValidationErrors = errors;\n      const schemaValidationErrorSchema = errorSchema;\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      state = {\n        formData: newFormData,\n        errors,\n        errorSchema,\n        schemaValidationErrors,\n        schemaValidationErrorSchema,\n      };\n    } else if (!noValidate && newErrorSchema) {\n      const errorSchema = extraErrors\n        ? (mergeObjects(\n            newErrorSchema,\n            extraErrors,\n            \"preventDuplicates\"\n          ) as ErrorSchema<T>)\n        : newErrorSchema;\n      state = {\n        formData: newFormData,\n        errorSchema: errorSchema,\n        errors: schemaUtils.getValidator().toErrorList(errorSchema),\n      };\n    }\n    this.setState(\n      state as FormState<T, S, F>,\n      () => onChange && onChange({ ...this.state, ...state }, id)\n    );\n  };\n\n  /** Callback function to handle when a field on the form is blurred. Calls the `onBlur` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was blurred\n   * @param data - The data associated with the field that was blurred\n   */\n  onBlur = (id: string, data: any) => {\n    const { onBlur } = this.props;\n    if (onBlur) {\n      onBlur(id, data);\n    }\n  };\n\n  /** Callback function to handle when a field on the form is focused. Calls the `onFocus` callback for the `Form` if it\n   * was provided.\n   *\n   * @param id - The unique `id` of the field that was focused\n   * @param data - The data associated with the field that was focused\n   */\n  onFocus = (id: string, data: any) => {\n    const { onFocus } = this.props;\n    if (onFocus) {\n      onFocus(id, data);\n    }\n  };\n\n  /** Callback function to handle when the form is submitted. First, it prevents the default event behavior. Nothing\n   * happens if the target and currentTarget of the event are not the same. It will omit any extra data in the\n   * `formData` in the state if `omitExtraData` is true. It will validate the resulting `formData`, reporting errors\n   * via the `onError()` callback unless validation is disabled. Finally it will add in any `extraErrors` and then call\n   * back the `onSubmit` callback if it was provided.\n   *\n   * @param event - The submit HTML form event\n   */\n  onSubmit = (event: React.FormEvent<any>) => {\n    event.preventDefault();\n    if (event.target !== event.currentTarget) {\n      return;\n    }\n\n    event.persist();\n    const { omitExtraData, extraErrors, noValidate, onSubmit } = this.props;\n    let { formData: newFormData } = this.state;\n    const { schema, schemaUtils } = this.state;\n\n    if (omitExtraData === true) {\n      const retrievedSchema = schemaUtils.retrieveSchema(schema, newFormData);\n      const pathSchema = schemaUtils.toPathSchema(\n        retrievedSchema,\n        \"\",\n        newFormData\n      );\n\n      const fieldNames = this.getFieldNames(pathSchema, newFormData);\n\n      newFormData = this.getUsedFormData(newFormData, fieldNames);\n    }\n\n    if (noValidate || this.validateForm()) {\n      // There are no errors generated through schema validation.\n      // Check for user provided errors and update state accordingly.\n      const errorSchema = extraErrors || {};\n      const errors = extraErrors\n        ? schemaUtils.getValidator().toErrorList(extraErrors)\n        : [];\n      this.setState(\n        {\n          formData: newFormData,\n          errors,\n          errorSchema,\n          schemaValidationErrors: [],\n          schemaValidationErrorSchema: {},\n        },\n        () => {\n          if (onSubmit) {\n            onSubmit(\n              { ...this.state, formData: newFormData, status: \"submitted\" },\n              event\n            );\n          }\n        }\n      );\n    }\n  };\n\n  /** Returns the registry for the form */\n  getRegistry(): Registry<T, S, F> {\n    const { schemaUtils } = this.state;\n    const { fields, templates, widgets, formContext } = getDefaultRegistry<\n      T,\n      S,\n      F\n    >();\n    return {\n      fields: { ...fields, ...this.props.fields },\n      templates: {\n        ...templates,\n        ...this.props.templates,\n        ButtonTemplates: {\n          ...templates.ButtonTemplates,\n          ...this.props.templates?.ButtonTemplates,\n        },\n      },\n      widgets: { ...widgets, ...this.props.widgets },\n      rootSchema: this.props.schema,\n      formContext: this.props.formContext || formContext,\n      schemaUtils,\n    };\n  }\n\n  /** Provides a function that can be used to programmatically submit the `Form` */\n  submit() {\n    if (this.formElement.current) {\n      this.formElement.current.dispatchEvent(\n        new CustomEvent(\"submit\", {\n          cancelable: true,\n        })\n      );\n      this.formElement.current.requestSubmit();\n    }\n  }\n\n  /** Attempts to focus on the field associated with the `error`. Uses the `property` field to compute path of the error\n   * field, then, using the `idPrefix` and `idSeparator` converts that path into an id. Then the input element with that\n   * id is attempted to be found using the `formElement` ref. If it is located, then it is focused.\n   *\n   * @param error - The error on which to focus\n   */\n  focusOnError(error: RJSFValidationError) {\n    const { idPrefix = \"root\", idSeparator = \"_\" } = this.props;\n    const { property } = error;\n    const path = _toPath(property);\n    if (path[0] === \"\") {\n      // Most of the time the `.foo` property results in the first element being empty, so replace it with the idPrefix\n      path[0] = idPrefix;\n    } else {\n      // Otherwise insert the idPrefix into the first location using unshift\n      path.unshift(idPrefix);\n    }\n\n    const elementId = path.join(idSeparator);\n    let field = this.formElement.current.elements[elementId];\n    if (!field) {\n      // if not an exact match, try finding an input starting with the element id (like radio buttons or checkboxes)\n      field = this.formElement.current.querySelector(`input[id^=${elementId}`);\n    }\n    if (field) {\n      field.focus();\n    }\n  }\n\n  /** Programmatically validate the form. If `onError` is provided, then it will be called with the list of errors the\n   * same way as would happen on form submission.\n   *\n   * @returns - True if the form is valid, false otherwise.\n   */\n  validateForm() {\n    const { extraErrors, focusOnFirstError, onError } = this.props;\n    const { formData } = this.state;\n    const { schemaUtils } = this.state;\n    const schemaValidation = this.validate(formData);\n    let errors = schemaValidation.errors;\n    let errorSchema = schemaValidation.errorSchema;\n    const schemaValidationErrors = errors;\n    const schemaValidationErrorSchema = errorSchema;\n    if (errors.length > 0) {\n      if (extraErrors) {\n        const merged = schemaUtils.mergeValidationData(\n          schemaValidation,\n          extraErrors\n        );\n        errorSchema = merged.errorSchema;\n        errors = merged.errors;\n      }\n      if (focusOnFirstError) {\n        this.focusOnError(schemaValidation.errors[0]);\n      }\n      this.setState(\n        {\n          errors,\n          errorSchema,\n          schemaValidationErrors,\n          schemaValidationErrorSchema,\n        },\n        () => {\n          if (onError) {\n            onError(errors);\n          } else {\n            console.error(\"Form validation failed\", errors);\n          }\n        }\n      );\n      return false;\n    }\n    return true;\n  }\n\n  /** Renders the `Form` fields inside the <form> | `tagName` or `_internalFormWrapper`, rendering any errors if\n   * needed along with the submit button or any children of the form.\n   */\n  render() {\n    const {\n      children,\n      id,\n      idPrefix,\n      idSeparator,\n      className = \"\",\n      tagName,\n      name,\n      method,\n      target,\n      action,\n      autoComplete,\n      enctype,\n      acceptcharset,\n      noHtml5Validate = false,\n      disabled = false,\n      readonly = false,\n      formContext,\n      showErrorList = \"top\",\n      _internalFormWrapper,\n    } = this.props;\n\n    const { schema, uiSchema, formData, errorSchema, idSchema } = this.state;\n    const registry = this.getRegistry();\n    const { SchemaField: _SchemaField } = registry.fields;\n    const { SubmitButton } = registry.templates.ButtonTemplates;\n    // The `semantic-ui` and `material-ui` themes have `_internalFormWrapper`s that take an `as` prop that is the\n    // PropTypes.elementType to use for the inner tag, so we'll need to pass `tagName` along if it is provided.\n    // NOTE, the `as` prop is native to `semantic-ui` and is emulated in the `material-ui` theme\n    const as = _internalFormWrapper ? tagName : undefined;\n    const FormTag = _internalFormWrapper || tagName || \"form\";\n\n    return (\n      <FormTag\n        className={className ? className : \"rjsf\"}\n        id={id}\n        name={name}\n        method={method}\n        target={target}\n        action={action}\n        autoComplete={autoComplete}\n        encType={enctype}\n        acceptCharset={acceptcharset}\n        noValidate={noHtml5Validate}\n        onSubmit={this.onSubmit}\n        as={as}\n        ref={this.formElement}\n      >\n        {showErrorList === \"top\" && this.renderErrors(registry)}\n        <_SchemaField\n          name=\"\"\n          schema={schema}\n          uiSchema={uiSchema}\n          errorSchema={errorSchema}\n          idSchema={idSchema}\n          idPrefix={idPrefix}\n          idSeparator={idSeparator}\n          formContext={formContext}\n          formData={formData}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onFocus={this.onFocus}\n          registry={registry}\n          disabled={disabled}\n          readonly={readonly}\n        />\n        {children ? (\n          children\n        ) : (\n          <SubmitButton uiSchema={uiSchema} registry={registry} />\n        )}\n        {showErrorList === \"bottom\" && this.renderErrors(registry)}\n      </FormTag>\n    );\n  }\n}\n","import React, { ForwardedRef, forwardRef } from \"react\";\n\nimport Form, { FormProps } from \"./components/Form\";\nimport { FormContextType, RJSFSchema, StrictRJSFSchema } from \"@rjsf/utils\";\n\n/** The properties for the `withTheme` function, essentially a subset of properties from the `FormProps` that can be\n * overridden while creating a theme\n */\nexport type ThemeProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> = Pick<\n  FormProps<T, S, F>,\n  \"fields\" | \"templates\" | \"widgets\" | \"_internalFormWrapper\"\n>;\n\n/** A Higher-Order component that creates a wrapper around a `Form` with the overrides from the `WithThemeProps` */\nexport default function withTheme<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(themeProps: ThemeProps<T, S, F>): React.ComponentType<FormProps<T, S, F>> {\n  return forwardRef(\n    (\n      { fields, widgets, templates, ...directProps }: FormProps<T, S, F>,\n      ref: ForwardedRef<Form<T, S, F>>\n    ) => {\n      fields = { ...themeProps?.fields, ...fields };\n      widgets = { ...themeProps?.widgets, ...widgets };\n      templates = {\n        ...themeProps?.templates,\n        ...templates,\n        ButtonTemplates: {\n          ...themeProps?.templates?.ButtonTemplates,\n          ...templates?.ButtonTemplates,\n        },\n      };\n\n      return (\n        <Form<T, S, F>\n          {...themeProps}\n          {...directProps}\n          fields={fields}\n          widgets={widgets}\n          templates={templates}\n          ref={ref}\n        />\n      );\n    }\n  );\n}\n"],"names":["generateRowId","nanoid","generateKeyedFormData","formData","Array","isArray","map","item","key","keyedToPlainFormData","keyedFormData","keyedItem","ArrayField","_Component","props","_this","call","this","_getNewFormDataRow","_this$props","schema","schemaUtils","registry","itemSchema","items","isFixedItems","allowAdditionalItems","additionalItems","getDefaultFormState","onAddClick","event","_handleAddClick","onAddIndexClick","index","onDropIndexClick","preventDefault","newErrorSchema","_this$props2","onChange","errorSchema","state","idx","i","parseInt","set","newKeyedFormData","filter","_","setState","updatedKeyedFormData","onReorderClick","newIndex","currentTarget","blur","_this$props3","_newKeyedFormData","slice","splice","onChangeForIndex","value","id","_extends2","_this$props4","_extends","onSelectChange","_this$props5","idSchema","undefined","$id","_props$formData","_inheritsLoose","getDerivedStateFromProps","nextProps","prevState","nextFormData","previousKeyedFormData","length","previousKeyedFormDatum","_proto","prototype","isItemRequired","type","includes","canAddItem","formItems","_this$props6","addable","getUiOptions","uiSchema","maxItems","newKeyedFormDataRow","push","render","_this$props7","ITEMS_KEY","uiOptions","UnsupportedFieldTemplate","getTemplate","React","reason","isMultiSelect","renderMultiSelect","isCustomWidget","renderCustomWidget","renderFixedArray","isFilesArray","renderFiles","renderNormalArray","_this2","_this$props8","_this$props8$uiSchema","name","_this$props8$disabled","disabled","_this$props8$readonly","readonly","_this$props8$autofocu","autofocus","_this$props8$required","required","onBlur","onFocus","idPrefix","_this$props8$idSepara","idSeparator","rawErrors","title","formContext","_schemaItems","isObject","itemsSchema","retrieveSchema","canAdd","arrayProps","itemCast","itemErrorSchema","itemIdSchema","toIdSchema","renderArrayFieldItem","canMoveUp","canMoveDown","itemData","itemUiSchema","totalItems","className","Template","createElement","_this$props9","_this$props9$disabled","_this$props9$readonly","_this$props9$autofocu","_this$props9$required","hideError","placeholder","_this$props9$formData","widgets","widget","options","_objectWithoutPropertiesLoose","_getUiOptions2","_excluded","Widget","getWidget","multiple","label","_this$props10","_this$props10$formDat","_this$props10$disable","_this$props10$readonl","_this$props10$autofoc","_this$props10$require","enumOptions","optionsList","_getUiOptions3$widget","_getUiOptions3","_excluded2","_this$props11","_this$props11$disable","_this$props11$readonl","_this$props11$autofoc","_this$props11$require","_this$props11$formDat","_getUiOptions4$widget","_getUiOptions4","_excluded3","_this3","_this$props12","_this$props12$uiSchem","_this$props12$formDat","_this$props12$idSepar","_this$props12$disable","_this$props12$readonl","_this$props12$autofoc","_this$props12$require","_this$props$formData","itemSchemas","additionalSchema","concat","additional","canRemove","_props$canRemove","_props$canMoveUp","_props$canMoveDown","_this$props13","fields","ItemSchemaField","ArraySchemaField","SchemaField","_getUiOptions5$ordera","_getUiOptions5","orderable","_getUiOptions5$remova","removable","has","moveUp","moveDown","remove","toolbar","Object","keys","some","children","hasToolbar","hasMoveUp","hasMoveDown","hasRemove","get","Component","BooleanField","_getUiOptions$widget","_getUiOptions","oneOf","option","o","_schema$enum","schemaWithEnumNames","enums","enumNames","every","v","enum","UNKNOWN_OPTION_PREFIX","AnyOfField","onOptionChange","_this$state","selectedOption","retrievedOptions","intOption","newOption","newFormData","sanitizeDataForNewSchema","getFieldId","opt","getMatchingOption","componentDidUpdate","prevProps","newState","deepEquals","matchingOption","getClosestMatchingOption","optionSchema","baseType","_this$props5$disabled","_this$props5$errorSch","_SchemaField","_this$state2","autocomplete","_getUiOptions$title","ERRORS_KEY","fieldErrorSchema","omit","assign","optionLabel","toLowerCase","default","isEmpty","trailingCharMatcherWithPrefix","trailingCharMatcher","NumberField","useState","lastValue","_useState","setLastValue","StringField","handleChange","useCallback","charAt","processed","match","asNumber","replace","re","RegExp","ObjectField","_len","arguments","args","_key","apply","wasPropertyKeyModified","additionalProperties","onPropertyChange","addedByAdditionalProperties","_extends3","onDropPropertyClick","copiedFormData","unset","getAvailableKey","preferredKey","_getUiOptions$duplica","duplicateKeySuffixSeparator","newKey","onKeyChange","oldValue","_newKeys","_extends4","newKeys","keyValues","_ref","renamedObj","handleAddClick","apSchema","REF_KEY","$ref","ANY_OF_KEY","ONE_OF_KEY","getDefaultValue","isRequired","indexOf","orderedProperties","_this$props5$uiSchema","_this$props5$required","_this$props5$readonly","properties","schemaProperties","_schema$properties","description","orderProperties","order","err","style","color","message","JSON","stringify","templateProps","PROPERTIES_KEY","ADDITIONAL_PROPERTY_FLAG","fieldUiSchema","hidden","fieldIdSchema","content","COMPONENT_TYPES","array","boolean","integer","number","object","string","null","SchemaFieldRender","_schema","_idSchema","_props$wasPropertyKey","FieldTemplate","DescriptionFieldTemplate","FieldHelpTemplate","FieldErrorTemplate","fieldId","ID_KEY","mergeObjects","handleFieldComponentChange","FieldComponent","field","schemaType","getSchemaType","componentName","anyOf","getFieldComponent","Boolean","readOnly","uiSchemaHideError","displayLabel","getDisplayLabel","__errors","UI_OPTIONS_KEY","help","classNames","helpComponent","hasErrors","errorsComponent","errors","fieldProps","descriptionId","rawDescription","rawHelp","join","trim","_AnyOfField","_OneOfField","OneOfField","isReplacingAnyOrOneOf","Fragment","isSelect","_React$Component","shouldComponentUpdate","_props$disabled","_props$readonly","_props$autofocus","format","defaultWidget","hasWidget","_getUiOptions$placeho","NullField","useEffect","ArrayFieldDescriptionTemplate","_options$label","ArrayFieldItemTemplate","_registry$templates$B","templates","ButtonTemplates","MoveDownButton","MoveUpButton","RemoveButton","btnStyle","flex","paddingLeft","paddingRight","fontWeight","display","justifyContent","onClick","ArrayFieldTemplate","ArrayFieldTitleTemplate","AddButton","itemProps","TitleFieldTemplate","titleId","BaseInputTemplate","rest","console","log","Error","inputValue","inputProps","getInputProps","_onChange","target","emptyValue","_onBlur","_ref2","_onFocus","_ref3","autoFocus","list","examples","examplesId","ariaDescribedByIds","example","SubmitButton","getSubmitButtonOptions","submitText","_getSubmitButtonOptio2","_getSubmitButtonOptio","submitButtonProps","norender","IconButton","iconType","_props$iconType","icon","otherProps","DescriptionField","ErrorList","error","stack","Label","htmlFor","WrapIfAdditionalTemplate","_props$errors","errorId","elem","helpId","ObjectFieldTemplate","prop","canExpand","TitleField","UnsupportedField","defaultValue","border","rangeOptions","start","stop","pad","DateElement","range","select","rootId","SelectWidget","AltDateWidget","_ref2$time","time","_ref2$disabled","_ref2$readonly","_ref2$autofocus","_useReducer","useReducer","action","parseDateString","toDateString","values","readyForChange","property","_setState","handleSetNow","nowDateObj","Date","toJSON","handleClear","yearsRange","getFullYear","data","year","month","day","hour","minute","second","dateElementProps","elemProps","hideNowButton","href","hideClearButton","AltDateTimeWidget","_ref$time","CheckboxWidget","_ref$autofocus","schemaRequiresTrueValue","checked","handleBlur","handleFocus","CheckboxesWidget","_ref$options","_ref$options$inline","inline","enumDisabled","checkboxesValues","enumOptionsValueForIndex","enumOptionsIsSelected","itemDisabled","disabledCls","checkbox","optionId","String","enumOptionsSelectValue","enumOptionsDeselectValue","ColorWidget","DateWidget","DateTimeWidget","utcToLocal","localToUTC","EmailWidget","addNameToDataURL","dataURL","encodeURIComponent","processFile","file","size","Promise","resolve","reject","reader","window","FileReader","onerror","onload","_event$target","result","readAsDataURL","FilesInfo","filesInfo","fileInfo","extractFileInfo","dataURLs","dataURItoBlob","blob","FileWidget","extractedFilesInfo","useMemo","setFilesInfo","files","all","from","then","filesInfoEvent","newValue","accept","HiddenWidget","PasswordWidget","RadioWidget","Math","random","toString","radio","RangeWidget","getValue","selected","_ref$multiple","optEmptyVal","selectedIndexes","enumOptionsIndexForValue","TextareaWidget","_ref4","rows","TextWidget","URLWidget","UpDownWidget","getDefaultRegistry","MultiSchemaField","ErrorListTemplate","rootSchema","defaultProps","Form","formElement","getUsedFormData","_pick","getFieldNames","pathSchema","getAllPaths","_obj","acc","paths","forEach","newPaths","path","RJSF_ADDITONAL_PROPERTIES_FLAG","NAME_KEY","formValue","_get","_isEmpty","extraErrors","omitExtraData","liveOmit","noValidate","liveValidate","getStateFromProps","mustValidate","retrievedSchema","toPathSchema","fieldNames","schemaValidation","validate","schemaValidationErrors","schemaValidationErrorSchema","merged","mergeValidationData","getValidator","toErrorList","onSubmit","persist","validateForm","status","validator","createRef","UNSAFE_componentWillReceiveProps","nextState","inputFormData","edit","doesSchemaUtilsDiffer","createSchemaUtils","currentErrors","shouldRender","altSchemaUtils","customValidate","transformErrors","resolvedSchema","validateFormData","renderErrors","_this$state3","getRegistry","_this$props$templates","_getDefaultRegistry","submit","current","dispatchEvent","CustomEvent","cancelable","requestSubmit","focusOnError","_this$props4$idPrefix","_this$props4$idSepara","_toPath","unshift","elementId","elements","querySelector","focus","focusOnFirstError","onError","_this$props6$classNam","tagName","method","autoComplete","enctype","acceptcharset","_this$props6$noHtml5V","noHtml5Validate","_this$props6$disabled","_this$props6$readonly","_this$props6$showErro","showErrorList","_internalFormWrapper","_this$state4","encType","acceptCharset","as","ref","themeProps","forwardRef","_themeProps$templates","_templates","directProps"],"mappings":"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"}