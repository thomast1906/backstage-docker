{"version":3,"file":"utils.cjs.development.js","sources":["../src/isObject.ts","../src/allowAdditionalItems.ts","../src/asNumber.ts","../src/constants.ts","../src/getUiOptions.ts","../src/canExpand.ts","../src/deepEquals.ts","../src/findSchemaDefinition.ts","../src/schema/getMatchingOption.ts","../src/schema/getFirstMatchingOption.ts","../src/guessType.ts","../src/getSchemaType.ts","../src/mergeSchemas.ts","../src/schema/retrieveSchema.ts","../src/schema/getClosestMatchingOption.ts","../src/isFixedItems.ts","../src/mergeDefaultsWithFormData.ts","../src/mergeObjects.ts","../src/isConstant.ts","../src/schema/isSelect.ts","../src/schema/isMultiSelect.ts","../src/schema/getDefaultFormState.ts","../src/isCustomWidget.ts","../src/schema/isFilesArray.ts","../src/schema/getDisplayLabel.ts","../src/schema/mergeValidationData.ts","../src/schema/sanitizeDataForNewSchema.ts","../src/schema/toIdSchema.ts","../src/schema/toPathSchema.ts","../src/createSchemaUtils.ts","../src/dataURItoBlob.ts","../src/enumOptionsValueForIndex.ts","../src/enumOptionsDeselectValue.ts","../src/enumOptionsIsSelected.ts","../src/enumOptionsIndexForValue.ts","../src/enumOptionsSelectValue.ts","../src/ErrorSchemaBuilder.ts","../src/rangeSpec.ts","../src/getInputProps.ts","../src/getSubmitButtonOptions.ts","../src/getTemplate.ts","../src/getWidget.tsx","../src/hasWidget.ts","../src/idGenerators.ts","../src/localToUTC.ts","../src/toConstant.ts","../src/optionsList.ts","../src/orderProperties.ts","../src/pad.ts","../src/parseDateString.ts","../src/schemaRequiresTrueValue.ts","../src/shouldRender.ts","../src/toDateString.ts","../src/utcToLocal.ts"],"sourcesContent":["/** Determines whether a `thing` is an object for the purposes of RSJF. In this case, `thing` is an object if it has\n * the type `object` but is NOT null, an array or a File.\n *\n * @param thing - The thing to check to see whether it is an object\n * @returns - True if it is a non-null, non-array, non-File object\n */\nexport default function isObject(thing: any) {\n  if (typeof File !== \"undefined\" && thing instanceof File) {\n    return false;\n  }\n  if (typeof Date !== \"undefined\" && thing instanceof Date) {\n    return false;\n  }\n  return typeof thing === \"object\" && thing !== null && !Array.isArray(thing);\n}\n","import isObject from \"./isObject\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Checks the schema to see if it is allowing additional items, by verifying that `schema.additionalItems` is an\n * object. The user is warned in the console if `schema.additionalItems` has the value `true`.\n *\n * @param schema - The schema object to check\n * @returns - True if additional items is allowed, otherwise false\n */\nexport default function allowAdditionalItems<\n  S extends StrictRJSFSchema = RJSFSchema\n>(schema: S) {\n  if (schema.additionalItems === true) {\n    console.warn(\"additionalItems=true is currently not supported\");\n  }\n  return isObject(schema.additionalItems);\n}\n","/** Attempts to convert the string into a number. If an empty string is provided, then `undefined` is returned. If a\n * `null` is provided, it is returned. If the string ends in a `.` then the string is returned because the user may be\n * in the middle of typing a float number. If a number ends in a pattern like `.0`, `.20`, `.030`, string is returned\n * because the user may be typing number that will end in a non-zero digit. Otherwise, the string is wrapped by\n * `Number()` and if that result is not `NaN`, that number will be returned, otherwise the string `value` will be.\n *\n * @param value - The string or null value to convert to a number\n * @returns - The `value` converted to a number when appropriate, otherwise the `value`\n */\nexport default function asNumber(value: string | null) {\n  if (value === \"\") {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  if (/\\.$/.test(value)) {\n    // '3.' can't really be considered a number even if it parses in js. The\n    // user is most likely entering a float.\n    return value;\n  }\n  if (/\\.0$/.test(value)) {\n    // we need to return this as a string here, to allow for input like 3.07\n    return value;\n  }\n\n  if (/\\.\\d*0$/.test(value)) {\n    // It's a number, that's cool - but we need it as a string so it doesn't screw\n    // with the user when entering dollar amounts or other values (such as those with\n    // specific precision or number of significant digits)\n    return value;\n  }\n\n  const n = Number(value);\n  const valid = typeof n === \"number\" && !Number.isNaN(n);\n\n  return valid ? n : value;\n}\n","/** Below are the list of all the keys into various elements of a RJSFSchema or UiSchema that are used by the various\n * utility functions. In addition to those keys, there are the special `ADDITIONAL_PROPERTY_FLAG` and\n * `RJSF_ADDITONAL_PROPERTIES_FLAG` flags that is added to a schema under certain conditions by the `retrieveSchema()`\n * utility.\n */\nexport const ADDITIONAL_PROPERTY_FLAG = \"__additional_property\";\nexport const ADDITIONAL_PROPERTIES_KEY = \"additionalProperties\";\nexport const ALL_OF_KEY = \"allOf\";\nexport const ANY_OF_KEY = \"anyOf\";\nexport const CONST_KEY = \"const\";\nexport const DEFAULT_KEY = \"default\";\nexport const DEFINITIONS_KEY = \"definitions\";\nexport const DEPENDENCIES_KEY = \"dependencies\";\nexport const ENUM_KEY = \"enum\";\nexport const ERRORS_KEY = \"__errors\";\nexport const ID_KEY = \"$id\";\nexport const ITEMS_KEY = \"items\";\nexport const NAME_KEY = \"$name\";\nexport const ONE_OF_KEY = \"oneOf\";\nexport const PROPERTIES_KEY = \"properties\";\nexport const REQUIRED_KEY = \"required\";\nexport const SUBMIT_BTN_OPTIONS_KEY = \"submitButtonOptions\";\nexport const REF_KEY = \"$ref\";\nexport const RJSF_ADDITONAL_PROPERTIES_FLAG = \"__rjsf_additionalProperties\";\nexport const UI_FIELD_KEY = \"ui:field\";\nexport const UI_WIDGET_KEY = \"ui:widget\";\nexport const UI_OPTIONS_KEY = \"ui:options\";\n","import { UI_OPTIONS_KEY, UI_WIDGET_KEY } from \"./constants\";\nimport isObject from \"./isObject\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n  UiSchema,\n} from \"./types\";\n\n/** Get all passed options from ui:options, and ui:<optionName>, returning them in an object with the `ui:`\n * stripped off.\n *\n * @param [uiSchema={}] - The UI Schema from which to get any `ui:xxx` options\n * @returns - An object containing all the `ui:xxx` options with the stripped off\n */\nexport default function getUiOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UIOptionsType<T, S, F> {\n  return Object.keys(uiSchema)\n    .filter((key) => key.indexOf(\"ui:\") === 0)\n    .reduce((options, key) => {\n      const value = uiSchema[key];\n      if (key === UI_WIDGET_KEY && isObject(value)) {\n        console.error(\n          \"Setting options via ui:widget object is no longer supported, use ui:options instead\"\n        );\n        return options;\n      }\n      if (key === UI_OPTIONS_KEY && isObject(value)) {\n        return { ...options, ...value };\n      }\n      return { ...options, [key.substring(3)]: value };\n    }, {});\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n} from \"./types\";\nimport getUiOptions from \"./getUiOptions\";\n\n/** Checks whether the field described by `schema`, having the `uiSchema` and `formData` supports expanding. The UI for\n * the field can expand if it has additional properties, is not forced as non-expandable by the `uiSchema` and the\n * `formData` object doesn't already have `schema.maxProperties` elements.\n *\n * @param schema - The schema for the field that is being checked\n * @param [uiSchema={}] - The uiSchema for the field\n * @param [formData] - The formData for the field\n * @returns - True if the schema element has additionalProperties, is expandable, and not at the maxProperties limit\n */\nexport default function canExpand<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(schema: RJSFSchema, uiSchema: UiSchema<T, S, F> = {}, formData?: T) {\n  if (!schema.additionalProperties) {\n    return false;\n  }\n  const { expandable = true } = getUiOptions<T, S, F>(uiSchema);\n  if (expandable === false) {\n    return expandable;\n  }\n  // if ui:options.expandable was not explicitly set to false, we can add\n  // another property if we have not exceeded maxProperties yet\n  if (schema.maxProperties !== undefined && formData) {\n    return Object.keys(formData).length < schema.maxProperties;\n  }\n  return true;\n}\n","import isEqualWith from \"lodash/isEqualWith\";\n\n/** Implements a deep equals using the `lodash.isEqualWith` function, that provides a customized comparator that\n * assumes all functions are equivalent.\n *\n * @param a - The first element to compare\n * @param b - The second element to compare\n * @returns - True if the `a` and `b` are deeply equal, false otherwise\n */\nexport default function deepEquals(a: any, b: any): boolean {\n  return isEqualWith(a, b, (obj: any, other: any) => {\n    if (typeof obj === \"function\" && typeof other === \"function\") {\n      // Assume all functions are equivalent\n      // see https://github.com/rjsf-team/react-jsonschema-form/issues/255\n      return true;\n    }\n    return undefined; // fallback to default isEquals behavior\n  });\n}\n","import jsonpointer from \"jsonpointer\";\nimport omit from \"lodash/omit\";\n\nimport { REF_KEY } from \"./constants\";\nimport { GenericObjectType, RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Splits out the value at the `key` in `object` from the `object`, returning an array that contains in the first\n * location, the `object` minus the `key: value` and in the second location the `value`.\n *\n * @param key - The key from the object to extract\n * @param object - The object from which to extract the element\n * @returns - An array with the first value being the object minus the `key` element and the second element being the\n *      value from `object[key]`\n */\nexport function splitKeyElementFromObject(\n  key: string,\n  object: GenericObjectType\n) {\n  const value = object[key];\n  const remaining = omit(object, [key]);\n  return [remaining, value];\n}\n\n/** Given the name of a `$ref` from within a schema, using the `rootSchema`, look up and return the sub-schema using the\n * path provided by that reference. If `#` is not the first character of the reference, or the path does not exist in\n * the schema, then throw an Error. Otherwise return the sub-schema. Also deals with nested `$ref`s in the sub-schema.\n *\n * @param $ref - The ref string for which the schema definition is desired\n * @param [rootSchema={}] - The root schema in which to search for the definition\n * @returns - The sub-schema within the `rootSchema` which matches the `$ref` if it exists\n * @throws - Error indicating that no schema for that reference exists\n */\nexport default function findSchemaDefinition<\n  S extends StrictRJSFSchema = RJSFSchema\n>($ref?: string, rootSchema: S = {} as S): S {\n  let ref = $ref || \"\";\n  if (ref.startsWith(\"#\")) {\n    // Decode URI fragment representation.\n    ref = decodeURIComponent(ref.substring(1));\n  } else {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  const current: S = jsonpointer.get(rootSchema, ref);\n  if (current === undefined) {\n    throw new Error(`Could not find a definition for ${$ref}.`);\n  }\n  if (current[REF_KEY]) {\n    const [remaining, theRef] = splitKeyElementFromObject(REF_KEY, current);\n    const subSchema = findSchemaDefinition<S>(theRef, rootSchema);\n    if (Object.keys(remaining).length > 0) {\n      return { ...remaining, ...subSchema };\n    }\n    return subSchema;\n  }\n  return current;\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\n\n/** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n * Deprecated, use `getFirstMatchingOption()` instead.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @returns - The index of the matched option or 0 if none is available\n * @deprecated\n */\nexport default function getMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S\n): number {\n  // For performance, skip validating subschemas if formData is undefined. We just\n  // want to get the first option in that case.\n  if (formData === undefined) {\n    return 0;\n  }\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n\n    // If the schema describes an object then we need to add slightly more\n    // strict matching to the schema, because unless the schema uses the\n    // \"requires\" keyword, an object will match the schema as long as it\n    // doesn't have matching keys with a conflicting type. To do this we use an\n    // \"anyOf\" with an array of requires. This augmentation expresses that the\n    // schema should match if any of the keys in the schema are present on the\n    // object and pass validation.\n    if (option.properties) {\n      // Create an \"anyOf\" schema that requires at least one of the keys in the\n      // \"properties\" object\n      const requiresAnyOf = {\n        anyOf: Object.keys(option.properties).map((key) => ({\n          required: [key],\n        })),\n      };\n\n      let augmentedSchema;\n\n      // If the \"anyOf\" keyword already exists, wrap the augmentation in an \"allOf\"\n      if (option.anyOf) {\n        // Create a shallow clone of the option\n        const { ...shallowClone } = option;\n\n        if (!shallowClone.allOf) {\n          shallowClone.allOf = [];\n        } else {\n          // If \"allOf\" already exists, shallow clone the array\n          shallowClone.allOf = shallowClone.allOf.slice();\n        }\n\n        shallowClone.allOf.push(requiresAnyOf);\n\n        augmentedSchema = shallowClone;\n      } else {\n        augmentedSchema = Object.assign({}, option, requiresAnyOf);\n      }\n\n      // Remove the \"required\" field as it's likely that not all fields have\n      // been filled in yet, which will mean that the schema is not valid\n      delete augmentedSchema.required;\n\n      if (validator.isValid(augmentedSchema, formData, rootSchema)) {\n        return i;\n      }\n    } else if (validator.isValid(option, formData, rootSchema)) {\n      return i;\n    }\n  }\n  return 0;\n}\n","import getMatchingOption from \"./getMatchingOption\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\n\n/** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n * Always returns the first option if there is nothing that matches.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param formData - The current formData, if any, used to figure out a match\n * @param options - The list of options to find a matching options from\n * @param rootSchema - The root schema, used to primarily to look up `$ref`s\n * @returns - The index of the first matched option or 0 if none is available\n */\nexport default function getFirstMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  formData: T | undefined,\n  options: S[],\n  rootSchema: S\n): number {\n  return getMatchingOption<T, S, F>(validator, formData, options, rootSchema);\n}\n","/** Given a specific `value` attempts to guess the type of a schema element. In the case where we have to implicitly\n *  create a schema, it is useful to know what type to use based on the data we are defining.\n *\n * @param value - The value from which to guess the type\n * @returns - The best guess for the object type\n */\nexport default function guessType(value: any) {\n  if (Array.isArray(value)) {\n    return \"array\";\n  }\n  if (typeof value === \"string\") {\n    return \"string\";\n  }\n  if (value == null) {\n    return \"null\";\n  }\n  if (typeof value === \"boolean\") {\n    return \"boolean\";\n  }\n  if (!isNaN(value)) {\n    return \"number\";\n  }\n  if (typeof value === \"object\") {\n    return \"object\";\n  }\n  // Default to string if we can't figure it out\n  return \"string\";\n}\n","import guessType from \"./guessType\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Gets the type of a given `schema`. If the type is not explicitly defined, then an attempt is made to infer it from\n * other elements of the schema as follows:\n * - schema.const: Returns the `guessType()` of that value\n * - schema.enum: Returns `string`\n * - schema.properties: Returns `object`\n * - schema.additionalProperties: Returns `object`\n * - type is an array with a length of 2 and one type is 'null': Returns the other type\n *\n * @param schema - The schema for which to get the type\n * @returns - The type of the schema\n */\nexport default function getSchemaType<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): string | string[] | undefined {\n  let { type } = schema;\n\n  if (!type && schema.const) {\n    return guessType(schema.const);\n  }\n\n  if (!type && schema.enum) {\n    return \"string\";\n  }\n\n  if (!type && (schema.properties || schema.additionalProperties)) {\n    return \"object\";\n  }\n\n  if (Array.isArray(type) && type.length === 2 && type.includes(\"null\")) {\n    type = type.find((type) => type !== \"null\");\n  }\n\n  return type;\n}\n","import union from \"lodash/union\";\n\nimport { REQUIRED_KEY } from \"./constants\";\nimport getSchemaType from \"./getSchemaType\";\nimport isObject from \"./isObject\";\nimport { GenericObjectType } from \"./types\";\n\n/** Recursively merge deeply nested schemas. The difference between `mergeSchemas` and `mergeObjects` is that\n * `mergeSchemas` only concats arrays for values under the 'required' keyword, and when it does, it doesn't include\n * duplicate values.\n *\n * @param obj1 - The first schema object to merge\n * @param obj2 - The second schema object to merge\n * @returns - The merged schema object\n */\nexport default function mergeSchemas(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType\n) {\n  const acc = Object.assign({}, obj1); // Prevent mutation of source object.\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeSchemas(left, right);\n    } else if (\n      obj1 &&\n      obj2 &&\n      (getSchemaType(obj1) === \"object\" || getSchemaType(obj2) === \"object\") &&\n      key === REQUIRED_KEY &&\n      Array.isArray(left) &&\n      Array.isArray(right)\n    ) {\n      // Don't include duplicate values when merging 'required' fields.\n      acc[key] = union(left, right);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, acc);\n}\n","import get from \"lodash/get\";\nimport set from \"lodash/set\";\nimport mergeAllOf, { Options } from \"json-schema-merge-allof\";\n\nimport {\n  ADDITIONAL_PROPERTIES_KEY,\n  ADDITIONAL_PROPERTY_FLAG,\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  DEPENDENCIES_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from \"../constants\";\nimport findSchemaDefinition, {\n  splitKeyElementFromObject,\n} from \"../findSchemaDefinition\";\nimport guessType from \"../guessType\";\nimport isObject from \"../isObject\";\nimport mergeSchemas from \"../mergeSchemas\";\nimport {\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport getFirstMatchingOption from \"./getFirstMatchingOption\";\n\n/** Resolves a conditional block (if/else/then) by removing the condition and merging the appropriate conditional branch\n * with the rest of the schema\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that is used to detect valid schema conditions\n * @param schema - The schema for which resolving a condition is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns - A schema with the appropriate condition resolved\n */\nexport function resolveCondition<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema: S, formData?: T) {\n  const {\n    if: expression,\n    then,\n    else: otherwise,\n    ...resolvedSchemaLessConditional\n  } = schema;\n\n  const conditionalSchema = validator.isValid(\n    expression as S,\n    formData,\n    rootSchema\n  )\n    ? then\n    : otherwise;\n\n  if (conditionalSchema && typeof conditionalSchema !== \"boolean\") {\n    return retrieveSchema<T, S>(\n      validator,\n      mergeSchemas(\n        resolvedSchemaLessConditional,\n        retrieveSchema<T, S, F>(\n          validator,\n          conditionalSchema as S,\n          rootSchema,\n          formData\n        )\n      ) as S,\n      rootSchema,\n      formData\n    );\n  }\n  return retrieveSchema<T, S, F>(\n    validator,\n    resolvedSchemaLessConditional as S,\n    rootSchema,\n    formData\n  );\n}\n\n/** Resolves references and dependencies within a schema and its 'allOf' children.\n * Called internally by retrieveSchema.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references and dependencies resolved\n */\nexport function resolveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S = {} as S,\n  formData?: T\n): S {\n  if (REF_KEY in schema) {\n    return resolveReference<T, S, F>(validator, schema, rootSchema, formData);\n  }\n  if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return retrieveSchema<T, S, F>(\n      validator,\n      resolvedSchema,\n      rootSchema,\n      formData\n    );\n  }\n  if (ALL_OF_KEY in schema) {\n    return {\n      ...schema,\n      allOf: schema.allOf!.map((allOfSubschema) =>\n        retrieveSchema<T, S, F>(\n          validator,\n          allOfSubschema as S,\n          rootSchema,\n          formData\n        )\n      ),\n    };\n  }\n  // No $ref or dependencies attribute found, returning the original schema.\n  return schema;\n}\n\n/** Resolves references within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a reference is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its references resolved\n */\nexport function resolveReference<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  // Retrieve the referenced schema definition.\n  const $refSchema = findSchemaDefinition<S>(schema.$ref, rootSchema);\n  // Drop the $ref property of the source schema.\n  const { $ref, ...localSchema } = schema;\n  // Update referenced schema definition with local schema properties.\n  return retrieveSchema<T, S, F>(\n    validator,\n    { ...$refSchema, ...localSchema },\n    rootSchema,\n    formData\n  );\n}\n\n/** Creates new 'properties' items for each key in the `formData`\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used when necessary\n * @param theSchema - The schema for which the existing additional properties is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s * @param validator\n * @param [aFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The updated schema with additional properties stubbed\n */\nexport function stubExistingAdditionalProperties<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  rootSchema?: S,\n  aFormData?: T\n): S {\n  // Clone the schema so we don't ruin the consumer's original\n  const schema = {\n    ...theSchema,\n    properties: { ...theSchema.properties },\n  };\n\n  // make sure formData is an object\n  const formData: GenericObjectType =\n    aFormData && isObject(aFormData) ? aFormData : {};\n  Object.keys(formData).forEach((key) => {\n    if (key in schema.properties) {\n      // No need to stub, our schema already has the property\n      return;\n    }\n\n    let additionalProperties: S[\"additionalProperties\"] = {};\n    if (typeof schema.additionalProperties !== \"boolean\") {\n      if (REF_KEY in schema.additionalProperties!) {\n        additionalProperties = retrieveSchema<T, S, F>(\n          validator,\n          { $ref: get(schema.additionalProperties, [REF_KEY]) } as S,\n          rootSchema,\n          formData as T\n        );\n      } else if (\"type\" in schema.additionalProperties!) {\n        additionalProperties = { ...schema.additionalProperties };\n      } else if (\n        ANY_OF_KEY in schema.additionalProperties! ||\n        ONE_OF_KEY in schema.additionalProperties!\n      ) {\n        additionalProperties = {\n          type: \"object\",\n          ...schema.additionalProperties,\n        };\n      } else {\n        additionalProperties = { type: guessType(get(formData, [key])) };\n      }\n    } else {\n      additionalProperties = { type: guessType(get(formData, [key])) };\n    }\n\n    // The type of our new key should match the additionalProperties value;\n    schema.properties[key] = additionalProperties;\n    // Set our additional property flag so we know it was dynamically added\n    set(schema.properties, [key, ADDITIONAL_PROPERTY_FLAG], true);\n  });\n\n  return schema;\n}\n\n/** Retrieves an expanded schema that has had all of its conditions, additional properties, references and dependencies\n * resolved and merged into the `schema` given a `validator`, `rootSchema` and `rawFormData` that is used to do the\n * potentially recursive resolution.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which retrieving a schema is desired\n * @param [rootSchema={}] - The root schema that will be forwarded to all the APIs\n * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n */\nexport default function retrieveSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S = {} as S,\n  rawFormData?: T\n): S {\n  if (!isObject(schema)) {\n    return {} as S;\n  }\n  let resolvedSchema = resolveSchema<T, S, F>(\n    validator,\n    schema,\n    rootSchema,\n    rawFormData\n  );\n\n  if (\"if\" in schema) {\n    return resolveCondition<T, S, F>(\n      validator,\n      schema,\n      rootSchema,\n      rawFormData as T\n    );\n  }\n\n  const formData: GenericObjectType = rawFormData || {};\n\n  if (ALL_OF_KEY in schema) {\n    try {\n      resolvedSchema = mergeAllOf(resolvedSchema, {\n        deep: false,\n      } as Options) as S;\n    } catch (e) {\n      console.warn(\"could not merge subschemas in allOf:\\n\" + e);\n      const { allOf, ...resolvedSchemaWithoutAllOf } = resolvedSchema;\n      return resolvedSchemaWithoutAllOf as S;\n    }\n  }\n  const hasAdditionalProperties =\n    ADDITIONAL_PROPERTIES_KEY in resolvedSchema &&\n    resolvedSchema.additionalProperties !== false;\n  if (hasAdditionalProperties) {\n    return stubExistingAdditionalProperties<T, S, F>(\n      validator,\n      resolvedSchema,\n      rootSchema,\n      formData as T\n    );\n  }\n  return resolvedSchema;\n}\n\n/** Resolves dependencies within a schema and its 'allOf' children.\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependency is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with its dependencies resolved\n */\nexport function resolveDependencies<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  // Drop the dependencies from the source schema.\n  const { dependencies, ...remainingSchema } = schema;\n  let resolvedSchema: S = remainingSchema as S;\n  if (Array.isArray(resolvedSchema.oneOf)) {\n    resolvedSchema = resolvedSchema.oneOf[\n      getFirstMatchingOption<T, S, F>(\n        validator,\n        formData,\n        resolvedSchema.oneOf as S[],\n        rootSchema\n      )\n    ] as S;\n  } else if (Array.isArray(resolvedSchema.anyOf)) {\n    resolvedSchema = resolvedSchema.anyOf[\n      getFirstMatchingOption<T, S, F>(\n        validator,\n        formData,\n        resolvedSchema.anyOf as S[],\n        rootSchema\n      )\n    ] as S;\n  }\n  return processDependencies<T, S, F>(\n    validator,\n    dependencies,\n    resolvedSchema,\n    rootSchema,\n    formData\n  );\n}\n\n/** Processes all the `dependencies` recursively into the `resolvedSchema` as needed\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param dependencies - The set of dependencies that needs to be processed\n * @param resolvedSchema - The schema for which processing dependencies is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The schema with the `dependencies` resolved into it\n */\nexport function processDependencies<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  dependencies: S[\"dependencies\"],\n  resolvedSchema: S,\n  rootSchema: S,\n  formData?: T\n): S {\n  let schema = resolvedSchema;\n  // Process dependencies updating the local schema properties as appropriate.\n  for (const dependencyKey in dependencies) {\n    // Skip this dependency if its trigger property is not present.\n    if (get(formData, [dependencyKey]) === undefined) {\n      continue;\n    }\n    // Skip this dependency if it is not included in the schema (such as when dependencyKey is itself a hidden dependency.)\n    if (schema.properties && !(dependencyKey in schema.properties)) {\n      continue;\n    }\n    const [remainingDependencies, dependencyValue] = splitKeyElementFromObject(\n      dependencyKey,\n      dependencies as GenericObjectType\n    );\n    if (Array.isArray(dependencyValue)) {\n      schema = withDependentProperties<S>(schema, dependencyValue);\n    } else if (isObject(dependencyValue)) {\n      schema = withDependentSchema<T, S, F>(\n        validator,\n        schema,\n        rootSchema,\n        dependencyKey,\n        dependencyValue as S,\n        formData\n      );\n    }\n    return processDependencies<T, S, F>(\n      validator,\n      remainingDependencies,\n      schema,\n      rootSchema,\n      formData\n    );\n  }\n  return schema;\n}\n\n/** Updates a schema with additionally required properties added\n *\n * @param schema - The schema for which resolving a dependent properties is desired\n * @param [additionallyRequired] - An optional array of additionally required names\n * @returns - The schema with the additional required values merged in\n */\nexport function withDependentProperties<\n  S extends StrictRJSFSchema = RJSFSchema\n>(schema: S, additionallyRequired?: string[]) {\n  if (!additionallyRequired) {\n    return schema;\n  }\n  const required = Array.isArray(schema.required)\n    ? Array.from(new Set([...schema.required, ...additionallyRequired]))\n    : additionallyRequired;\n  return { ...schema, required: required };\n}\n\n/** Merges a dependent schema into the `schema` dealing with oneOfs and references\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be forwarded to all the APIs\n * @param schema - The schema for which resolving a dependent schema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the dependency\n * @param dependencyValue - The potentially dependent schema\n * @param formData- The current formData to assist retrieving a schema\n * @returns - The schema with the dependent schema resolved into it\n */\nexport function withDependentSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  dependencyValue: S,\n  formData?: T\n) {\n  const { oneOf, ...dependentSchema } = retrieveSchema<T, S, F>(\n    validator,\n    dependencyValue,\n    rootSchema,\n    formData\n  );\n  schema = mergeSchemas(schema, dependentSchema) as S;\n  // Since it does not contain oneOf, we return the original schema.\n  if (oneOf === undefined) {\n    return schema;\n  }\n  // Resolve $refs inside oneOf.\n  const resolvedOneOf = oneOf.map((subschema) => {\n    if (typeof subschema === \"boolean\" || !(REF_KEY in subschema)) {\n      return subschema;\n    }\n    return resolveReference<T, S, F>(\n      validator,\n      subschema as S,\n      rootSchema,\n      formData\n    );\n  });\n  return withExactlyOneSubschema<T, S, F>(\n    validator,\n    schema,\n    rootSchema,\n    dependencyKey,\n    resolvedOneOf,\n    formData\n  );\n}\n\n/** Returns a `schema` with the best choice from the `oneOf` options merged into it\n *\n * @param validator - An implementation of the `ValidatorType<T, S>` interface that will be used to validate oneOf options\n * @param schema - The schema for which resolving a oneOf subschema is desired\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @param dependencyKey - The key name of the oneOf dependency\n * @param oneOf - The list of schemas representing the oneOf options\n * @param [formData] - The current formData to assist retrieving a schema\n * @returns  The schema with the best choice of oneOf schemas merged into\n */\nexport function withExactlyOneSubschema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  rootSchema: S,\n  dependencyKey: string,\n  oneOf: S[\"oneOf\"],\n  formData?: T\n): S {\n  const validSubschemas = oneOf!.filter((subschema) => {\n    if (typeof subschema === \"boolean\" || !subschema || !subschema.properties) {\n      return false;\n    }\n    const { [dependencyKey]: conditionPropertySchema } = subschema.properties;\n    if (conditionPropertySchema) {\n      const conditionSchema: S = {\n        type: \"object\",\n        properties: {\n          [dependencyKey]: conditionPropertySchema,\n        },\n      } as S;\n      const { errors } = validator.validateFormData(formData, conditionSchema);\n      return errors.length === 0;\n    }\n    return false;\n  });\n\n  if (validSubschemas!.length !== 1) {\n    console.warn(\n      \"ignoring oneOf in dependencies because there isn't exactly one subschema that is valid\"\n    );\n    return schema;\n  }\n  const subschema: S = validSubschemas[0] as S;\n  const [dependentSubschema] = splitKeyElementFromObject(\n    dependencyKey,\n    subschema.properties as GenericObjectType\n  );\n  const dependentSchema = { ...subschema, properties: dependentSubschema };\n  return mergeSchemas(\n    schema,\n    retrieveSchema<T, S>(validator, dependentSchema, rootSchema, formData)\n  ) as S;\n}\n","import get from \"lodash/get\";\nimport has from \"lodash/has\";\nimport isObject from \"lodash/isObject\";\nimport isString from \"lodash/isString\";\nimport reduce from \"lodash/reduce\";\nimport times from \"lodash/times\";\n\nimport getFirstMatchingOption from \"./getFirstMatchingOption\";\nimport retrieveSchema from \"./retrieveSchema\";\nimport { ONE_OF_KEY, REF_KEY } from \"../constants\";\nimport guessType from \"../guessType\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\n\n/** A junk option used to determine when the getFirstMatchingOption call really matches an option rather than returning\n * the first item\n */\nexport const JUNK_OPTION: StrictRJSFSchema = {\n  type: \"object\",\n  properties: {\n    __not_really_there__: {\n      type: \"number\",\n    },\n  },\n};\n\n/** Recursive function that calculates the score of a `formData` against the given `schema`. The computation is fairly\n * simple. Initially the total score is 0. When `schema.properties` object exists, then all the `key/value` pairs within\n * the object are processed as follows after obtaining the formValue from `formData` using the `key`:\n * - If the `value` contains a `$ref`, `calculateIndexScore()` is called recursively with the formValue and the new\n *   schema that is the result of the ref in the schema being resolved and that sub-schema's resulting score is added to\n *   the total.\n * - If the `value` contains a `oneOf` and there is a formValue, then score based on the index returned from calling\n *   `getClosestMatchingOption()` of that oneOf.\n * - If the type of the `value` is 'object', `calculateIndexScore()` is called recursively with the formValue and the\n *   `value` itself as the sub-schema, and the score is added to the total.\n * - If the type of the `value` matches the guessed-type of the `formValue`, the score is incremented by 1, UNLESS the\n *   value has a `default` or `const`. In those case, if the `default` or `const` and the `formValue` match, the score\n *   is incremented by another 1 otherwise it is decremented by 1.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param schema - The schema for which the score is being calculated\n * @param formData - The form data associated with the schema, used to calculate the score\n * @returns - The score a schema against the formData\n */\nexport function calculateIndexScore<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  schema?: S,\n  formData: any = {}\n): number {\n  let totalScore = 0;\n  if (schema) {\n    if (isObject(schema.properties)) {\n      totalScore += reduce(\n        schema.properties,\n        (score, value, key) => {\n          const formValue = get(formData, key);\n          if (typeof value === \"boolean\") {\n            return score;\n          }\n          if (has(value, REF_KEY)) {\n            const newSchema = retrieveSchema<T, S, F>(\n              validator,\n              value as S,\n              rootSchema,\n              formValue\n            );\n            return (\n              score +\n              calculateIndexScore<T, S, F>(\n                validator,\n                rootSchema,\n                newSchema,\n                formValue || {}\n              )\n            );\n          }\n          if (has(value, ONE_OF_KEY) && formValue) {\n            return (\n              score +\n              getClosestMatchingOption<T, S, F>(\n                validator,\n                rootSchema,\n                formValue,\n                get(value, ONE_OF_KEY) as S[]\n              )\n            );\n          }\n          if (value.type === \"object\") {\n            return (\n              score +\n              calculateIndexScore<T, S, F>(\n                validator,\n                rootSchema,\n                value as S,\n                formValue || {}\n              )\n            );\n          }\n          if (value.type === guessType(formValue)) {\n            // If the types match, then we bump the score by one\n            let newScore = score + 1;\n            if (value.default) {\n              // If the schema contains a readonly default value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.default ? 1 : -1;\n            } else if (value.const) {\n              // If the schema contains a const value score the value that matches the default higher and\n              // any non-matching value lower\n              newScore += formValue === value.const ? 1 : -1;\n            }\n            // TODO eventually, deal with enums/arrays\n            return newScore;\n          }\n          return score;\n        },\n        0\n      );\n    } else if (isString(schema.type) && schema.type === guessType(formData)) {\n      totalScore += 1;\n    }\n  }\n  return totalScore;\n}\n\n/** Determines which of the given `options` provided most closely matches the `formData`. Using\n * `getFirstMatchingOption()` to match two schemas that differ only by the readOnly, default or const value of a field\n * based on the `formData` and returns 0 when there is no match. Rather than passing in all the `options` at once to\n * this utility, instead an array of valid option indexes is created by iterating over the list of options, call\n * `getFirstMatchingOptions` with a list of one junk option and one good option, seeing if the good option is considered\n * matched.\n *\n * Once the list of valid indexes is created, if there is only one valid index, just return it. Otherwise, if there are\n * no valid indexes, then fill the valid indexes array with the indexes of all the options. Next, the index of the\n * option with the highest score is determined by iterating over the list of valid options, calling\n * `calculateIndexScore()` on each, comparing it against the current best score, and returning the index of the one that\n * eventually has the best score.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param formData - The form data associated with the schema\n * @param options - The list of options that can be selected from\n * @param [selectedOption=-1] - The index of the currently selected option, defaulted to -1 if not specified\n * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n */\nexport default function getClosestMatchingOption<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  formData: T | undefined,\n  options: S[],\n  selectedOption = -1\n): number {\n  // Reduce the array of options down to a list of the indexes that are considered matching options\n  const allValidIndexes = options.reduce(\n    (validList: number[], option, index: number) => {\n      const testOptions: S[] = [JUNK_OPTION as S, option];\n      const match = getFirstMatchingOption<T, S, F>(\n        validator,\n        formData,\n        testOptions,\n        rootSchema\n      );\n      // The match is the real option, so add its index to list of valid indexes\n      if (match === 1) {\n        validList.push(index);\n      }\n      return validList;\n    },\n    []\n  );\n\n  // There is only one valid index, so return it!\n  if (allValidIndexes.length === 1) {\n    return allValidIndexes[0];\n  }\n  if (!allValidIndexes.length) {\n    // No indexes were valid, so we'll score all the options, add all the indexes\n    times(options.length, (i) => allValidIndexes.push(i));\n  }\n  type BestType = { bestIndex: number; bestScore: number };\n  // Score all the options in the list of valid indexes and return the index with the best score\n  const { bestIndex }: BestType = allValidIndexes.reduce(\n    (scoreData: BestType, index: number) => {\n      const { bestScore } = scoreData;\n      let option = options[index];\n      if (has(option, REF_KEY)) {\n        option = retrieveSchema<T, S, F>(\n          validator,\n          option,\n          rootSchema,\n          formData\n        );\n      }\n      const score = calculateIndexScore(\n        validator,\n        rootSchema,\n        option,\n        formData\n      );\n      if (score > bestScore) {\n        return { bestIndex: index, bestScore: score };\n      }\n      return scoreData;\n    },\n    { bestIndex: selectedOption, bestScore: 0 }\n  );\n  return bestIndex;\n}\n","import isObject from \"./isObject\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Detects whether the given `schema` contains fixed items. This is the case when `schema.items` is a non-empty array\n * that only contains objects.\n *\n * @param schema - The schema in which to check for fixed items\n * @returns - True if there are fixed items in the schema, false otherwise\n */\nexport default function isFixedItems<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  return (\n    Array.isArray(schema.items) &&\n    schema.items.length > 0 &&\n    schema.items.every((item) => isObject(item))\n  );\n}\n","import get from \"lodash/get\";\n\nimport isObject from \"./isObject\";\nimport { GenericObjectType } from \"../src\";\n\n/** Merges the `defaults` object of type `T` into the `formData` of type `T`\n *\n * When merging defaults and form data, we want to merge in this specific way:\n * - objects are deeply merged\n * - arrays are merged in such a way that:\n *   - when the array is set in form data, only array entries set in form data\n *     are deeply merged; additional entries from the defaults are ignored\n *   - when the array is not set in form data, the default is copied over\n * - scalars are overwritten/set by form data\n *\n * @param [defaults] - The defaults to merge\n * @param [formData] - The form data into which the defaults will be merged\n * @returns - The resulting merged form data with defaults\n */\nexport default function mergeDefaultsWithFormData<T = any>(\n  defaults?: T,\n  formData?: T\n): T | undefined {\n  if (Array.isArray(formData)) {\n    const defaultsArray = Array.isArray(defaults) ? defaults : [];\n    const mapped = formData.map((value, idx) => {\n      if (defaultsArray[idx]) {\n        return mergeDefaultsWithFormData<any>(defaultsArray[idx], value);\n      }\n      return value;\n    });\n    return mapped as unknown as T;\n  }\n  if (isObject(formData)) {\n    const acc: { [key in keyof T]: any } = Object.assign({}, defaults); // Prevent mutation of source object.\n    return Object.keys(formData as GenericObjectType).reduce((acc, key) => {\n      acc[key as keyof T] = mergeDefaultsWithFormData<T>(\n        defaults ? get(defaults, key) : {},\n        get(formData, key)\n      );\n      return acc;\n    }, acc);\n  }\n  return formData;\n}\n","import isObject from \"./isObject\";\nimport { GenericObjectType } from \"./types\";\n\n/** Recursively merge deeply nested objects.\n *\n * @param obj1 - The first object to merge\n * @param obj2 - The second object to merge\n * @param [concatArrays=false] - Optional flag that, when true, will cause arrays to be concatenated. Use\n *          \"preventDuplicates\" to merge arrays in a manner that prevents any duplicate entries from being merged.\n *          NOTE: Uses shallow comparison for the duplicate checking.\n * @returns - A new object that is the merge of the two given objects\n */\nexport default function mergeObjects(\n  obj1: GenericObjectType,\n  obj2: GenericObjectType,\n  concatArrays: boolean | \"preventDuplicates\" = false\n) {\n  return Object.keys(obj2).reduce((acc, key) => {\n    const left = obj1 ? obj1[key] : {},\n      right = obj2[key];\n    if (obj1 && key in obj1 && isObject(right)) {\n      acc[key] = mergeObjects(left, right, concatArrays);\n    } else if (concatArrays && Array.isArray(left) && Array.isArray(right)) {\n      let toMerge = right;\n      if (concatArrays === \"preventDuplicates\") {\n        toMerge = right.reduce((result, value) => {\n          if (!left.includes(value)) {\n            result.push(value);\n          }\n          return result;\n        }, []);\n      }\n      acc[key] = left.concat(toMerge);\n    } else {\n      acc[key] = right;\n    }\n    return acc;\n  }, Object.assign({}, obj1)); // Prevent mutation of source object.\n}\n","import { CONST_KEY } from \"./constants\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** This function checks if the given `schema` matches a single constant value. This happens when either the schema has\n * an `enum` array with a single value or there is a `const` defined.\n *\n * @param schema - The schema for a field\n * @returns - True if the `schema` has a single constant value, false otherwise\n */\nexport default function isConstant<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  return (\n    (Array.isArray(schema.enum) && schema.enum.length === 1) ||\n    CONST_KEY in schema\n  );\n}\n","import isConstant from \"../isConstant\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Checks to see if the `schema` combination represents a select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which check for a select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a select, otherwise false\n */\nexport default function isSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, theSchema: S, rootSchema: S = {} as S) {\n  const schema = retrieveSchema<T, S, F>(\n    validator,\n    theSchema,\n    rootSchema,\n    undefined\n  );\n  const altSchemas = schema.oneOf || schema.anyOf;\n  if (Array.isArray(schema.enum)) {\n    return true;\n  }\n  if (Array.isArray(altSchemas)) {\n    return altSchemas.every(\n      (altSchemas) => typeof altSchemas !== \"boolean\" && isConstant(altSchemas)\n    );\n  }\n  return false;\n}\n","import {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\n\nimport isSelect from \"./isSelect\";\n\n/** Checks to see if the `schema` combination represents a multi-select\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for a multi-select flag is desired\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema contains a multi-select, otherwise false\n */\nexport default function isMultiSelect<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, schema: S, rootSchema?: S) {\n  if (\n    !schema.uniqueItems ||\n    !schema.items ||\n    typeof schema.items === \"boolean\"\n  ) {\n    return false;\n  }\n  return isSelect<T, S, F>(validator, schema.items as S, rootSchema);\n}\n","import get from \"lodash/get\";\nimport isEmpty from \"lodash/isEmpty\";\n\nimport {\n  ANY_OF_KEY,\n  DEFAULT_KEY,\n  DEPENDENCIES_KEY,\n  PROPERTIES_KEY,\n  ONE_OF_KEY,\n  REF_KEY,\n} from \"../constants\";\nimport findSchemaDefinition from \"../findSchemaDefinition\";\nimport getClosestMatchingOption from \"./getClosestMatchingOption\";\nimport getSchemaType from \"../getSchemaType\";\nimport isObject from \"../isObject\";\nimport isFixedItems from \"../isFixedItems\";\nimport mergeDefaultsWithFormData from \"../mergeDefaultsWithFormData\";\nimport mergeObjects from \"../mergeObjects\";\nimport {\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport isMultiSelect from \"./isMultiSelect\";\nimport retrieveSchema, { resolveDependencies } from \"./retrieveSchema\";\n\n/** Enum that indicates how `schema.additionalItems` should be handled by the `getInnerSchemaForArrayItem()` function.\n */\nexport enum AdditionalItemsHandling {\n  Ignore,\n  Invert,\n  Fallback,\n}\n\n/** Given a `schema` will return an inner schema that for an array item. This is computed differently based on the\n * `additionalItems` enum and the value of `idx`. There are four possible returns:\n * 1. If `idx` is >= 0, then if `schema.items` is an array the `idx`th element of the array is returned if it is a valid\n *    index and not a boolean, otherwise it falls through to 3.\n * 2. If `schema.items` is not an array AND truthy and not a boolean, then `schema.items` is returned since it actually\n *    is a schema, otherwise it falls through to 3.\n * 3. If `additionalItems` is not `AdditionalItemsHandling.Ignore` and `schema.additionalItems` is an object, then\n *    `schema.additionalItems` is returned since it actually is a schema, otherwise it falls through to 4.\n * 4. {} is returned representing an empty schema\n *\n * @param schema - The schema from which to get the particular item\n * @param [additionalItems=AdditionalItemsHandling.Ignore] - How do we want to handle additional items?\n * @param [idx=-1] - Index, if non-negative, will be used to return the idx-th element in a `schema.items` array\n * @returns - The best fit schema object from the `schema` given the `additionalItems` and `idx` modifiers\n */\nexport function getInnerSchemaForArrayItem<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  schema: S,\n  additionalItems: AdditionalItemsHandling = AdditionalItemsHandling.Ignore,\n  idx = -1\n): S {\n  if (idx >= 0) {\n    if (Array.isArray(schema.items) && idx < schema.items.length) {\n      const item = schema.items[idx];\n      if (typeof item !== \"boolean\") {\n        return item as S;\n      }\n    }\n  } else if (\n    schema.items &&\n    !Array.isArray(schema.items) &&\n    typeof schema.items !== \"boolean\"\n  ) {\n    return schema.items as S;\n  }\n  if (\n    additionalItems !== AdditionalItemsHandling.Ignore &&\n    isObject(schema.additionalItems)\n  ) {\n    return schema.additionalItems as S;\n  }\n  return {} as S;\n}\n\n/** Either add `computedDefault` at `key` into `obj` or not add it based on its value and the value of\n * `includeUndefinedValues`. Generally undefined `computedDefault` values are added only when `includeUndefinedValues`\n * is either true or \"excludeObjectChildren\". If `includeUndefinedValues` is false, then non-undefined and\n * non-empty-object values will be added.\n *\n * @param obj - The object into which the computed default may be added\n * @param key - The key into the object at which the computed default may be added\n * @param computedDefault - The computed default value that maybe should be added to the obj\n * @param includeUndefinedValues - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties. If \"allowEmptyObject\", prevents undefined\n *          values in this object while allow the object itself to be empty and passing `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @param requiredFields - The list of fields that are required\n */\nfunction maybeAddDefaultToObject<T = any>(\n  obj: GenericObjectType,\n  key: string,\n  computedDefault: T | T[] | undefined,\n  includeUndefinedValues: boolean | \"excludeObjectChildren\",\n  requiredFields: string[] = []\n) {\n  if (includeUndefinedValues) {\n    obj[key] = computedDefault;\n  } else if (isObject(computedDefault)) {\n    // Store computedDefault if it's a non-empty object (e.g. not {})\n    if (!isEmpty(computedDefault) || requiredFields.includes(key)) {\n      obj[key] = computedDefault;\n    }\n  } else if (computedDefault !== undefined) {\n    // Store computedDefault if it's a defined primitive (e.g. true)\n    obj[key] = computedDefault;\n  }\n}\n\n/** Computes the defaults for the current `schema` given the `rawFormData` and `parentDefaults` if any. This drills into\n * each level of the schema, recursively, to fill out every level of defaults provided by the schema.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be used when necessary\n * @param rawSchema - The schema for which the default state is desired\n * @param [parentDefaults] - Any defaults provided by the parent field in the schema\n * @param [rootSchema] - The options root schema, used to primarily to look up `$ref`s\n * @param [rawFormData] - The current formData, if any, onto which to provide any missing defaults\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport function computeDefaults<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rawSchema: S,\n  parentDefaults?: T,\n  rootSchema: S = {} as S,\n  rawFormData?: T,\n  includeUndefinedValues: boolean | \"excludeObjectChildren\" = false\n): T | T[] | undefined {\n  const formData: T = (isObject(rawFormData) ? rawFormData : {}) as T;\n  let schema: S = isObject(rawSchema) ? rawSchema : ({} as S);\n  // Compute the defaults recursively: give highest priority to deepest nodes.\n  let defaults: T | T[] | undefined = parentDefaults;\n  if (isObject(defaults) && isObject(schema.default)) {\n    // For object defaults, only override parent defaults that are defined in\n    // schema.default.\n    defaults = mergeObjects(\n      defaults!,\n      schema.default as GenericObjectType\n    ) as T;\n  } else if (DEFAULT_KEY in schema) {\n    defaults = schema.default as unknown as T;\n  } else if (REF_KEY in schema) {\n    // Use referenced schema defaults for this node.\n    const refSchema = findSchemaDefinition<S>(schema[REF_KEY]!, rootSchema);\n    return computeDefaults<T, S, F>(\n      validator,\n      refSchema,\n      defaults,\n      rootSchema,\n      formData as T,\n      includeUndefinedValues\n    );\n  } else if (DEPENDENCIES_KEY in schema) {\n    const resolvedSchema = resolveDependencies<T, S, F>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return computeDefaults<T, S, F>(\n      validator,\n      resolvedSchema,\n      defaults,\n      rootSchema,\n      formData as T,\n      includeUndefinedValues\n    );\n  } else if (isFixedItems(schema)) {\n    defaults = (schema.items! as S[]).map((itemSchema: S, idx: number) =>\n      computeDefaults<T, S>(\n        validator,\n        itemSchema,\n        Array.isArray(parentDefaults) ? parentDefaults[idx] : undefined,\n        rootSchema,\n        formData as T,\n        includeUndefinedValues\n      )\n    ) as T[];\n  } else if (ONE_OF_KEY in schema) {\n    if (schema.oneOf!.length === 0) {\n      return undefined;\n    }\n    schema = schema.oneOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.oneOf as S[],\n        0\n      )\n    ] as S;\n  } else if (ANY_OF_KEY in schema) {\n    if (schema.anyOf!.length === 0) {\n      return undefined;\n    }\n    schema = schema.anyOf![\n      getClosestMatchingOption<T, S, F>(\n        validator,\n        rootSchema,\n        isEmpty(formData) ? undefined : formData,\n        schema.anyOf as S[],\n        0\n      )\n    ] as S;\n  }\n\n  // Not defaults defined for this node, fallback to generic typed ones.\n  if (typeof defaults === \"undefined\") {\n    defaults = schema.default as unknown as T;\n  }\n\n  switch (getSchemaType<S>(schema)) {\n    // We need to recur for object schema inner default values.\n    case \"object\": {\n      const objectDefaults = Object.keys(schema.properties || {}).reduce(\n        (acc: GenericObjectType, key: string) => {\n          // Compute the defaults for this node, with the parent defaults we might\n          // have from a previous run: defaults[key].\n          const computedDefault = computeDefaults<T, S, F>(\n            validator,\n            get(schema, [PROPERTIES_KEY, key]),\n            get(defaults, [key]),\n            rootSchema,\n            get(formData, [key]),\n            includeUndefinedValues === true\n          );\n          maybeAddDefaultToObject<T>(\n            acc,\n            key,\n            computedDefault,\n            includeUndefinedValues,\n            schema.required\n          );\n          return acc;\n        },\n        {}\n      ) as T;\n      if (schema.additionalProperties && isObject(defaults)) {\n        const additionalPropertiesSchema = isObject(schema.additionalProperties)\n          ? schema.additionalProperties\n          : {}; // as per spec additionalProperties may be either schema or boolean\n        Object.keys(defaults as GenericObjectType)\n          .filter((key) => !schema.properties || !schema.properties[key])\n          .forEach((key) => {\n            const computedDefault = computeDefaults(\n              validator,\n              additionalPropertiesSchema as S,\n              get(defaults, [key]),\n              rootSchema,\n              get(formData, [key]),\n              includeUndefinedValues === true\n            );\n            maybeAddDefaultToObject<T>(\n              objectDefaults as GenericObjectType,\n              key,\n              computedDefault,\n              includeUndefinedValues\n            );\n          });\n      }\n      return objectDefaults;\n    }\n    case \"array\":\n      // Inject defaults into existing array defaults\n      if (Array.isArray(defaults)) {\n        defaults = defaults.map((item, idx) => {\n          const schemaItem: S = getInnerSchemaForArrayItem<S>(\n            schema,\n            AdditionalItemsHandling.Fallback,\n            idx\n          );\n          return computeDefaults<T, S, F>(\n            validator,\n            schemaItem,\n            item,\n            rootSchema\n          );\n        }) as T[];\n      }\n\n      // Deeply inject defaults into already existing form data\n      if (Array.isArray(rawFormData)) {\n        const schemaItem: S = getInnerSchemaForArrayItem<S>(schema);\n        defaults = rawFormData.map((item: T, idx: number) => {\n          return computeDefaults<T, S, F>(\n            validator,\n            schemaItem,\n            get(defaults, [idx]),\n            rootSchema,\n            item\n          );\n        }) as T[];\n      }\n      if (schema.minItems) {\n        if (!isMultiSelect<T, S, F>(validator, schema, rootSchema)) {\n          const defaultsLength = Array.isArray(defaults) ? defaults.length : 0;\n          if (schema.minItems > defaultsLength) {\n            const defaultEntries: T[] = (defaults || []) as T[];\n            // populate the array with the defaults\n            const fillerSchema: S = getInnerSchemaForArrayItem<S>(\n              schema,\n              AdditionalItemsHandling.Invert\n            );\n            const fillerDefault = fillerSchema.default;\n            const fillerEntries: T[] = new Array(\n              schema.minItems - defaultsLength\n            ).fill(\n              computeDefaults<any, S, F>(\n                validator,\n                fillerSchema,\n                fillerDefault,\n                rootSchema\n              )\n            ) as T[];\n            // then fill up the rest with either the item default or empty, up to minItems\n            return defaultEntries.concat(fillerEntries);\n          }\n        }\n        return defaults ? defaults : [];\n      }\n  }\n  return defaults;\n}\n\n/** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n * computed to have defaults provided in the `schema`.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param theSchema - The schema for which the default state is desired\n * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n *          If \"excludeObjectChildren\", cause undefined values for this object and pass `includeUndefinedValues` as\n *          false when computing defaults for any nested object properties.\n * @returns - The resulting `formData` with all the defaults provided\n */\nexport default function getDefaultFormState<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  theSchema: S,\n  formData?: T,\n  rootSchema?: S,\n  includeUndefinedValues: boolean | \"excludeObjectChildren\" = false\n) {\n  if (!isObject(theSchema)) {\n    throw new Error(\"Invalid schema: \" + theSchema);\n  }\n  const schema = retrieveSchema<T, S, F>(\n    validator,\n    theSchema,\n    rootSchema,\n    formData\n  );\n  const defaults = computeDefaults<T, S, F>(\n    validator,\n    schema,\n    undefined,\n    rootSchema,\n    formData,\n    includeUndefinedValues\n  );\n  if (\n    typeof formData === \"undefined\" ||\n    formData === null ||\n    (typeof formData === \"number\" && isNaN(formData))\n  ) {\n    // No form data? Use schema defaults.\n    return defaults;\n  }\n  if (isObject(formData)) {\n    return mergeDefaultsWithFormData<T>(defaults as T, formData);\n  }\n  if (Array.isArray(formData)) {\n    return mergeDefaultsWithFormData<T[]>(defaults as T[], formData);\n  }\n  return formData;\n}\n","import getUiOptions from \"./getUiOptions\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n} from \"./types\";\n\n/** Checks to see if the `uiSchema` contains the `widget` field and that the widget is not `hidden`\n *\n * @param uiSchema - The UI Schema from which to detect if it is customized\n * @returns - True if the `uiSchema` describes a custom widget, false otherwise\n */\nexport default function isCustomWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}) {\n  return (\n    // TODO: Remove the `&& uiSchema['ui:widget'] !== 'hidden'` once we support hidden widgets for arrays.\n    // https://react-jsonschema-form.readthedocs.io/en/latest/usage/widgets/#hidden-widgets\n    \"widget\" in getUiOptions<T, S, F>(uiSchema) &&\n    getUiOptions<T, S, F>(uiSchema)[\"widget\"] !== \"hidden\"\n  );\n}\n","import { UI_WIDGET_KEY } from \"../constants\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which check for array of files flag is desired\n * @param [uiSchema={}] - The UI schema from which to check the widget\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if schema/uiSchema contains an array of files, otherwise false\n */\nexport default function isFilesArray<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n) {\n  if (uiSchema[UI_WIDGET_KEY] === \"files\") {\n    return true;\n  }\n  if (schema.items) {\n    const itemsSchema = retrieveSchema<T, S, F>(\n      validator,\n      schema.items as S,\n      rootSchema\n    );\n    return itemsSchema.type === \"string\" && itemsSchema.format === \"data-url\";\n  }\n  return false;\n}\n","import { UI_FIELD_KEY, UI_WIDGET_KEY } from \"../constants\";\nimport getSchemaType from \"../getSchemaType\";\nimport getUiOptions from \"../getUiOptions\";\nimport isCustomWidget from \"../isCustomWidget\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidatorType,\n} from \"../types\";\nimport isFilesArray from \"./isFilesArray\";\nimport isMultiSelect from \"./isMultiSelect\";\n\n/** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n * should be displayed in a UI.\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the display label flag is desired\n * @param [uiSchema={}] - The UI schema from which to derive potentially displayable information\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @returns - True if the label should be displayed or false if it should not\n */\nexport default function getDisplayLabel<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  uiSchema: UiSchema<T, S, F> = {},\n  rootSchema?: S\n): boolean {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  const { label = true } = uiOptions;\n  let displayLabel = !!label;\n  const schemaType = getSchemaType<S>(schema);\n\n  if (schemaType === \"array\") {\n    displayLabel =\n      isMultiSelect<T, S, F>(validator, schema, rootSchema) ||\n      isFilesArray<T, S, F>(validator, schema, uiSchema, rootSchema) ||\n      isCustomWidget(uiSchema);\n  }\n\n  if (schemaType === \"object\") {\n    displayLabel = false;\n  }\n  if (schemaType === \"boolean\" && !uiSchema[UI_WIDGET_KEY]) {\n    displayLabel = false;\n  }\n  if (uiSchema[UI_FIELD_KEY]) {\n    displayLabel = false;\n  }\n  return displayLabel;\n}\n","import isEmpty from \"lodash/isEmpty\";\n\nimport mergeObjects from \"../mergeObjects\";\nimport {\n  ErrorSchema,\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidationData,\n  ValidatorType,\n} from \"../types\";\n\n/** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in the\n * two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n * `validator.toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed, then\n * `validationData` is returned.\n *\n * @param validator - The validator used to convert an ErrorSchema to a list of errors\n * @param validationData - The current `ValidationData` into which to merge the additional errors\n * @param [additionalErrorSchema] - The additional set of errors in an `ErrorSchema`\n * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n */\nexport default function mergeValidationData<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  validationData: ValidationData<T>,\n  additionalErrorSchema?: ErrorSchema<T>\n): ValidationData<T> {\n  if (!additionalErrorSchema) {\n    return validationData;\n  }\n  const { errors: oldErrors, errorSchema: oldErrorSchema } = validationData;\n  let errors = validator.toErrorList(additionalErrorSchema);\n  let errorSchema = additionalErrorSchema;\n  if (!isEmpty(oldErrorSchema)) {\n    errorSchema = mergeObjects(\n      oldErrorSchema,\n      additionalErrorSchema,\n      true\n    ) as ErrorSchema<T>;\n    errors = [...oldErrors].concat(errors);\n  }\n  return { errorSchema, errors };\n}\n","import get from \"lodash/get\";\nimport has from \"lodash/has\";\n\nimport {\n  FormContextType,\n  GenericObjectType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport { PROPERTIES_KEY, REF_KEY } from \"../constants\";\nimport retrieveSchema from \"./retrieveSchema\";\n\nconst NO_VALUE = Symbol(\"no Value\");\n\n/** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the new\n * schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the nature\n * of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the old schema\n * that are non-existent in the new schema are set to `undefined`. The data sanitization process has the following flow:\n *\n * - If the new schema is an object that contains a `properties` object then:\n *   - Create a `removeOldSchemaData` object, setting each key in the `oldSchema.properties` having `data` to undefined\n *   - Create an empty `nestedData` object for use in the key filtering below:\n *   - Iterate over each key in the `newSchema.properties` as follows:\n *     - Get the `formValue` of the key from the `data`\n *     - Get the `oldKeySchema` and `newKeyedSchema` for the key, defaulting to `{}` when it doesn't exist\n *     - Retrieve the schema for any refs within each `oldKeySchema` and/or `newKeySchema`\n *     - Get the types of the old and new keyed schemas and if the old doesn't exist or the old & new are the same then:\n *       - If `removeOldSchemaData` has an entry for the key, delete it since the new schema has the same property\n *       - If type of the key in the new schema is `object`:\n *         - Store the value from the recursive `sanitizeDataForNewSchema` call in `nestedData[key]`\n *       - Otherwise, check for default or const values:\n *         - Get the old and new `default` values from the schema and check:\n *           - If the new `default` value does not match the form value:\n *             - If the old `default` value DOES match the form value, then:\n *               - Replace `removeOldSchemaData[key]` with the new `default`\n *               - Otherwise, if the new schema is `readOnly` then replace `removeOldSchemaData[key]` with undefined\n *         - Get the old and new `const` values from the schema and check:\n *           - If the new `const` value does not match the form value:\n *           - If the old `const` value DOES match the form value, then:\n *             - Replace `removeOldSchemaData[key]` with the new `const`\n *             - Otherwise, replace `removeOldSchemaData[key]` with undefined\n *   - Once all keys have been processed, return an object built as follows:\n *     - `{ ...removeOldSchemaData, ...nestedData, ...pick(data, keysToKeep) }`\n * - If the new and old schema types are array and the `data` is an array then:\n *   - If the type of the old and new schema `items` are a non-array objects:\n *     - Retrieve the schema for any refs within each `oldKeySchema.items` and/or `newKeySchema.items`\n *     - If the `type`s of both items are the same (or the old does not have a type):\n *       - If the type is \"object\", then:\n *         - For each element in the `data` recursively sanitize the data, stopping at `maxItems` if specified\n *       - Otherwise, just return the `data` removing any values after `maxItems` if it is set\n *   - If the type of the old and new schema `items` are booleans of the same value, return `data` as is\n * - Otherwise return `undefined`\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param rootSchema - The root JSON schema of the entire form\n * @param [newSchema] - The new schema for which the data is being sanitized\n * @param [oldSchema] - The old schema from which the data originated\n * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n * @returns - The new form data, with all the fields uniquely associated with the old schema set\n *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n */\nexport default function sanitizeDataForNewSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  rootSchema: S,\n  newSchema?: S,\n  oldSchema?: S,\n  data: any = {}\n): T {\n  // By default, we will clear the form data\n  let newFormData;\n  // If the new schema is of type object and that object contains a list of properties\n  if (has(newSchema, PROPERTIES_KEY)) {\n    // Create an object containing root-level keys in the old schema, setting each key to undefined to remove the data\n    const removeOldSchemaData: GenericObjectType = {};\n    if (has(oldSchema, PROPERTIES_KEY)) {\n      const properties = get(oldSchema, PROPERTIES_KEY, {});\n      Object.keys(properties).forEach((key) => {\n        if (has(data, key)) {\n          removeOldSchemaData[key] = undefined;\n        }\n      });\n    }\n    const keys: string[] = Object.keys(get(newSchema, PROPERTIES_KEY, {}));\n    // Create a place to store nested data that will be a side-effect of the filter\n    const nestedData: GenericObjectType = {};\n    keys.forEach((key) => {\n      const formValue = get(data, key);\n      let oldKeyedSchema: S = get(oldSchema, [PROPERTIES_KEY, key], {});\n      let newKeyedSchema: S = get(newSchema, [PROPERTIES_KEY, key], {});\n      // Resolve the refs if they exist\n      if (has(oldKeyedSchema, REF_KEY)) {\n        oldKeyedSchema = retrieveSchema<T, S, F>(\n          validator,\n          oldKeyedSchema,\n          rootSchema,\n          formValue\n        );\n      }\n      if (has(newKeyedSchema, REF_KEY)) {\n        newKeyedSchema = retrieveSchema<T, S, F>(\n          validator,\n          newKeyedSchema,\n          rootSchema,\n          formValue\n        );\n      }\n      // Now get types and see if they are the same\n      const oldSchemaTypeForKey = get(oldKeyedSchema, \"type\");\n      const newSchemaTypeForKey = get(newKeyedSchema, \"type\");\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaTypeForKey || oldSchemaTypeForKey === newSchemaTypeForKey) {\n        if (has(removeOldSchemaData, key)) {\n          // SIDE-EFFECT: remove the undefined value for a key that has the same type between the old and new schemas\n          delete removeOldSchemaData[key];\n        }\n        // If it is an object, we'll recurse and store the resulting sanitized data for the key\n        if (\n          newSchemaTypeForKey === \"object\" ||\n          (newSchemaTypeForKey === \"array\" && Array.isArray(formValue))\n        ) {\n          // SIDE-EFFECT: process the new schema type of object recursively to save iterations\n          const itemData = sanitizeDataForNewSchema<T, S, F>(\n            validator,\n            rootSchema,\n            newKeyedSchema,\n            oldKeyedSchema,\n            formValue\n          );\n          if (itemData !== undefined || newSchemaTypeForKey === \"array\") {\n            // only put undefined values for the array type and not the object type\n            nestedData[key] = itemData;\n          }\n        } else {\n          // Ok, the non-object types match, let's make sure that a default or a const of a different value is replaced\n          // with the new default or const. This allows the case where two schemas differ that only by the default/const\n          // value to be properly selected\n          const newOptionDefault = get(newKeyedSchema, \"default\", NO_VALUE);\n          const oldOptionDefault = get(oldKeyedSchema, \"default\", NO_VALUE);\n          if (newOptionDefault !== NO_VALUE && newOptionDefault !== formValue) {\n            if (oldOptionDefault === formValue) {\n              // If the old default matches the formValue, we'll update the new value to match the new default\n              removeOldSchemaData[key] = newOptionDefault;\n            } else if (get(newKeyedSchema, \"readOnly\") === true) {\n              // If the new schema has the default set to read-only, treat it like a const and remove the value\n              removeOldSchemaData[key] = undefined;\n            }\n          }\n\n          const newOptionConst = get(newKeyedSchema, \"const\", NO_VALUE);\n          const oldOptionConst = get(oldKeyedSchema, \"const\", NO_VALUE);\n          if (newOptionConst !== NO_VALUE && newOptionConst !== formValue) {\n            // Since this is a const, if the old value matches, replace the value with the new const otherwise clear it\n            removeOldSchemaData[key] =\n              oldOptionConst === formValue ? newOptionConst : undefined;\n          }\n        }\n      }\n    });\n\n    newFormData = {\n      ...data,\n      ...removeOldSchemaData,\n      ...nestedData,\n    };\n    // First apply removing the old schema data, then apply the nested data, then apply the old data keys to keep\n  } else if (\n    get(oldSchema, \"type\") === \"array\" &&\n    get(newSchema, \"type\") === \"array\" &&\n    Array.isArray(data)\n  ) {\n    let oldSchemaItems = get(oldSchema, \"items\");\n    let newSchemaItems = get(newSchema, \"items\");\n    // If any of the array types `items` are arrays (remember arrays are objects) then we'll just drop the data\n    // Eventually, we may want to deal with when either of the `items` are arrays since those tuple validations\n    if (\n      typeof oldSchemaItems === \"object\" &&\n      typeof newSchemaItems === \"object\" &&\n      !Array.isArray(oldSchemaItems) &&\n      !Array.isArray(newSchemaItems)\n    ) {\n      if (has(oldSchemaItems, REF_KEY)) {\n        oldSchemaItems = retrieveSchema<T, S, F>(\n          validator,\n          oldSchemaItems as S,\n          rootSchema,\n          data as T\n        );\n      }\n      if (has(newSchemaItems, REF_KEY)) {\n        newSchemaItems = retrieveSchema<T, S, F>(\n          validator,\n          newSchemaItems as S,\n          rootSchema,\n          data as T\n        );\n      }\n      // Now get types and see if they are the same\n      const oldSchemaType = get(oldSchemaItems, \"type\");\n      const newSchemaType = get(newSchemaItems, \"type\");\n      // Check if the old option has the same key with the same type\n      if (!oldSchemaType || oldSchemaType === newSchemaType) {\n        const maxItems = get(newSchema, \"maxItems\", -1);\n        if (newSchemaType === \"object\") {\n          newFormData = data.reduce((newValue, aValue) => {\n            const itemValue = sanitizeDataForNewSchema<T, S, F>(\n              validator,\n              rootSchema,\n              newSchemaItems as S,\n              oldSchemaItems as S,\n              aValue\n            );\n            if (\n              itemValue !== undefined &&\n              (maxItems < 0 || newValue.length < maxItems)\n            ) {\n              newValue.push(itemValue);\n            }\n            return newValue;\n          }, []);\n        } else {\n          newFormData =\n            maxItems > 0 && data.length > maxItems\n              ? data.slice(0, maxItems)\n              : data;\n        }\n      }\n    } else if (\n      typeof oldSchemaItems === \"boolean\" &&\n      typeof newSchemaItems === \"boolean\" &&\n      oldSchemaItems === newSchemaItems\n    ) {\n      // If they are both booleans and have the same value just return the data as is otherwise fall-thru to undefined\n      newFormData = data;\n    }\n    // Also probably want to deal with `prefixItems` as tuples with the latest 2020 draft\n  }\n  return newFormData as T;\n}\n","import get from \"lodash/get\";\n\nimport {\n  ALL_OF_KEY,\n  DEPENDENCIES_KEY,\n  ID_KEY,\n  ITEMS_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n} from \"../constants\";\nimport isObject from \"../isObject\";\nimport {\n  FormContextType,\n  IdSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Generates an `IdSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `IdSchema` is desired\n * @param [id] - The base id for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @param [idPrefix='root'] - The prefix to use for the id\n * @param [idSeparator='_'] - The separator to use for the path segments in the id\n * @returns - The `IdSchema` object for the `schema`\n */\nexport default function toIdSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  id?: string | null,\n  rootSchema?: S,\n  formData?: T,\n  idPrefix = \"root\",\n  idSeparator = \"_\"\n): IdSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return toIdSchema<T, S, F>(\n      validator,\n      _schema,\n      id,\n      rootSchema,\n      formData,\n      idPrefix,\n      idSeparator\n    );\n  }\n  if (ITEMS_KEY in schema && !get(schema, [ITEMS_KEY, REF_KEY])) {\n    return toIdSchema<T, S, F>(\n      validator,\n      get(schema, ITEMS_KEY) as S,\n      id,\n      rootSchema,\n      formData,\n      idPrefix,\n      idSeparator\n    );\n  }\n  const $id = id || idPrefix;\n  const idSchema: IdSchema = { $id } as IdSchema<T>;\n  if (schema.type === \"object\" && PROPERTIES_KEY in schema) {\n    for (const name in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, name]);\n      const fieldId = idSchema[ID_KEY] + idSeparator + name;\n      idSchema[name] = toIdSchema<T, S, F>(\n        validator,\n        isObject(field) ? field : {},\n        fieldId,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [name]),\n        idPrefix,\n        idSeparator\n      );\n    }\n  }\n  return idSchema as IdSchema<T>;\n}\n","import get from \"lodash/get\";\nimport set from \"lodash/set\";\n\nimport {\n  ALL_OF_KEY,\n  ANY_OF_KEY,\n  ADDITIONAL_PROPERTIES_KEY,\n  DEPENDENCIES_KEY,\n  ITEMS_KEY,\n  NAME_KEY,\n  ONE_OF_KEY,\n  PROPERTIES_KEY,\n  REF_KEY,\n  RJSF_ADDITONAL_PROPERTIES_FLAG,\n} from \"../constants\";\nimport {\n  FormContextType,\n  PathSchema,\n  RJSFSchema,\n  StrictRJSFSchema,\n  ValidatorType,\n} from \"../types\";\nimport { getClosestMatchingOption } from \"./index\";\nimport retrieveSchema from \"./retrieveSchema\";\n\n/** Generates an `PathSchema` object for the `schema`, recursively\n *\n * @param validator - An implementation of the `ValidatorType` interface that will be used when necessary\n * @param schema - The schema for which the `PathSchema` is desired\n * @param [name=''] - The base name for the schema\n * @param [rootSchema] - The root schema, used to primarily to look up `$ref`s\n * @param [formData] - The current formData, if any, to assist retrieving a schema\n * @returns - The `PathSchema` object for the `schema`\n */\nexport default function toPathSchema<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  validator: ValidatorType<T, S, F>,\n  schema: S,\n  name = \"\",\n  rootSchema?: S,\n  formData?: T\n): PathSchema<T> {\n  if (REF_KEY in schema || DEPENDENCIES_KEY in schema || ALL_OF_KEY in schema) {\n    const _schema = retrieveSchema<T, S, F>(\n      validator,\n      schema,\n      rootSchema,\n      formData\n    );\n    return toPathSchema<T, S, F>(\n      validator,\n      _schema,\n      name,\n      rootSchema,\n      formData\n    );\n  }\n\n  const pathSchema: PathSchema = {\n    [NAME_KEY]: name.replace(/^\\./, \"\"),\n  } as PathSchema;\n\n  if (ONE_OF_KEY in schema) {\n    const index = getClosestMatchingOption<T, S, F>(\n      validator,\n      rootSchema!,\n      formData,\n      schema.oneOf as S[],\n      0\n    );\n    const _schema: S = schema.oneOf![index] as S;\n    return toPathSchema<T, S, F>(\n      validator,\n      _schema,\n      name,\n      rootSchema,\n      formData\n    );\n  }\n\n  if (ANY_OF_KEY in schema) {\n    const index = getClosestMatchingOption<T, S, F>(\n      validator,\n      rootSchema!,\n      formData,\n      schema.anyOf as S[],\n      0\n    );\n    const _schema: S = schema.anyOf![index] as S;\n    return toPathSchema<T, S, F>(\n      validator,\n      _schema,\n      name,\n      rootSchema,\n      formData\n    );\n  }\n\n  if (\n    ADDITIONAL_PROPERTIES_KEY in schema &&\n    schema[ADDITIONAL_PROPERTIES_KEY] !== false\n  ) {\n    set(pathSchema, RJSF_ADDITONAL_PROPERTIES_FLAG, true);\n  }\n\n  if (ITEMS_KEY in schema && Array.isArray(formData)) {\n    formData.forEach((element, i: number) => {\n      pathSchema[i] = toPathSchema<T, S, F>(\n        validator,\n        schema.items as S,\n        `${name}.${i}`,\n        rootSchema,\n        element\n      );\n    });\n  } else if (PROPERTIES_KEY in schema) {\n    for (const property in schema.properties) {\n      const field = get(schema, [PROPERTIES_KEY, property]);\n      pathSchema[property] = toPathSchema<T, S, F>(\n        validator,\n        field,\n        `${name}.${property}`,\n        rootSchema,\n        // It's possible that formData is not an object -- this can happen if an\n        // array item has just been added, but not populated with data yet\n        get(formData, [property])\n      );\n    }\n  }\n  return pathSchema as PathSchema<T>;\n}\n","import deepEquals from \"./deepEquals\";\nimport {\n  ErrorSchema,\n  FormContextType,\n  IdSchema,\n  PathSchema,\n  RJSFSchema,\n  SchemaUtilsType,\n  StrictRJSFSchema,\n  UiSchema,\n  ValidationData,\n  ValidatorType,\n} from \"./types\";\nimport {\n  getDefaultFormState,\n  getDisplayLabel,\n  getClosestMatchingOption,\n  getFirstMatchingOption,\n  getMatchingOption,\n  isFilesArray,\n  isMultiSelect,\n  isSelect,\n  mergeValidationData,\n  retrieveSchema,\n  sanitizeDataForNewSchema,\n  toIdSchema,\n  toPathSchema,\n} from \"./schema\";\n\n/** The `SchemaUtils` class provides a wrapper around the publicly exported APIs in the `utils/schema` directory such\n * that one does not have to explicitly pass the `validator` or `rootSchema` to each method. Since both the `validator`\n * and `rootSchema` generally does not change across a `Form`, this allows for providing a simplified set of APIs to the\n * `@rjsf/core` components and the various themes as well. This class implements the `SchemaUtilsType` interface.\n */\nclass SchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n> implements SchemaUtilsType<T, S, F>\n{\n  rootSchema: S;\n  validator: ValidatorType<T, S, F>;\n\n  /** Constructs the `SchemaUtils` instance with the given `validator` and `rootSchema` stored as instance variables\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n   * @param rootSchema - The root schema that will be forwarded to all the APIs\n   */\n  constructor(validator: ValidatorType<T, S, F>, rootSchema: S) {\n    this.rootSchema = rootSchema;\n    this.validator = validator;\n  }\n\n  /** Returns the `ValidatorType` in the `SchemaUtilsType`\n   *\n   * @returns - The `ValidatorType`\n   */\n  getValidator() {\n    return this.validator;\n  }\n\n  /** Determines whether either the `validator` and `rootSchema` differ from the ones associated with this instance of\n   * the `SchemaUtilsType`. If either `validator` or `rootSchema` are falsy, then return false to prevent the creation\n   * of a new `SchemaUtilsType` with incomplete properties.\n   *\n   * @param validator - An implementation of the `ValidatorType` interface that will be compared against the current one\n   * @param rootSchema - The root schema that will be compared against the current one\n   * @returns - True if the `SchemaUtilsType` differs from the given `validator` or `rootSchema`\n   */\n  doesSchemaUtilsDiffer(\n    validator: ValidatorType<T, S, F>,\n    rootSchema: S\n  ): boolean {\n    if (!validator || !rootSchema) {\n      return false;\n    }\n    return (\n      this.validator !== validator || !deepEquals(this.rootSchema, rootSchema)\n    );\n  }\n\n  /** Returns the superset of `formData` that includes the given set updated to include any missing fields that have\n   * computed to have defaults provided in the `schema`.\n   *\n   * @param schema - The schema for which the default state is desired\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [includeUndefinedValues=false] - Optional flag, if true, cause undefined values to be added as defaults.\n   *          If \"excludeObjectChildren\", pass `includeUndefinedValues` as false when computing defaults for any nested\n   *          object properties.\n   * @returns - The resulting `formData` with all the defaults provided\n   */\n  getDefaultFormState(\n    schema: S,\n    formData?: T,\n    includeUndefinedValues: boolean | \"excludeObjectChildren\" = false\n  ): T | T[] | undefined {\n    return getDefaultFormState<T, S, F>(\n      this.validator,\n      schema,\n      formData,\n      this.rootSchema,\n      includeUndefinedValues\n    );\n  }\n\n  /** Determines whether the combination of `schema` and `uiSchema` properties indicates that the label for the `schema`\n   * should be displayed in a UI.\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [uiSchema] - The UI schema from which to derive potentially displayable information\n   * @returns - True if the label should be displayed or false if it should not\n   */\n  getDisplayLabel(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return getDisplayLabel<T, S, F>(\n      this.validator,\n      schema,\n      uiSchema,\n      this.rootSchema\n    );\n  }\n\n  /** Determines which of the given `options` provided most closely matches the `formData`.\n   * Returns the index of the option that is valid and is the closest match, or 0 if there is no match.\n   *\n   * The closest match is determined using the number of matching properties, and more heavily favors options with\n   * matching readOnly, default, or const values.\n   *\n   * @param formData - The form data associated with the schema\n   * @param options - The list of options that can be selected from\n   * @param [selectedOption] - The index of the currently selected option, defaulted to -1 if not specified\n   * @returns - The index of the option that is the closest match to the `formData` or the `selectedOption` if no match\n   */\n  getClosestMatchingOption(\n    formData: T | undefined,\n    options: S[],\n    selectedOption?: number\n  ): number {\n    return getClosestMatchingOption<T, S, F>(\n      this.validator,\n      this.rootSchema,\n      formData,\n      options,\n      selectedOption\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the first option that matches the data.\n   * Always returns the first option if there is nothing that matches.\n   *\n   * @param formData - The current formData, if any, used to figure out a match\n   * @param options - The list of options to find a matching options from\n   * @returns - The firstindex of the matched option or 0 if none is available\n   */\n  getFirstMatchingOption(formData: T | undefined, options: S[]): number {\n    return getFirstMatchingOption<T, S, F>(\n      this.validator,\n      formData,\n      options,\n      this.rootSchema\n    );\n  }\n\n  /** Given the `formData` and list of `options`, attempts to find the index of the option that best matches the data.\n   * Deprecated, use `getFirstMatchingOption()` instead.\n   *\n   * @param formData - The current formData, if any, onto which to provide any missing defaults\n   * @param options - The list of options to find a matching options from\n   * @returns - The index of the matched option or 0 if none is available\n   * @deprecated\n   */\n  getMatchingOption(formData: T | undefined, options: S[]) {\n    return getMatchingOption<T, S, F>(\n      this.validator,\n      formData,\n      options,\n      this.rootSchema\n    );\n  }\n\n  /** Checks to see if the `schema` and `uiSchema` combination represents an array of files\n   *\n   * @param schema - The schema for which check for array of files flag is desired\n   * @param [uiSchema] - The UI schema from which to check the widget\n   * @returns - True if schema/uiSchema contains an array of files, otherwise false\n   */\n  isFilesArray(schema: S, uiSchema?: UiSchema<T, S, F>) {\n    return isFilesArray<T, S, F>(\n      this.validator,\n      schema,\n      uiSchema,\n      this.rootSchema\n    );\n  }\n\n  /** Checks to see if the `schema` combination represents a multi-select\n   *\n   * @param schema - The schema for which check for a multi-select flag is desired\n   * @returns - True if schema contains a multi-select, otherwise false\n   */\n  isMultiSelect(schema: S) {\n    return isMultiSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Checks to see if the `schema` combination represents a select\n   *\n   * @param schema - The schema for which check for a select flag is desired\n   * @returns - True if schema contains a select, otherwise false\n   */\n  isSelect(schema: S) {\n    return isSelect<T, S, F>(this.validator, schema, this.rootSchema);\n  }\n\n  /** Merges the errors in `additionalErrorSchema` into the existing `validationData` by combining the hierarchies in\n   * the two `ErrorSchema`s and then appending the error list from the `additionalErrorSchema` obtained by calling\n   * `getValidator().toErrorList()` onto the `errors` in the `validationData`. If no `additionalErrorSchema` is passed,\n   * then `validationData` is returned.\n   *\n   * @param validationData - The current `ValidationData` into which to merge the additional errors\n   * @param [additionalErrorSchema] - The additional set of errors\n   * @returns - The `validationData` with the additional errors from `additionalErrorSchema` merged into it, if provided.\n   */\n  mergeValidationData(\n    validationData: ValidationData<T>,\n    additionalErrorSchema?: ErrorSchema<T>\n  ): ValidationData<T> {\n    return mergeValidationData<T, S, F>(\n      this.validator,\n      validationData,\n      additionalErrorSchema\n    );\n  }\n\n  /** Retrieves an expanded schema that has had all of its conditions, additional properties, references and\n   * dependencies resolved and merged into the `schema` given a `rawFormData` that is used to do the potentially\n   * recursive resolution.\n   *\n   * @param schema - The schema for which retrieving a schema is desired\n   * @param [rawFormData] - The current formData, if any, to assist retrieving a schema\n   * @returns - The schema having its conditions, additional properties, references and dependencies resolved\n   */\n  retrieveSchema(schema: S, rawFormData?: T) {\n    return retrieveSchema<T, S, F>(\n      this.validator,\n      schema,\n      this.rootSchema,\n      rawFormData\n    );\n  }\n\n  /** Sanitize the `data` associated with the `oldSchema` so it is considered appropriate for the `newSchema`. If the\n   * new schema does not contain any properties, then `undefined` is returned to clear all the form data. Due to the\n   * nature of schemas, this sanitization happens recursively for nested objects of data. Also, any properties in the\n   * old schemas that are non-existent in the new schema are set to `undefined`.\n   *\n   * @param [newSchema] - The new schema for which the data is being sanitized\n   * @param [oldSchema] - The old schema from which the data originated\n   * @param [data={}] - The form data associated with the schema, defaulting to an empty object when undefined\n   * @returns - The new form data, with all the fields uniquely associated with the old schema set\n   *      to `undefined`. Will return `undefined` if the new schema is not an object containing properties.\n   */\n  sanitizeDataForNewSchema(newSchema?: S, oldSchema?: S, data?: any): T {\n    return sanitizeDataForNewSchema(\n      this.validator,\n      this.rootSchema,\n      newSchema,\n      oldSchema,\n      data\n    );\n  }\n\n  /** Generates an `IdSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [id] - The base id for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @param [idPrefix='root'] - The prefix to use for the id\n   * @param [idSeparator='_'] - The separator to use for the path segments in the id\n   * @returns - The `IdSchema` object for the `schema`\n   */\n  toIdSchema(\n    schema: S,\n    id?: string | null,\n    formData?: T,\n    idPrefix = \"root\",\n    idSeparator = \"_\"\n  ): IdSchema<T> {\n    return toIdSchema<T, S, F>(\n      this.validator,\n      schema,\n      id,\n      this.rootSchema,\n      formData,\n      idPrefix,\n      idSeparator\n    );\n  }\n\n  /** Generates an `PathSchema` object for the `schema`, recursively\n   *\n   * @param schema - The schema for which the display label flag is desired\n   * @param [name] - The base name for the schema\n   * @param [formData] - The current formData, if any, onto which to provide any missing defaults\n   * @returns - The `PathSchema` object for the `schema`\n   */\n  toPathSchema(schema: S, name?: string, formData?: T): PathSchema<T> {\n    return toPathSchema<T, S, F>(\n      this.validator,\n      schema,\n      name,\n      this.rootSchema,\n      formData\n    );\n  }\n}\n\n/** Creates a `SchemaUtilsType` interface that is based around the given `validator` and `rootSchema` parameters. The\n * resulting interface implementation will forward the `validator` and `rootSchema` to all the wrapped APIs.\n *\n * @param validator - an implementation of the `ValidatorType` interface that will be forwarded to all the APIs\n * @param rootSchema - The root schema that will be forwarded to all the APIs\n * @returns - An implementation of a `SchemaUtilsType` interface\n */\nexport default function createSchemaUtils<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(validator: ValidatorType<T, S, F>, rootSchema: S): SchemaUtilsType<T, S, F> {\n  return new SchemaUtils<T, S, F>(validator, rootSchema);\n}\n","/** Given the `FileReader.readAsDataURL()` based `dataURI` extracts that data into an actual Blob along with the name\n * of that Blob if provided in the URL. If no name is provided, then the name falls back to `unknown`.\n *\n * @param dataURI - The `DataUrl` potentially containing name and raw data to be converted to a Blob\n * @returns - an object containing a Blob and its name, extracted from the URI\n */\nexport default function dataURItoBlob(dataURI: string) {\n  // Split metadata from data\n  const splitted: string[] = dataURI.split(\",\");\n  // Split params\n  const params: string[] = splitted[0].split(\";\");\n  // Get mime-type from params\n  const type: string = params[0].replace(\"data:\", \"\");\n  // Filter the name property from params\n  const properties = params.filter((param) => {\n    return param.split(\"=\")[0] === \"name\";\n  });\n  // Look for the name and use unknown if no name property.\n  let name: string;\n  if (properties.length !== 1) {\n    name = \"unknown\";\n  } else {\n    // Because we filtered out the other property,\n    // we only have the name case here.\n    name = properties[0].split(\"=\")[1];\n  }\n\n  // Built the Uint8Array Blob parameter from the base64 string.\n  const binary = atob(splitted[1]);\n  const array = [];\n  for (let i = 0; i < binary.length; i++) {\n    array.push(binary.charCodeAt(i));\n  }\n  // Create the blob object\n  const blob = new window.Blob([new Uint8Array(array)], { type });\n\n  return { blob, name };\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Returns the value(s) from `allEnumOptions` at the index(es) provided by `valueIndex`. If `valueIndex` is not an\n * array AND the index is not valid for `allEnumOptions`, `emptyValue` is returned. If `valueIndex` is an array, AND it\n * contains an invalid index, the returned array will have the resulting undefined values filtered out, leaving only\n * valid values or in the worst case, an empty array.\n *\n * @param valueIndex - The index(es) of the value(s) that should be returned\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [emptyValue] - The value to return when the non-array `valueIndex` does not refer to a real option\n * @returns - The single or list of values specified by the single or list of indexes if they are valid. Otherwise,\n *        `emptyValue` or an empty list.\n */\nexport default function enumOptionsValueForIndex<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  valueIndex: string | number | Array<string | number>,\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  emptyValue?: EnumOptionsType<S>[\"value\"]\n): EnumOptionsType<S>[\"value\"] | EnumOptionsType<S>[\"value\"][] | undefined {\n  if (Array.isArray(valueIndex)) {\n    return valueIndex\n      .map((index) => enumOptionsValueForIndex(index, allEnumOptions))\n      .filter((val) => val);\n  }\n  // So Number(null) and Number('') both return 0, so use emptyValue for those two values\n  const index =\n    valueIndex === \"\" || valueIndex === null ? -1 : Number(valueIndex);\n  const option = allEnumOptions[index];\n  return option ? option.value : emptyValue;\n}\n","import isEqual from \"lodash/isEqual\";\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from \"./types\";\nimport enumOptionsValueForIndex from \"./enumOptionsValueForIndex\";\n\n/** Removes the enum option value at the `valueIndex` from the currently `selected` (list of) value(s). If `selected` is\n * a list, then that list is updated to remove the enum option value with the `valueIndex` in `allEnumOptions`. If it is\n * a single value, then if the enum option value with the `valueIndex` in `allEnumOptions` matches `selected`, undefined\n * is returned, otherwise the `selected` value is returned.\n *\n * @param valueIndex - The index of the value to be removed from the selected list or single value\n * @param selected - The current (list of) selected value(s)\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated `selected` with the enum option value at `valueIndex` in `allEnumOptions` removed from it,\n *        unless `selected` is a single value. In that case, if the `valueIndex` value matches `selected`, returns\n *        undefined, otherwise `selected`.\n */\nexport default function enumOptionsDeselectValue<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  valueIndex: string | number,\n  selected?: EnumOptionsType<S>[\"value\"] | EnumOptionsType<S>[\"value\"][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n): EnumOptionsType<S>[\"value\"] | EnumOptionsType<S>[\"value\"][] | undefined {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (Array.isArray(selected)) {\n    return selected.filter((v) => !isEqual(v, value));\n  }\n  return isEqual(value, selected) ? undefined : selected;\n}\n","import isEqual from \"lodash/isEqual\";\n\nimport { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Determines whether the given `value` is (one of) the `selected` value(s).\n *\n * @param value - The value being checked to see if it is selected\n * @param selected - The current selected value or list of values\n * @returns - true if the `value` is one of the `selected` ones, false otherwise\n */\nexport default function enumOptionsIsSelected<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  value: EnumOptionsType<S>[\"value\"],\n  selected: EnumOptionsType<S>[\"value\"] | EnumOptionsType<S>[\"value\"][]\n) {\n  if (Array.isArray(selected)) {\n    return selected.some((sel) => isEqual(sel, value));\n  }\n  return isEqual(selected, value);\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from \"./types\";\nimport enumOptionsIsSelected from \"./enumOptionsIsSelected\";\n\n/** Returns the index(es) of the options in `allEnumOptions` whose value(s) match the ones in `value`. All the\n * `enumOptions` are filtered based on whether they are a \"selected\" `value` and the index of each selected one is then\n * stored in an array. If `multiple` is true, that array is returned, otherwise the first element in the array is\n * returned.\n *\n * @param value - The single value or list of values for which indexes are desired\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @param [multiple=false] - Optional flag, if true will return a list of index, otherwise a single one\n * @returns - A single string index for the first `value` in `allEnumOptions`, if not `multiple`. Otherwise, the list\n *        of indexes for (each of) the value(s) in `value`.\n */\nexport default function enumOptionsIndexForValue<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  value: EnumOptionsType<S>[\"value\"] | EnumOptionsType<S>[\"value\"][],\n  allEnumOptions: EnumOptionsType<S>[] = [],\n  multiple = false\n): string | string[] | undefined {\n  const selectedIndexes: string[] = allEnumOptions\n    .map((opt, index) =>\n      enumOptionsIsSelected(opt.value, value) ? String(index) : undefined\n    )\n    .filter((opt) => typeof opt !== \"undefined\") as string[];\n  if (!multiple) {\n    return selectedIndexes[0];\n  }\n  return selectedIndexes;\n}\n","import { EnumOptionsType, RJSFSchema, StrictRJSFSchema } from \"./types\";\nimport enumOptionsValueForIndex from \"./enumOptionsValueForIndex\";\n\n/** Add the enum option value at the `valueIndex` to the list of `selected` values in the proper order as defined by\n * `allEnumOptions`\n *\n * @param valueIndex - The index of the value that should be selected\n * @param selected - The current list of selected values\n * @param [allEnumOptions=[]] - The list of all the known enumOptions\n * @returns - The updated list of selected enum values with enum value at the `valueIndex` added to it\n */\nexport default function enumOptionsSelectValue<\n  S extends StrictRJSFSchema = RJSFSchema\n>(\n  valueIndex: string | number,\n  selected: EnumOptionsType<S>[\"value\"][],\n  allEnumOptions: EnumOptionsType<S>[] = []\n) {\n  const value = enumOptionsValueForIndex<S>(valueIndex, allEnumOptions);\n  if (value) {\n    const index = allEnumOptions.findIndex((opt) => value === opt.value);\n    const all = allEnumOptions.map(({ value: val }) => val);\n    const updated = selected\n      .slice(0, index)\n      .concat(value, selected.slice(index));\n    // As inserting values at predefined index positions doesn't work with empty\n    // arrays, we need to reorder the updated selection to match the initial order\n    return updated.sort((a, b) => Number(all.indexOf(a) > all.indexOf(b)));\n  }\n  return selected;\n}\n","import cloneDeep from \"lodash/cloneDeep\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\n\nimport { ErrorSchema } from \"./types\";\nimport { ERRORS_KEY } from \"./constants\";\n\n/** The `ErrorSchemaBuilder<T>` is used to build an `ErrorSchema<T>` since the definition of the `ErrorSchema` type is\n * designed for reading information rather than writing it. Use this class to add, replace or clear errors in an error\n * schema by using either dotted path or an array of path names. Once you are done building the `ErrorSchema`, you can\n * get the result and/or reset all the errors back to an initial set and start again.\n */\nexport default class ErrorSchemaBuilder<T = any> {\n  /** The error schema being built\n   *\n   * @private\n   */\n  private errorSchema: ErrorSchema<T> = {};\n\n  /** Construct an `ErrorSchemaBuilder` with an optional initial set of errors in an `ErrorSchema`.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   */\n  constructor(initialSchema?: ErrorSchema<T>) {\n    this.resetAllErrors(initialSchema);\n  }\n\n  /** Returns the `ErrorSchema` that has been updated by the methods of the `ErrorSchemaBuilder`\n   */\n  get ErrorSchema() {\n    return this.errorSchema;\n  }\n\n  /** Will get an existing `ErrorSchema` at the specified `pathOfError` or create and return one.\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The error block for the given `pathOfError` or the root if not provided\n   * @private\n   */\n  private getOrCreateErrorBlock(pathOfError?: string | string[]) {\n    const hasPath =\n      (Array.isArray(pathOfError) && pathOfError.length > 0) ||\n      typeof pathOfError === \"string\";\n    let errorBlock: ErrorSchema = hasPath\n      ? get(this.errorSchema, pathOfError)\n      : this.errorSchema;\n    if (!errorBlock && pathOfError) {\n      errorBlock = {};\n      set(this.errorSchema, pathOfError, errorBlock);\n    }\n    return errorBlock;\n  }\n\n  /** Resets all errors in the `ErrorSchemaBuilder` back to the `initialSchema` if provided, otherwise an empty set.\n   *\n   * @param [initialSchema] - The optional set of initial errors, that will be cloned into the class\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  resetAllErrors(initialSchema?: ErrorSchema<T>) {\n    this.errorSchema = initialSchema ? cloneDeep(initialSchema) : {};\n    return this;\n  }\n\n  /** Adds the `errorOrList` to the list of errors in the `ErrorSchema` at either the root level or the location within\n   * the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to add into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to add the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  addErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    let errorsList = get(errorBlock, ERRORS_KEY);\n    if (!Array.isArray(errorsList)) {\n      errorsList = [];\n      errorBlock[ERRORS_KEY] = errorsList;\n    }\n\n    if (Array.isArray(errorOrList)) {\n      errorsList.push(...errorOrList);\n    } else {\n      errorsList.push(errorOrList);\n    }\n    return this;\n  }\n\n  /** Sets/replaces the `errorOrList` as the error(s) in the `ErrorSchema` at either the root level or the location\n   * within the schema described by the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param errorOrList - The error or list of errors to set into the `ErrorSchema`\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to set the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  setErrors(errorOrList: string | string[], pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    // Effectively clone the array being given to prevent accidental outside manipulation of the given list\n    const listToAdd = Array.isArray(errorOrList)\n      ? [...errorOrList]\n      : [errorOrList];\n    set(errorBlock, ERRORS_KEY, listToAdd);\n    return this;\n  }\n\n  /** Clears the error(s) in the `ErrorSchema` at either the root level or the location within the schema described by\n   * the `pathOfError`. For more information about how to specify the path see the\n   * [eslint lodash plugin docs](https://github.com/wix/eslint-plugin-lodash/blob/master/docs/rules/path-style.md).\n   *\n   * @param [pathOfError] - The optional path into the `ErrorSchema` at which to clear the error(s)\n   * @returns - The `ErrorSchemaBuilder` object for chaining purposes\n   */\n  clearErrors(pathOfError?: string | string[]) {\n    const errorBlock: ErrorSchema = this.getOrCreateErrorBlock(pathOfError);\n    set(errorBlock, ERRORS_KEY, []);\n    return this;\n  }\n}\n","import { RangeSpecType, StrictRJSFSchema } from \"./types\";\nimport { RJSFSchema } from \"./types\";\n\n/** Extracts the range spec information `{ step?: number, min?: number, max?: number }` that can be spread onto an HTML\n * input from the range analog in the schema `{ multipleOf?: number, minimum?: number, maximum?: number }`.\n *\n * @param schema - The schema from which to extract the range spec\n * @returns - A range specification from the schema\n */\nexport default function rangeSpec<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  const spec: RangeSpecType = {};\n  if (schema.multipleOf) {\n    spec.step = schema.multipleOf;\n  }\n  if (schema.minimum || schema.minimum === 0) {\n    spec.min = schema.minimum;\n  }\n  if (schema.maximum || schema.maximum === 0) {\n    spec.max = schema.maximum;\n  }\n  return spec;\n}\n","import rangeSpec from \"./rangeSpec\";\nimport {\n  FormContextType,\n  InputPropsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UIOptionsType,\n} from \"./types\";\n\n/** Using the `schema`, `defaultType` and `options`, extract out the props for the <input> element that make sense.\n *\n * @param schema - The schema for the field provided by the widget\n * @param [defaultType] - The default type, if any, for the field provided by the widget\n * @param [options={}] - The UI Options for the field provided by the widget\n * @param [autoDefaultStepAny=true] - Determines whether to auto-default step=any when the type is number and no step\n * @returns - The extracted `InputPropsType` object\n */\nexport default function getInputProps<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  defaultType?: string,\n  options: UIOptionsType<T, S, F> = {},\n  autoDefaultStepAny = true\n): InputPropsType {\n  const inputProps: InputPropsType = {\n    type: defaultType || \"text\",\n    ...rangeSpec(schema),\n  };\n\n  // If options.inputType is set use that as the input type\n  if (options.inputType) {\n    inputProps.type = options.inputType;\n  } else if (!defaultType) {\n    // If the schema is of type number or integer, set the input type to number\n    if (schema.type === \"number\") {\n      inputProps.type = \"number\";\n      // Only add step if one isn't already defined and we are auto-defaulting the \"any\" step\n      if (autoDefaultStepAny && inputProps.step === undefined) {\n        // Setting step to 'any' fixes a bug in Safari where decimals are not\n        // allowed in number inputs\n        inputProps.step = \"any\";\n      }\n    } else if (schema.type === \"integer\") {\n      inputProps.type = \"number\";\n      // Only add step if one isn't already defined\n      if (inputProps.step === undefined) {\n        // Since this is integer, you always want to step up or down in multiples of 1\n        inputProps.step = 1;\n      }\n    }\n  }\n\n  if (options.autocomplete) {\n    inputProps.autoComplete = options.autocomplete;\n  }\n\n  return inputProps;\n}\n","import { SUBMIT_BTN_OPTIONS_KEY } from \"./constants\";\nimport getUiOptions from \"./getUiOptions\";\nimport {\n  FormContextType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  UiSchema,\n  UISchemaSubmitButtonOptions,\n} from \"./types\";\n\n/** The default submit button options, exported for testing purposes\n */\nexport const DEFAULT_OPTIONS: UISchemaSubmitButtonOptions = {\n  props: {\n    disabled: false,\n  },\n  submitText: \"Submit\",\n  norender: false,\n};\n\n/** Extracts any `ui:submitButtonOptions` from the `uiSchema` and merges them onto the `DEFAULT_OPTIONS`\n *\n * @param [uiSchema={}] - the UI Schema from which to extract submit button props\n * @returns - The merging of the `DEFAULT_OPTIONS` with any custom ones\n */\nexport default function getSubmitButtonOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(uiSchema: UiSchema<T, S, F> = {}): UISchemaSubmitButtonOptions {\n  const uiOptions = getUiOptions<T, S, F>(uiSchema);\n  if (uiOptions && uiOptions[SUBMIT_BTN_OPTIONS_KEY]) {\n    const options = uiOptions[\n      SUBMIT_BTN_OPTIONS_KEY\n    ] as UISchemaSubmitButtonOptions;\n    return { ...DEFAULT_OPTIONS, ...options };\n  }\n\n  return DEFAULT_OPTIONS;\n}\n","import {\n  FormContextType,\n  TemplatesType,\n  Registry,\n  UIOptionsType,\n  StrictRJSFSchema,\n  RJSFSchema,\n} from \"./types\";\n\n/** Returns the template with the given `name` from either the `uiSchema` if it is defined or from the `registry`\n * otherwise. NOTE, since `ButtonTemplates` are not overridden in `uiSchema` only those in the `registry` are returned.\n *\n * @param name - The name of the template to fetch, restricted to the keys of `TemplatesType`\n * @param registry - The `Registry` from which to read the template\n * @param [uiOptions={}] - The `UIOptionsType` from which to read an alternate template\n * @returns - The template from either the `uiSchema` or `registry` for the `name`\n */\nexport default function getTemplate<\n  Name extends keyof TemplatesType<T, S, F>,\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  name: Name,\n  registry: Registry<T, S, F>,\n  uiOptions: UIOptionsType<T, S, F> = {}\n): TemplatesType<T, S, F>[Name] {\n  const { templates } = registry;\n  if (name === \"ButtonTemplates\") {\n    return templates[name];\n  }\n  return (\n    // Evaluating uiOptions[name] results in TS2590: Expression produces a union type that is too complex to represent\n    // To avoid that, we cast uiOptions to `any` before accessing the name field\n    ((uiOptions as any)[name] as TemplatesType<T, S, F>[Name]) ||\n    templates[name]\n  );\n}\n","import React from \"react\";\nimport ReactIs from \"react-is\";\nimport get from \"lodash/get\";\nimport set from \"lodash/set\";\n\nimport {\n  FormContextType,\n  RJSFSchema,\n  Widget,\n  RegistryWidgetsType,\n  StrictRJSFSchema,\n} from \"./types\";\nimport getSchemaType from \"./getSchemaType\";\n\n/** The map of schema types to widget type to widget name\n */\nconst widgetMap: { [k: string]: { [j: string]: string } } = {\n  boolean: {\n    checkbox: \"CheckboxWidget\",\n    radio: \"RadioWidget\",\n    select: \"SelectWidget\",\n    hidden: \"HiddenWidget\",\n  },\n  string: {\n    text: \"TextWidget\",\n    password: \"PasswordWidget\",\n    email: \"EmailWidget\",\n    hostname: \"TextWidget\",\n    ipv4: \"TextWidget\",\n    ipv6: \"TextWidget\",\n    uri: \"URLWidget\",\n    \"data-url\": \"FileWidget\",\n    radio: \"RadioWidget\",\n    select: \"SelectWidget\",\n    textarea: \"TextareaWidget\",\n    hidden: \"HiddenWidget\",\n    date: \"DateWidget\",\n    datetime: \"DateTimeWidget\",\n    \"date-time\": \"DateTimeWidget\",\n    \"alt-date\": \"AltDateWidget\",\n    \"alt-datetime\": \"AltDateTimeWidget\",\n    color: \"ColorWidget\",\n    file: \"FileWidget\",\n  },\n  number: {\n    text: \"TextWidget\",\n    select: \"SelectWidget\",\n    updown: \"UpDownWidget\",\n    range: \"RangeWidget\",\n    radio: \"RadioWidget\",\n    hidden: \"HiddenWidget\",\n  },\n  integer: {\n    text: \"TextWidget\",\n    select: \"SelectWidget\",\n    updown: \"UpDownWidget\",\n    range: \"RangeWidget\",\n    radio: \"RadioWidget\",\n    hidden: \"HiddenWidget\",\n  },\n  array: {\n    select: \"SelectWidget\",\n    checkboxes: \"CheckboxesWidget\",\n    files: \"FileWidget\",\n    hidden: \"HiddenWidget\",\n  },\n};\n\n/** Wraps the given widget with stateless functional component that will merge any `defaultProps.options` with the\n * `options` that are provided in the props. It will add the wrapper component as a `MergedWidget` property onto the\n * `Widget` so that future attempts to wrap `AWidget` will return the already existing wrapper.\n *\n * @param AWidget - A widget that will be wrapped or one that is already wrapped\n * @returns - The wrapper widget\n */\nfunction mergeWidgetOptions<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(AWidget: Widget<T, S, F>) {\n  let MergedWidget: Widget<T, S, F> | undefined = get(AWidget, \"MergedWidget\");\n  // cache return value as property of widget for proper react reconciliation\n  if (!MergedWidget) {\n    const defaultOptions =\n      (AWidget.defaultProps && AWidget.defaultProps.options) || {};\n    MergedWidget = ({ options, ...props }) => {\n      return <AWidget options={{ ...defaultOptions, ...options }} {...props} />;\n    };\n    set(AWidget, \"MergedWidget\", MergedWidget);\n  }\n  return MergedWidget;\n}\n\n/** Given a schema representing a field to render and either the name or actual `Widget` implementation, returns the\n * React component that is used to render the widget. If the `widget` is already a React component, then it is wrapped\n * with a `MergedWidget`. Otherwise an attempt is made to look up the widget inside of the `registeredWidgets` map based\n * on the schema type and `widget` name. If no widget component can be found an `Error` is thrown.\n *\n * @param schema - The schema for the field\n * @param [widget] - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - The `Widget` component to use\n * @throws - An error if there is no `Widget` component that can be returned\n */\nexport default function getWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  widget?: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n): Widget<T, S, F> {\n  const type = getSchemaType(schema);\n\n  if (\n    typeof widget === \"function\" ||\n    (widget && ReactIs.isForwardRef(React.createElement(widget))) ||\n    ReactIs.isMemo(widget)\n  ) {\n    return mergeWidgetOptions<T, S, F>(widget as Widget<T, S, F>);\n  }\n\n  if (typeof widget !== \"string\") {\n    throw new Error(`Unsupported widget definition: ${typeof widget}`);\n  }\n\n  if (widget in registeredWidgets) {\n    const registeredWidget = registeredWidgets[widget];\n    return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n  }\n\n  if (typeof type === \"string\") {\n    if (!(type in widgetMap)) {\n      throw new Error(`No widget for type '${type}'`);\n    }\n\n    if (widget in widgetMap[type]) {\n      const registeredWidget = registeredWidgets[widgetMap[type][widget]];\n      return getWidget<T, S, F>(schema, registeredWidget, registeredWidgets);\n    }\n  }\n\n  throw new Error(`No widget '${widget}' for type '${type}'`);\n}\n","import getWidget from \"./getWidget\";\nimport {\n  FormContextType,\n  RegistryWidgetsType,\n  RJSFSchema,\n  StrictRJSFSchema,\n  Widget,\n} from \"./types\";\n\n/** Detects whether the `widget` exists for the `schema` with the associated `registryWidgets` and returns true if it\n * does, or false if it doesn't.\n *\n * @param schema - The schema for the field\n * @param widget - Either the name of the widget OR a `Widget` implementation to use\n * @param [registeredWidgets={}] - A registry of widget name to `Widget` implementation\n * @returns - True if the widget exists, false otherwise\n */\nexport default function hasWidget<\n  T = any,\n  S extends StrictRJSFSchema = RJSFSchema,\n  F extends FormContextType = any\n>(\n  schema: RJSFSchema,\n  widget: Widget<T, S, F> | string,\n  registeredWidgets: RegistryWidgetsType<T, S, F> = {}\n) {\n  try {\n    getWidget(schema, widget, registeredWidgets);\n    return true;\n  } catch (e) {\n    const err: Error = e as Error;\n    if (\n      err.message &&\n      (err.message.startsWith(\"No widget\") ||\n        err.message.startsWith(\"Unsupported widget\"))\n    ) {\n      return false;\n    }\n    throw e;\n  }\n}\n","import isString from \"lodash/isString\";\n\nimport { IdSchema } from \"./types\";\nimport { ID_KEY } from \"./constants\";\n\n/** Generates a consistent `id` pattern for a given `id` and a `suffix`\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param suffix - The suffix to append to the id\n */\nfunction idGenerator<T = any>(id: IdSchema<T> | string, suffix: string) {\n  const theId = isString(id) ? id : id[ID_KEY];\n  return `${theId}__${suffix}`;\n}\n/** Return a consistent `id` for the field description element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field description element from the given `id`\n */\nexport function descriptionId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, \"description\");\n}\n\n/** Return a consistent `id` for the field error element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field error element from the given `id`\n */\nexport function errorId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, \"error\");\n}\n\n/** Return a consistent `id` for the field examples element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field examples element from the given `id`\n */\nexport function examplesId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, \"examples\");\n}\n\n/** Return a consistent `id` for the field help element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field help element from the given `id`\n */\nexport function helpId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, \"help\");\n}\n\n/** Return a consistent `id` for the field title element\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @returns - The consistent id for the field title element from the given `id`\n */\nexport function titleId<T = any>(id: IdSchema<T> | string) {\n  return idGenerator<T>(id, \"title\");\n}\n\n/** Return a list of element ids that contain additional information about the field that can be used to as the aria\n * description of the field. This is correctly omitting `titleId` which would be \"labeling\" rather than \"describing\" the\n * element.\n *\n * @param id - Either simple string id or an IdSchema from which to extract it\n * @param [includeExamples=false] - Optional flag, if true, will add the `examplesId` into the list\n * @returns - The string containing the list of ids for use in an `aria-describedBy` attribute\n */\nexport function ariaDescribedByIds<T = any>(\n  id: IdSchema<T> | string,\n  includeExamples = false\n) {\n  const examples = includeExamples ? ` ${examplesId<T>(id)}` : \"\";\n  return `${errorId<T>(id)} ${descriptionId<T>(id)} ${helpId<T>(\n    id\n  )}${examples}`;\n}\n\n/** Return a consistent `id` for the `optionIndex`s of a `Radio` or `Checkboxes` widget\n *\n * @param id - The id of the parent component for the option\n * @param optionIndex - The index of the option for which the id is desired\n * @returns - An id for the option index based on the parent `id`\n */\nexport function optionId(id: string, optionIndex: number) {\n  return `${id}-${optionIndex}`;\n}\n","/** Converts a local Date string into a UTC date string\n *\n * @param dateString - The string representation of a date as accepted by the `Date()` constructor\n * @returns - A UTC date string if `dateString` is truthy, otherwise undefined\n */\nexport default function localToUTC(dateString: string) {\n  return dateString ? new Date(dateString).toJSON() : undefined;\n}\n","import { CONST_KEY, ENUM_KEY } from \"./constants\";\nimport { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Returns the constant value from the schema when it is either a single value enum or has a const key. Otherwise\n * throws an error.\n *\n * @param schema - The schema from which to obtain the constant value\n * @returns - The constant value for the schema\n * @throws - Error when the schema does not have a constant value\n */\nexport default function toConstant<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n) {\n  if (\n    ENUM_KEY in schema &&\n    Array.isArray(schema.enum) &&\n    schema.enum.length === 1\n  ) {\n    return schema.enum[0];\n  }\n  if (CONST_KEY in schema) {\n    return schema.const;\n  }\n  throw new Error(\"schema cannot be inferred as a constant\");\n}\n","import toConstant from \"./toConstant\";\nimport { RJSFSchema, EnumOptionsType, StrictRJSFSchema } from \"./types\";\n\n/** Gets the list of options from the schema. If the schema has an enum list, then those enum values are returned. The\n * labels for the options will be extracted from the non-standard, RJSF-deprecated `enumNames` if it exists, otherwise\n * the label will be the same as the `value`. If the schema has a `oneOf` or `anyOf`, then the value is the list of\n * `const` values from the schema and the label is either the `schema.title` or the value.\n *\n * @param schema - The schema from which to extract the options list\n * @returns - The list of options from the schema\n */\nexport default function optionsList<S extends StrictRJSFSchema = RJSFSchema>(\n  schema: S\n): EnumOptionsType<S>[] | undefined {\n  // enumNames was deprecated in v5 and is intentionally omitted from the RJSFSchema type.\n  // Cast the type to include enumNames so the feature still works.\n  const schemaWithEnumNames = schema as S & { enumNames?: string[] };\n  if (schemaWithEnumNames.enumNames && process.env.NODE_ENV !== \"production\") {\n    console.warn(\n      \"The enumNames property is deprecated and may be removed in a future major release.\"\n    );\n  }\n  if (schema.enum) {\n    return schema.enum.map((value, i) => {\n      const label =\n        (schemaWithEnumNames.enumNames && schemaWithEnumNames.enumNames[i]) ||\n        String(value);\n      return { label, value };\n    });\n  }\n  const altSchemas = schema.oneOf || schema.anyOf;\n  return (\n    altSchemas &&\n    altSchemas.map((aSchemaDef) => {\n      const aSchema = aSchemaDef as S;\n      const value = toConstant(aSchema);\n      const label = aSchema.title || String(value);\n      return {\n        schema: aSchema,\n        label,\n        value,\n      };\n    })\n  );\n}\n","import { GenericObjectType } from \"./types\";\n\n/** Given a list of `properties` and an `order` list, returns a list that contains the `properties` ordered correctly.\n * If `order` is not an array, then the untouched `properties` list is returned. Otherwise `properties` is ordered per\n * the `order` list. If `order` contains a '*' then any `properties` that are not mentioned explicity in `order` will be\n * places in the location of the `*`.\n *\n * @param properties - The list of property keys to be ordered\n * @param order - An array of property keys to be ordered first, with an optional '*' property\n * @returns - A list with the `properties` ordered\n * @throws - Error when the properties cannot be ordered correctly\n */\nexport default function orderProperties(\n  properties: string[],\n  order?: string[]\n): string[] {\n  if (!Array.isArray(order)) {\n    return properties;\n  }\n\n  const arrayToHash = (arr: string[]) =>\n    arr.reduce((prev: GenericObjectType, curr) => {\n      prev[curr] = true;\n      return prev;\n    }, {});\n  const errorPropList = (arr: string[]) =>\n    arr.length > 1\n      ? `properties '${arr.join(\"', '\")}'`\n      : `property '${arr[0]}'`;\n  const propertyHash = arrayToHash(properties);\n  const orderFiltered = order.filter(\n    (prop) => prop === \"*\" || propertyHash[prop]\n  );\n  const orderHash = arrayToHash(orderFiltered);\n\n  const rest = properties.filter((prop: string) => !orderHash[prop]);\n  const restIndex = orderFiltered.indexOf(\"*\");\n  if (restIndex === -1) {\n    if (rest.length) {\n      throw new Error(\n        `uiSchema order list does not contain ${errorPropList(rest)}`\n      );\n    }\n    return orderFiltered;\n  }\n  if (restIndex !== orderFiltered.lastIndexOf(\"*\")) {\n    throw new Error(\"uiSchema order list contains more than one wildcard item\");\n  }\n\n  const complete = [...orderFiltered];\n  complete.splice(restIndex, 1, ...rest);\n  return complete;\n}\n","/** Returns a string representation of the `num` that is padded with leading \"0\"s if necessary\n *\n * @param num - The number to pad\n * @param width - The width of the string at which no lead padding is necessary\n * @returns - The number converted to a string with leading zero padding if the number of digits is less than `width`\n */\nexport default function pad(num: number, width: number) {\n  let s = String(num);\n  while (s.length < width) {\n    s = \"0\" + s;\n  }\n  return s;\n}\n","import { DateObject } from \"./types\";\n\n/** Parses the `dateString` into a `DateObject`, including the time information when `includeTime` is true\n *\n * @param dateString - The date string to parse into a DateObject\n * @param [includeTime=true] - Optional flag, if false, will not include the time data into the object\n * @returns - The date string converted to a `DateObject`\n * @throws - Error when the date cannot be parsed from the string\n */\nexport default function parseDateString(\n  dateString?: string,\n  includeTime = true\n): DateObject {\n  if (!dateString) {\n    return {\n      year: -1,\n      month: -1,\n      day: -1,\n      hour: includeTime ? -1 : 0,\n      minute: includeTime ? -1 : 0,\n      second: includeTime ? -1 : 0,\n    };\n  }\n  const date = new Date(dateString);\n  if (Number.isNaN(date.getTime())) {\n    throw new Error(\"Unable to parse date \" + dateString);\n  }\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1, // oh you, javascript.\n    day: date.getUTCDate(),\n    hour: includeTime ? date.getUTCHours() : 0,\n    minute: includeTime ? date.getUTCMinutes() : 0,\n    second: includeTime ? date.getUTCSeconds() : 0,\n  };\n}\n","import { RJSFSchema, StrictRJSFSchema } from \"./types\";\n\n/** Check to see if a `schema` specifies that a value must be true. This happens when:\n * - `schema.const` is truthy\n * - `schema.enum` == `[true]`\n * - `schema.anyOf` or `schema.oneOf` has a single value which recursively returns true\n * - `schema.allOf` has at least one value which recursively returns true\n *\n * @param schema - The schema to check\n * @returns - True if the schema specifies a value that must be true, false otherwise\n */\nexport default function schemaRequiresTrueValue<\n  S extends StrictRJSFSchema = RJSFSchema\n>(schema: S): boolean {\n  // Check if const is a truthy value\n  if (schema.const) {\n    return true;\n  }\n\n  // Check if an enum has a single value of true\n  if (schema.enum && schema.enum.length === 1 && schema.enum[0] === true) {\n    return true;\n  }\n\n  // If anyOf has a single value, evaluate the subschema\n  if (schema.anyOf && schema.anyOf.length === 1) {\n    return schemaRequiresTrueValue(schema.anyOf[0] as S);\n  }\n\n  // If oneOf has a single value, evaluate the subschema\n  if (schema.oneOf && schema.oneOf.length === 1) {\n    return schemaRequiresTrueValue(schema.oneOf[0] as S);\n  }\n\n  // Evaluate each subschema in allOf, to see if one of them requires a true value\n  if (schema.allOf) {\n    const schemaSome = (subSchema: S[\"additionalProperties\"]) =>\n      schemaRequiresTrueValue(subSchema as S);\n    return schema.allOf.some(schemaSome);\n  }\n\n  return false;\n}\n","import React from \"react\";\n\nimport deepEquals from \"./deepEquals\";\n\n/** Determines whether the given `component` should be rerendered by comparing its current set of props and state\n * against the next set. If either of those two sets are not the same, then the component should be rerendered.\n *\n * @param component - A React component being checked\n * @param nextProps - The next set of props against which to check\n * @param nextState - The next set of state against which to check\n * @returns - True if the component should be re-rendered, false otherwise\n */\nexport default function shouldRender(\n  component: React.Component,\n  nextProps: any,\n  nextState: any\n) {\n  const { props, state } = component;\n  return !deepEquals(props, nextProps) || !deepEquals(state, nextState);\n}\n","import { DateObject } from \"./types\";\n\n/** Returns a UTC date string for the given `dateObject`. If `time` is false, then the time portion of the string is\n * removed.\n *\n * @param dateObject - The `DateObject` to convert to a date string\n * @param [time=true] - Optional flag used to remove the time portion of the date string if false\n * @returns - The UTC date string\n */\nexport default function toDateString(dateObject: DateObject, time = true) {\n  const { year, month, day, hour = 0, minute = 0, second = 0 } = dateObject;\n  const utcTime = Date.UTC(year, month - 1, day, hour, minute, second);\n  const datetime = new Date(utcTime).toJSON();\n  return time ? datetime : datetime.slice(0, 10);\n}\n","import pad from \"./pad\";\n\n/** Converts a UTC date string into a local Date format\n *\n * @param jsonDate - A UTC date string\n * @returns - An empty string when `jsonDate` is falsey, otherwise a date string in local format\n */\nexport default function utcToLocal(jsonDate: string) {\n  if (!jsonDate) {\n    return \"\";\n  }\n\n  // required format of `'yyyy-MM-ddThh:mm' followed by optional ':ss' or ':ss.SSS'\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type%3Ddatetime-local)\n  // > should be a _valid local date and time string_ (not GMT)\n\n  // Note - date constructor passed local ISO-8601 does not correctly\n  // change time to UTC in node pre-8\n  const date = new Date(jsonDate);\n\n  const yyyy = pad(date.getFullYear(), 4);\n  const MM = pad(date.getMonth() + 1, 2);\n  const dd = pad(date.getDate(), 2);\n  const hh = pad(date.getHours(), 2);\n  const mm = pad(date.getMinutes(), 2);\n  const ss = pad(date.getSeconds(), 2);\n  const SSS = pad(date.getMilliseconds(), 3);\n\n  return `${yyyy}-${MM}-${dd}T${hh}:${mm}:${ss}.${SSS}`;\n}\n"],"names":["isObject","thing","File","Date","Array","isArray","allowAdditionalItems","schema","additionalItems","console","warn","asNumber","value","undefined","test","n","Number","valid","isNaN","ADDITIONAL_PROPERTY_FLAG","ADDITIONAL_PROPERTIES_KEY","ALL_OF_KEY","ANY_OF_KEY","CONST_KEY","DEFAULT_KEY","DEFINITIONS_KEY","DEPENDENCIES_KEY","ENUM_KEY","ERRORS_KEY","ID_KEY","ITEMS_KEY","NAME_KEY","ONE_OF_KEY","PROPERTIES_KEY","REQUIRED_KEY","SUBMIT_BTN_OPTIONS_KEY","REF_KEY","RJSF_ADDITONAL_PROPERTIES_FLAG","UI_FIELD_KEY","UI_WIDGET_KEY","UI_OPTIONS_KEY","getUiOptions","uiSchema","Object","keys","filter","key","indexOf","reduce","options","error","substring","canExpand","formData","additionalProperties","expandable","maxProperties","length","deepEquals","a","b","isEqualWith","obj","other","splitKeyElementFromObject","object","remaining","omit","findSchemaDefinition","$ref","rootSchema","ref","startsWith","decodeURIComponent","Error","current","jsonpointer","get","theRef","subSchema","getMatchingOption","validator","i","option","properties","requiresAnyOf","anyOf","map","required","augmentedSchema","shallowClone","allOf","slice","push","assign","isValid","getFirstMatchingOption","guessType","getSchemaType","type","includes","find","mergeSchemas","obj1","obj2","acc","left","right","union","resolveCondition","expression","then","otherwise","resolvedSchemaLessConditional","_excluded","conditionalSchema","retrieveSchema","resolveSchema","resolveReference","resolvedSchema","resolveDependencies","allOfSubschema","$refSchema","localSchema","stubExistingAdditionalProperties","theSchema","aFormData","forEach","set","rawFormData","mergeAllOf","deep","e","resolvedSchemaWithoutAllOf","hasAdditionalProperties","dependencies","remainingSchema","oneOf","processDependencies","dependencyKey","remainingDependencies","dependencyValue","withDependentProperties","withDependentSchema","additionallyRequired","from","Set","dependentSchema","resolvedOneOf","subschema","withExactlyOneSubschema","validSubschemas","conditionPropertySchema","conditionSchema","validateFormData","errors","dependentSubschema","JUNK_OPTION","__not_really_there__","calculateIndexScore","totalScore","score","formValue","has","newSchema","getClosestMatchingOption","newScore","isString","selectedOption","allValidIndexes","validList","index","testOptions","match","times","scoreData","bestScore","bestIndex","isFixedItems","items","every","item","mergeDefaultsWithFormData","defaults","defaultsArray","mapped","idx","mergeObjects","concatArrays","toMerge","result","concat","isConstant","isSelect","altSchemas","isMultiSelect","uniqueItems","AdditionalItemsHandling","getInnerSchemaForArrayItem","Ignore","maybeAddDefaultToObject","computedDefault","includeUndefinedValues","requiredFields","isEmpty","computeDefaults","rawSchema","parentDefaults","refSchema","itemSchema","objectDefaults","additionalPropertiesSchema","schemaItem","Fallback","minItems","defaultsLength","defaultEntries","fillerSchema","Invert","fillerDefault","fillerEntries","fill","getDefaultFormState","isCustomWidget","isFilesArray","itemsSchema","format","getDisplayLabel","uiOptions","label","displayLabel","schemaType","mergeValidationData","validationData","additionalErrorSchema","oldErrors","oldErrorSchema","errorSchema","toErrorList","NO_VALUE","Symbol","sanitizeDataForNewSchema","oldSchema","data","newFormData","removeOldSchemaData","nestedData","oldKeyedSchema","newKeyedSchema","oldSchemaTypeForKey","newSchemaTypeForKey","itemData","newOptionDefault","oldOptionDefault","newOptionConst","oldOptionConst","oldSchemaItems","newSchemaItems","oldSchemaType","newSchemaType","maxItems","newValue","aValue","itemValue","toIdSchema","id","idPrefix","idSeparator","_schema","$id","idSchema","name","field","fieldId","toPathSchema","pathSchema","replace","element","property","SchemaUtils","getValidator","doesSchemaUtilsDiffer","createSchemaUtils","dataURItoBlob","dataURI","splitted","split","params","param","binary","atob","array","charCodeAt","blob","window","Blob","Uint8Array","enumOptionsValueForIndex","valueIndex","allEnumOptions","emptyValue","val","enumOptionsDeselectValue","selected","v","isEqual","enumOptionsIsSelected","some","sel","enumOptionsIndexForValue","multiple","selectedIndexes","opt","String","enumOptionsSelectValue","findIndex","all","updated","sort","ErrorSchemaBuilder","initialSchema","resetAllErrors","getOrCreateErrorBlock","pathOfError","hasPath","errorBlock","cloneDeep","addErrors","errorOrList","errorsList","setErrors","listToAdd","clearErrors","rangeSpec","spec","multipleOf","step","minimum","min","maximum","max","getInputProps","defaultType","autoDefaultStepAny","inputProps","inputType","autocomplete","autoComplete","DEFAULT_OPTIONS","props","disabled","submitText","norender","getSubmitButtonOptions","getTemplate","registry","templates","widgetMap","checkbox","radio","select","hidden","string","text","password","email","hostname","ipv4","ipv6","uri","textarea","date","datetime","color","file","number","updown","range","integer","checkboxes","files","mergeWidgetOptions","AWidget","MergedWidget","defaultOptions","defaultProps","React","createElement","getWidget","widget","registeredWidgets","ReactIs","isForwardRef","isMemo","registeredWidget","hasWidget","err","message","idGenerator","suffix","theId","descriptionId","errorId","examplesId","helpId","titleId","ariaDescribedByIds","includeExamples","examples","optionId","optionIndex","localToUTC","dateString","toJSON","toConstant","optionsList","schemaWithEnumNames","enumNames","process","aSchemaDef","aSchema","title","orderProperties","order","arrayToHash","arr","prev","curr","errorPropList","join","propertyHash","orderFiltered","prop","orderHash","rest","restIndex","lastIndexOf","complete","splice","pad","num","width","s","parseDateString","includeTime","year","month","day","hour","minute","second","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","schemaRequiresTrueValue","schemaSome","shouldRender","component","nextProps","nextState","state","toDateString","dateObject","time","utcTime","UTC","utcToLocal","jsonDate","yyyy","getFullYear","MM","getMonth","dd","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","SSS","getMilliseconds"],"mappings":"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"}