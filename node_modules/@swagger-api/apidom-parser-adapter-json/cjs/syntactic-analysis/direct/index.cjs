"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
var _apidomAst = require("@swagger-api/apidom-ast");
var _apidomCore = require("@swagger-api/apidom-core");
const keyMap = {
  document: ['children'],
  object: ['children'],
  array: ['children'],
  string: ['children'],
  property: ['children'],
  key: ['children'],
  error: ['children'],
  ..._apidomCore.keyMap
};
const getNodeType = node => {
  if ((0, _apidomCore.isParseResultElement)(node)) {
    return 'ParseResultElement';
  }
  if ((0, _apidomCore.isElement)(node)) {
    return (0, _apidomCore.getNodeType)(node);
  }
  return (0, _apidomAst.getNodeType)(node);
};

// @ts-ignore
const isNode = element => (0, _apidomCore.isElement)(element) || (0, _apidomAst.isNode)(element);
const Visitor = (0, _stampit.default)({
  props: {
    sourceMap: false,
    annotations: []
  },
  init() {
    /**
     * Private API.
     */

    this.annotations = [];
    const toPosition = node => {
      if (node === null) {
        return null;
      }
      const start = new _apidomCore.ArrayElement([node.startPosition.row, node.startPosition.column, node.startIndex]);
      const end = new _apidomCore.ArrayElement([node.endPosition.row, node.endPosition.column, node.endIndex]);
      start.classes.push('position');
      end.classes.push('position');
      return [start, end];
    };
    const maybeAddSourceMap = (node, element) => {
      if (!this.sourceMap) {
        return;
      }
      const sourceMap = new _apidomCore.SourceMapElement();
      const position = toPosition(node);
      if (position !== null) {
        const [start, end] = position;
        sourceMap.push(start);
        sourceMap.push(end);
      }
      // @ts-ignore
      sourceMap.astNode = node;
      element.meta.set('sourceMap', sourceMap);
    };
    const getFieldFromNode = (fieldName, node) => {
      var _node$childForFieldNa;
      return `${fieldName}Node` in node ?
      // @ts-ignore
      node[`${fieldName}Node`] : 'childForFieldName' in node ? (_node$childForFieldNa = node.childForFieldName) === null || _node$childForFieldNa === void 0 ? void 0 : _node$childForFieldNa.call(node, fieldName) : null;
    };

    /**
     * Public API.
     */

    this.enter = function enter(node) {
      // missing anonymous literals from CST transformed into AnnotationElements.
      // WARNING: be aware that web-tree-sitter and tree-sitter node bindings have inconsistency
      // in `SyntaxNode.isNamed` property. web-tree-sitter has it defined as method
      // whether tree-sitter node binding has it defined as a boolean property.
      if ((typeof node.isNamed === 'function' && !node.isNamed() || node.isNamed === false) && node.isMissing()) {
        // collect annotations from missing literals
        const value = node.type || node.text;
        const message = `(Missing ${value})`;
        const element = new _apidomCore.AnnotationElement(message);
        element.classes.push('warning');
        maybeAddSourceMap(node, element);
        this.annotations.push(element);
      }
      return null; // remove everything unrecognized
    };

    this.document = function document(node) {
      const element = new _apidomCore.ParseResultElement();
      // @ts-ignore
      element._content = node.children;
      maybeAddSourceMap(node, element);
      return element;
    };
    this.ParseResultElement = {
      leave(element) {
        // mark first-non Annotation element as result
        // @ts-ignore
        const elements = element.findElements(_apidomCore.isPrimitiveElement);
        if (elements.length > 0) {
          const resultElement = elements[0];
          resultElement.classes.push('result');
        }

        // provide annotations
        this.annotations.forEach(annotationElement => {
          element.push(annotationElement);
        });
        this.annotations = [];
      }
    };
    this.object = function object(node) {
      const element = new _apidomCore.ObjectElement();
      // @ts-ignore
      element._content = node.children;
      maybeAddSourceMap(node, element);
      return element;
    };
    this.array = function array(node) {
      const element = new _apidomCore.ArrayElement();
      // @ts-ignore
      element._content = node.children;
      maybeAddSourceMap(node, element);
      return element;
    };
    this.pair = function pair(node) {
      const element = new _apidomCore.MemberElement();
      // @ts-ignore
      element.content.key = getFieldFromNode('key', node);
      // @ts-ignore
      element.content.value = getFieldFromNode('value', node);
      maybeAddSourceMap(node, element);

      /**
       * Process possible errors here that may be present in pair node children as we're using direct field access.
       * There are usually 3 children here found: "key", ":", "value".
       */
      if (node.children.length > 3) {
        node.children
        // @ts-ignore
        .filter(child => child.type === 'ERROR').forEach(errorNode => {
          this.ERROR(errorNode, node, [], [node]);
        });
      }
      return element;
    };
    this.string = function string(node) {
      const element = new _apidomCore.StringElement(node.text.slice(1, -1));
      maybeAddSourceMap(node, element);
      return element;
    };
    this.number = function number(node) {
      const element = new _apidomCore.NumberElement(Number(node.text));
      maybeAddSourceMap(node, element);
      return element;
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention
    this.null = function _null(node) {
      const element = new _apidomCore.NullElement();
      maybeAddSourceMap(node, element);
      return element;
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention
    this.true = function _true(node) {
      const element = new _apidomCore.BooleanElement(true);
      maybeAddSourceMap(node, element);
      return element;
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention
    this.false = function _false(node) {
      const element = new _apidomCore.BooleanElement(false);
      maybeAddSourceMap(node, element);
      return element;
    };
    this.ERROR = function ERROR(node, key, parent, path) {
      // collect errors as annotations
      const isUnexpected = !node.hasError();
      const value = node.text;
      const message = isUnexpected ? `(Unexpected ${value})` : `(Error ${value})`;
      const element = new _apidomCore.AnnotationElement(message);
      element.classes.push('error');
      maybeAddSourceMap(node, element);
      if (path.length === 0) {
        // no document to visit, only error is present in CST
        const parseResultElement = new _apidomCore.ParseResultElement();
        parseResultElement.push(element);
        return parseResultElement;
      }

      // we have CST node for document
      this.annotations.push(element);
      return null;
    };
  }
});

/**
 * This version of syntactic analysis translates TreeSitter CTS into ApiDOM.
 * Single traversal pass is needed to get from CST to ApiDOM.
 */
const analyze = (cst, {
  sourceMap = false
} = {}) => {
  const visitor = Visitor();
  return (0, _apidomAst.visit)(cst.rootNode, visitor, {
    // @ts-ignore
    keyMap,
    // @ts-ignore
    nodeTypeGetter: getNodeType,
    // @ts-ignore
    nodePredicate: isNode,
    state: {
      sourceMap
    }
  });
};
var _default = analyze;
exports.default = _default;