"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault");
exports.__esModule = true;
exports.default = void 0;
var _PreOrderCursorChildrenIterator = _interopRequireDefault(require("../PreOrderCursorChildrenIterator.cjs"));
class CursorIterator extends _PreOrderCursorChildrenIterator.default {
  document() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      children: []
    };
  }
  object() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  array() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  pair() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      get keyNode() {
        return this.children.find(node => node.fieldName === 'key');
      },
      get valueNode() {
        return this.children.find(node => node.fieldName === 'value');
      },
      children: []
    };
  }
  string() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      text: this.cursor.nodeText,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  number() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      text: this.cursor.nodeText,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  null() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  true() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  false() {
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      fieldName: this.cursor.currentFieldName,
      children: []
    };
  }
  ERROR() {
    const {
      currentNode
    } = this.cursor;
    return {
      type: this.cursor.nodeType,
      startPosition: this.cursor.startPosition,
      endPosition: this.cursor.endPosition,
      // @ts-ignore
      hasError: () => currentNode.hasError(),
      children: []
    };
  }
}
var _default = CursorIterator;
exports.default = _default;